#!/bin/bash

# üéØ SuperSmartMatch V2.1 Enhanced - R√©solution CV Parser & Tests Complets
# Script tout-en-un pour r√©soudre le port 5051 et valider le syst√®me

echo "üéØ === SUPERSMARTMATCH V2.1 ENHANCED - R√âSOLUTION COMPL√àTE ==="
echo "R√©solution CV Parser V2 (port 5051) + Tests de validation"
echo ""

# Configuration
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
LOG_FILE="ssm_v21_fix_${TIMESTAMP}.log"

# Fonction de logging
log() {
    local message="[$(date '+%H:%M:%S')] $1"
    echo "$message"
    echo "$message" >> "$LOG_FILE"
}

log "üöÄ D√©but de la r√©solution SuperSmartMatch V2.1 Enhanced"

# 1. PHASE 1: DIAGNOSTIC
echo ""
echo "üîç === PHASE 1: DIAGNOSTIC INITIAL ==="
echo ""

log "V√©rification de l'√©tat des services..."

# V√©rification Enhanced API V2.1 (critique)
if curl -s http://localhost:5055/health > /dev/null; then
    log "‚úÖ Enhanced API V2.1 (5055): ACTIF"
    API_V21_OK=true
else
    log "‚ùå Enhanced API V2.1 (5055): INACTIF"
    API_V21_OK=false
fi

# V√©rification Job Parser V2
if curl -s http://localhost:5053/health > /dev/null; then
    log "‚úÖ Job Parser V2 (5053): ACTIF"
    JOB_PARSER_OK=true
else
    log "‚ùå Job Parser V2 (5053): INACTIF"
    JOB_PARSER_OK=false
fi

# V√©rification CV Parser V2 (√† r√©parer)
if curl -s http://localhost:5051/health > /dev/null; then
    log "‚úÖ CV Parser V2 (5051): ACTIF - Pas de r√©paration n√©cessaire"
    CV_PARSER_OK=true
    NEED_FIX=false
else
    log "‚ùå CV Parser V2 (5051): INACTIF - R√©paration n√©cessaire"
    CV_PARSER_OK=false
    NEED_FIX=true
fi

# 2. PHASE 2: R√âPARATION CV PARSER (si n√©cessaire)
if [ "$NEED_FIX" = true ]; then
    echo ""
    echo "üîß === PHASE 2: R√âPARATION CV PARSER V2 ==="
    echo ""
    
    log "D√©but de la r√©paration du CV Parser V2..."
    
    # Arr√™t des services existants
    log "üõë Arr√™t des conteneurs CV Parser existants..."
    docker kill $(docker ps -q --filter 'publish=5051') 2>/dev/null && log "‚úÖ Conteneur arr√™t√©" || log "‚ÑπÔ∏è  Aucun conteneur sur 5051"
    docker rm $(docker ps -aq --filter 'publish=5051') 2>/dev/null && log "‚úÖ Conteneur supprim√©" || log "‚ÑπÔ∏è  Aucun conteneur √† supprimer"
    
    # V√©rification des fichiers critiques
    log "üìÅ V√©rification des fichiers critiques..."
    
    if [ ! -d "cv-parser-v2" ]; then
        log "‚ùå ERREUR CRITIQUE: R√©pertoire cv-parser-v2/ manquant"
        echo "Assurez-vous d'√™tre dans le r√©pertoire racine du projet"
        exit 1
    fi
    
    cd cv-parser-v2
    
    MISSING_FILES=false
    
    if [ ! -f "app.py" ]; then
        log "‚ùå ERREUR: app.py manquant"
        MISSING_FILES=true
    fi
    
    if [ ! -f "Dockerfile" ]; then
        log "‚ùå ERREUR: Dockerfile manquant"
        MISSING_FILES=true
    fi
    
    if [ ! -f "parsers/fix-pdf-extraction.js" ]; then
        log "‚ùå ERREUR: fix-pdf-extraction.js manquant"
        MISSING_FILES=true
    fi
    
    if [ ! -f "parsers/enhanced-mission-parser.js" ]; then
        log "‚ùå ERREUR: enhanced-mission-parser.js manquant"
        MISSING_FILES=true
    fi
    
    if [ "$MISSING_FILES" = true ]; then
        log "‚ùå √âCHEC: Fichiers critiques manquants pour CV Parser V2"
        exit 1
    fi
    
    log "‚úÖ Tous les fichiers critiques pr√©sents"
    
    # Reconstruction de l'image Docker
    log "üèóÔ∏è  Reconstruction de l'image CV Parser V2..."
    docker build -t cv-parser-v2-fixed . --no-cache
    
    if [ $? -ne 0 ]; then
        log "‚ùå √âCHEC: Construction Docker √©chou√©e"
        exit 1
    fi
    
    log "‚úÖ Image Docker reconstruite avec succ√®s"
    
    # D√©marrage du nouveau conteneur
    log "üöÄ D√©marrage du nouveau conteneur..."
    docker run -d \
        -p 5051:5051 \
        --name cv-parser-v2-fixed-${TIMESTAMP} \
        --restart unless-stopped \
        cv-parser-v2-fixed
    
    if [ $? -ne 0 ]; then
        log "‚ùå √âCHEC: D√©marrage du conteneur √©chou√©"
        exit 1
    fi
    
    log "‚úÖ Conteneur d√©marr√©: cv-parser-v2-fixed-${TIMESTAMP}"
    
    # Attente du d√©marrage
    log "‚è≥ Attente du d√©marrage (20 secondes)..."
    sleep 20
    
    # V√©rification de la r√©paration
    log "üîç V√©rification de la r√©paration..."
    for i in {1..6}; do
        if curl -s http://localhost:5051/health > /dev/null; then
            log "‚úÖ CV Parser V2 r√©par√© avec succ√®s !"
            CV_PARSER_OK=true
            break
        else
            log "‚è≥ Tentative $i/6 - en attente..."
            sleep 5
        fi
    done
    
    if [ "$CV_PARSER_OK" = false ]; then
        log "‚ùå √âCHEC: CV Parser V2 ne r√©pond toujours pas"
        log "üö® Logs du conteneur:"
        docker logs --tail 30 cv-parser-v2-fixed-${TIMESTAMP}
        exit 1
    fi
    
    cd ..
else
    log "‚ÑπÔ∏è  CV Parser V2 d√©j√† fonctionnel, passage aux tests"
fi

# 3. PHASE 3: VALIDATION SYST√àME
echo ""
echo "‚úÖ === PHASE 3: VALIDATION SYST√àME V2.1 ==="
echo ""

log "Tests de validation du syst√®me complet..."

# Test Hugo Salvat (validation critique V2.1)
if [ "$API_V21_OK" = true ]; then
    log "üë®‚Äçüíº Test du cas Hugo Salvat (validation V2.1)..."
    
    HUGO_RESPONSE=$(curl -s http://localhost:5055/api/test/hugo-salvat)
    
    if [ $? -eq 0 ]; then
        SCORE=$(echo "$HUGO_RESPONSE" | grep -o '"total_score":[0-9]*' | grep -o '[0-9]*')
        
        if [ ! -z "$SCORE" ]; then
            log "üìä Score Hugo Salvat: ${SCORE}%"
            
            if [ "$SCORE" -lt 30 ]; then
                log "‚úÖ SUCC√àS V2.1: Score faible d√©tect√© (${SCORE}% < 30%)"
                HUGO_TEST_OK=true
            else
                log "‚ö†Ô∏è  ATTENTION: Score √©lev√© (${SCORE}%) - v√©rifier logique V2.1"
                HUGO_TEST_OK=false
            fi
        else
            log "‚ùå Impossible d'extraire le score Hugo Salvat"
            HUGO_TEST_OK=false
        fi
        
        # V√©rification alertes
        if echo "$HUGO_RESPONSE" | grep -q "domain_incompatibility"; then
            log "‚úÖ Alerte d'incompatibilit√© m√©tier d√©tect√©e"
        else
            log "‚ö†Ô∏è  Alerte d'incompatibilit√© manquante"
        fi
    else
        log "‚ùå √âchec test Hugo Salvat"
        HUGO_TEST_OK=false
    fi
else
    log "‚ùå Impossible de tester Hugo Salvat - Enhanced API V2.1 inactif"
    HUGO_TEST_OK=false
fi

# 4. PHASE 4: TESTS AVEC FICHIERS R√âELS
echo ""
echo "üìÑ === PHASE 4: TESTS FICHIERS R√âELS ==="
echo ""

BATU_CV="$HOME/Desktop/BATU Sam.pdf"
IT_JOB="$HOME/Desktop/IT .pdf"

REAL_FILES_OK=false

if [ -f "$BATU_CV" ] && [ -f "$IT_JOB" ]; then
    log "‚úÖ Fichiers de test trouv√©s:"
    log "   CV: $BATU_CV"
    log "   Job: $IT_JOB"
    
    if [ "$CV_PARSER_OK" = true ] && [ "$JOB_PARSER_OK" = true ] && [ "$API_V21_OK" = true ]; then
        log "üéØ Test de matching Enhanced V2.1 avec fichiers r√©els..."
        
        MATCHING_RESULT=$(curl -s -X POST \
            -F "cv_file=@$BATU_CV" \
            -F "job_file=@$IT_JOB" \
            http://localhost:5055/api/matching/files)
        
        if echo "$MATCHING_RESULT" | grep -q '"status":"success"'; then
            MATCH_SCORE=$(echo "$MATCHING_RESULT" | grep -o '"total_score":[0-9]*' | grep -o '[0-9]*')
            
            if [ ! -z "$MATCH_SCORE" ]; then
                log "üìä Score BATU vs IT: ${MATCH_SCORE}%"
                
                if [ "$MATCH_SCORE" -gt 70 ]; then
                    log "‚úÖ EXCELLENT: Score > 70%"
                elif [ "$MATCH_SCORE" -gt 50 ]; then
                    log "‚úÖ BON: Score > 50%"
                else
                    log "‚ÑπÔ∏è  Score: ${MATCH_SCORE}%"
                fi
                
                REAL_FILES_OK=true
            else
                log "‚ùå Impossible d'extraire le score de matching"
            fi
        else
            log "‚ùå √âchec du matching avec fichiers r√©els"
            log "Erreur: $(echo "$MATCHING_RESULT" | grep -o '"error":"[^"]*"')"
        fi
    else
        log "‚ùå Services manquants pour test fichiers r√©els"
    fi
else
    log "‚ö†Ô∏è  Fichiers de test non trouv√©s:"
    log "   Attendu: $BATU_CV"
    log "   Attendu: $IT_JOB"
fi

# 5. PHASE 5: RAPPORT FINAL
echo ""
echo "üìä === RAPPORT FINAL ==="
echo ""

GLOBAL_SUCCESS=true

log "=== √âTAT DES SERVICES ==="
if [ "$CV_PARSER_OK" = true ]; then
    log "‚úÖ CV Parser V2 (5051): FONCTIONNEL"
else
    log "‚ùå CV Parser V2 (5051): NON FONCTIONNEL"
    GLOBAL_SUCCESS=false
fi

if [ "$JOB_PARSER_OK" = true ]; then
    log "‚úÖ Job Parser V2 (5053): FONCTIONNEL"
else
    log "‚ùå Job Parser V2 (5053): NON FONCTIONNEL"
    GLOBAL_SUCCESS=false
fi

if [ "$API_V21_OK" = true ]; then
    log "‚úÖ Enhanced API V2.1 (5055): FONCTIONNEL"
else
    log "‚ùå Enhanced API V2.1 (5055): NON FONCTIONNEL"
    GLOBAL_SUCCESS=false
fi

log "=== VALIDATION V2.1 ==="
if [ "$HUGO_TEST_OK" = true ]; then
    log "‚úÖ Test Hugo Salvat: VALID√â (faux positif √©vit√©)"
else
    log "‚ùå Test Hugo Salvat: √âCHEC"
    GLOBAL_SUCCESS=false
fi

if [ "$REAL_FILES_OK" = true ]; then
    log "‚úÖ Test fichiers r√©els: SUCC√àS"
else
    log "‚ö†Ô∏è  Test fichiers r√©els: NON EFFECTU√â ou √âCHEC"
fi

echo ""

if [ "$GLOBAL_SUCCESS" = true ]; then
    echo "üéâ === SUCC√àS COMPLET ==="
    log "‚úÖ SuperSmartMatch V2.1 Enhanced enti√®rement fonctionnel"
    log "‚úÖ CV Parser V2 r√©solu et op√©rationnel"
    log "‚úÖ Syst√®me pr√™t pour les tests en production"
    
    echo ""
    echo "üöÄ PROCHAINES √âTAPES RECOMMAND√âES:"
    echo "1. Tests en lot:"
    echo "   python test_matching_system.py --cvs-folder ~/Desktop/CV\\ TEST/ --jobs-folder ~/Desktop/FDP\\ TEST/"
    echo ""
    echo "2. Tests comparatifs V2 vs V2.1:"
    echo "   python test_matching_system.py --predefined-tests --output results_v21_${TIMESTAMP}.json"
    echo ""
    echo "3. Documentation des r√©sultats:"
    echo "   Comparaison des scores avant/apr√®s V2.1"
    echo "   Validation des alertes d'incompatibilit√©"
    
else
    echo "‚ö†Ô∏è  === PROBL√àMES D√âTECT√âS ==="
    log "‚ùå Certains composants ne fonctionnent pas correctement"
    log "‚ùå Intervention manuelle requise"
    
    echo ""
    echo "üîß ACTIONS REQUISES:"
    
    if [ "$CV_PARSER_OK" = false ]; then
        echo "- V√©rifier les logs CV Parser: docker logs cv-parser-v2-fixed-${TIMESTAMP}"
    fi
    
    if [ "$JOB_PARSER_OK" = false ]; then
        echo "- Red√©marrer Job Parser V2"
    fi
    
    if [ "$API_V21_OK" = false ]; then
        echo "- Red√©marrer Enhanced API V2.1: python api-matching-enhanced-v2.py"
    fi
fi

echo ""
log "üìÅ Log complet sauvegard√©: $LOG_FILE"
log "üèÅ Fin de l'ex√©cution SuperSmartMatch V2.1 Enhanced"

# Affichage final des services
echo ""
echo "üìã √âtat final des services:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(5051|5053|5055|cv-parser|job-parser)" || echo "Aucun conteneur Docker d√©tect√©"
