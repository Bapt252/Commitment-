#!/bin/bash
# Script de test pour la Session 8: Analyse comportementale et profiling utilisateur

echo "=============================================================="
echo "üß™ Test de Session 8: Analyse comportementale et profiling utilisateur"
echo "=============================================================="

# V√©rifier les pr√©requis
echo -e "\n1. V√©rification des pr√©requis..."

# V√©rifier Python
if command -v python3 >/dev/null 2>&1; then
    echo "‚úÖ Python 3 est install√©"
    python_version=$(python3 --version)
    echo "   Version: $python_version"
else
    echo "‚ùå Python 3 n'est pas install√©"
    exit 1
fi

# V√©rifier les packages Python
echo -e "\n2. V√©rification des packages Python..."
packages=("pandas" "numpy" "flask" "sqlalchemy" "scikit-learn")
all_packages_installed=true

for package in "${packages[@]}"; do
    if python3 -c "import $package" 2>/dev/null; then
        echo "‚úÖ $package est install√©"
    else
        echo "‚ùå $package n'est pas install√©"
        all_packages_installed=false
    fi
done

if ! $all_packages_installed; then
    echo "‚ö†Ô∏è Certains packages n√©cessaires ne sont pas install√©s."
    echo "Voulez-vous les installer maintenant? (y/n)"
    read install_packages
    
    if [ "$install_packages" = "y" ] || [ "$install_packages" = "Y" ]; then
        echo "Installation des packages manquants..."
        pip3 install pandas numpy flask sqlalchemy scikit-learn
    else
        echo "‚ö†Ô∏è Les packages manquants doivent √™tre install√©s pour utiliser la Session 8."
    fi
fi

# V√©rifier l'environnement
echo -e "\n3. V√©rification de l'environnement..."

if [ -f ".session8.env" ]; then
    echo "‚úÖ Fichier d'environnement .session8.env trouv√©"
    source .session8.env
    echo "   PORT: $PORT"
    echo "   DATABASE_URL: ${DATABASE_URL:-non d√©fini}"
else
    echo "‚ö†Ô∏è Fichier d'environnement .session8.env non trouv√©"
    echo "Cr√©ation d'un fichier d'environnement par d√©faut..."
    
    cat > .session8.env << EOF
# Environment configuration for Session 8
export DATABASE_URL="${DATABASE_URL:-postgresql://postgres:postgres@localhost:5432/commitment}"
export PORT=4242
export API_KEY="${API_KEY:-commitment-session8-key}"
export PYTHONPATH="${PYTHONPATH:-$(pwd)}"
EOF
    
    source .session8.env
    echo "‚úÖ Fichier d'environnement cr√©√© et charg√©"
fi

# V√©rifier les modules d'analyse
echo -e "\n4. V√©rification des modules d'analyse..."

if [ -d "analysis_session8" ]; then
    echo "‚úÖ Module analysis_session8 trouv√©"
    
    if [ -f "analysis_session8/__init__.py" ]; then
        echo "‚úÖ Fichier d'initialisation analysis_session8/__init__.py trouv√©"
    else
        echo "‚ùå Fichier d'initialisation analysis_session8/__init__.py manquant"
    fi
    
    module_files=("analyzer.py" "patterns.py" "preferences.py")
    all_modules_present=true
    
    for module in "${module_files[@]}"; do
        if [ -f "analysis_session8/$module" ]; then
            echo "‚úÖ Module analysis_session8/$module trouv√©"
        else
            echo "‚ùå Module analysis_session8/$module manquant"
            all_modules_present=false
        fi
    done
    
    if ! $all_modules_present; then
        echo "‚ö†Ô∏è Certains modules d'analyse n√©cessaires sont manquants"
    fi
else
    echo "‚ö†Ô∏è Module analysis_session8 non trouv√©. V√©rification de l'ancienne structure..."
    
    if [ -d "analysis" ]; then
        echo "‚úÖ Module analysis trouv√© (structure originale)"
        
        if [ -f "analysis/behavioral_analysis.py" ] && [ -f "analysis/pattern_detection.py" ] && [ -f "analysis/preference_scoring.py" ]; then
            echo "‚úÖ Modules d'analyse n√©cessaires trouv√©s dans la structure originale"
        else
            echo "‚ùå Certains modules d'analyse n√©cessaires sont manquants dans la structure originale"
        fi
    else
        echo "‚ùå Aucun module d'analyse trouv√©"
        echo "‚ö†Ô∏è L'API utilisera le mode de d√©monstration sans acc√®s r√©el aux donn√©es"
    fi
fi

# V√©rifier l'API
echo -e "\n5. V√©rification de l'API..."

if [ -f "api/user_profile_api.py" ]; then
    echo "‚úÖ API de profil utilisateur trouv√©e"
else
    echo "‚ùå API de profil utilisateur manquante"
    exit 1
fi

# V√©rifier les scripts
echo -e "\n6. V√©rification des scripts..."

if [ -f "scripts/start_profile_api.sh" ]; then
    echo "‚úÖ Script de d√©marrage trouv√©"
    
    if ! [ -x "scripts/start_profile_api.sh" ]; then
        echo "   Rendre le script ex√©cutable..."
        chmod +x scripts/start_profile_api.sh
    fi
else
    echo "‚ùå Script de d√©marrage manquant"
fi

if [ -f "scripts/stop_profile_api.sh" ]; then
    echo "‚úÖ Script d'arr√™t trouv√©"
    
    if ! [ -x "scripts/stop_profile_api.sh" ]; then
        echo "   Rendre le script ex√©cutable..."
        chmod +x scripts/stop_profile_api.sh
    fi
else
    echo "‚ùå Script d'arr√™t manquant"
fi

# Tester le d√©marrage de l'API
echo -e "\n7. Test de d√©marrage de l'API..."

if [ -x "scripts/start_profile_api.sh" ]; then
    echo "Voulez-vous tester le d√©marrage de l'API? (y/n)"
    read test_api
    
    if [ "$test_api" = "y" ] || [ "$test_api" = "Y" ]; then
        # V√©rifier si l'API est d√©j√† en cours d'ex√©cution
        if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null ; then
            echo "‚ö†Ô∏è Le port $PORT est d√©j√† en utilisation. L'API est peut-√™tre d√©j√† en cours d'ex√©cution."
            echo "Voulez-vous arr√™ter le service existant? (y/n)"
            read stop_service
            
            if [ "$stop_service" = "y" ] || [ "$stop_service" = "Y" ]; then
                ./scripts/stop_profile_api.sh
                sleep 2
            else
                echo "‚ö†Ô∏è Test de l'API ignor√©."
                test_api="n"
            fi
        fi
        
        if [ "$test_api" = "y" ] || [ "$test_api" = "Y" ]; then
            # D√©marrer l'API
            ./scripts/start_profile_api.sh
            
            # Attendre le d√©marrage
            echo "Attente du d√©marrage de l'API..."
            sleep 3
            
            # Tester l'API
            echo "Test de l'API..."
            if curl -s http://localhost:$PORT/api/health > /dev/null; then
                health_response=$(curl -s http://localhost:$PORT/api/health)
                echo "‚úÖ API en cours d'ex√©cution"
                echo "R√©ponse de sant√©: $health_response"
                
                # Tester un profil utilisateur
                echo "Test de r√©cup√©ration d'un profil utilisateur..."
                curl -s -H "X-API-Key: $API_KEY" http://localhost:$PORT/api/profiles/user/1 | python3 -m json.tool
                
                # Arr√™ter l'API
                echo "Arr√™t de l'API..."
                ./scripts/stop_profile_api.sh
            else
                echo "‚ùå L'API n'a pas pu d√©marrer correctement"
                echo "V√©rifiez les logs dans logs/profile_api.log"
            fi
        fi
    else
        echo "Test de l'API ignor√©."
    fi
else
    echo "‚ùå Impossible de tester l'API: script de d√©marrage manquant ou non ex√©cutable."
fi

# R√©sum√©
echo -e "\n=============================================================="
echo "‚úÖ Tests Session 8 termin√©s"
echo "=============================================================="
echo ""
echo "Pour d√©marrer l'API de Session 8:"
echo "  ./scripts/start_profile_api.sh"
echo ""
echo "Pour l'arr√™ter:"
echo "  ./scripts/stop_profile_api.sh"
echo ""
echo "Pour l'utiliser pour la d√©monstration:"
echo "  ./demo_session8.sh"
echo "=============================================================="
