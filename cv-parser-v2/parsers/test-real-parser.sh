#!/bin/bash

# Couleurs pour l'affichage
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# V√©rifier si un argument a √©t√© fourni
if [ $# -eq 0 ]; then
    echo -e "${RED}Erreur: Aucun fichier CV sp√©cifi√©${NC}"
    echo -e "Usage: $0 <chemin_vers_cv.pdf>"
    exit 1
fi

CV_FILE="$1"

# V√©rifier que le fichier existe
if [ ! -f "$CV_FILE" ]; then
    echo -e "${RED}Erreur: Le fichier $CV_FILE n'existe pas${NC}"
    exit 1
fi

# V√©rifier que le service est accessible
echo -e "${YELLOW}üîç V√©rification de l'accessibilit√© du service...${NC}"
if ! curl -s "http://localhost:8000/health" > /dev/null; then
    echo -e "${RED}Erreur: Le service n'est pas accessible sur http://localhost:8000/health${NC}"
    echo -e "${YELLOW}Essayez d'abord de red√©marrer le service avec:${NC}"
    echo -e "./restart-cv-parser-real.sh"
    exit 1
fi

echo -e "${GREEN}‚úÖ Le service est accessible!${NC}"

# Effectuer une requ√™te avec force_refresh √† true pour √©viter le cache
echo -e "${YELLOW}üöÄ Envoi du fichier pour parsing (mode non-mock)...${NC}"
RESPONSE=$(curl -s -X POST \
    -F "file=@$CV_FILE" \
    -F "force_refresh=true" \
    http://localhost:8000/api/parse-cv/)

# V√©rifier que la r√©ponse n'est pas vide
if [ -z "$RESPONSE" ]; then
    echo -e "${RED}Erreur: Aucune r√©ponse re√ßue du service${NC}"
    exit 1
fi

# Sauvegarder la r√©ponse dans un fichier JSON
echo "$RESPONSE" > real_parser_result.json

# V√©rifier si nous sommes en mode mock ou r√©el
IS_MOCK=$(echo "$RESPONSE" | grep -o '"model":"mock"' || echo "not_found")

if [ "$IS_MOCK" != "not_found" ]; then
    echo -e "${RED}‚ö†Ô∏è Le service utilise toujours le mock parser!${NC}"
    echo -e "${YELLOW}V√©rifiez que le fichier .env a √©t√© correctement modifi√© avec USE_MOCK_PARSER=false${NC}"
    echo -e "${YELLOW}Et que le service a √©t√© red√©marr√© avec ./restart-cv-parser-real.sh${NC}"
else
    echo -e "${GREEN}‚úÖ Le service utilise le vrai parser (non-mock)!${NC}"
fi

# Afficher un r√©sum√© des r√©sultats
echo -e "${BLUE}üìä R√©sum√© du parsing:${NC}"
echo -e "${YELLOW}Le fichier complet a √©t√© sauvegard√© dans real_parser_result.json${NC}"

# Utiliser jq pour extraire les informations importantes si disponible
if command -v jq &> /dev/null; then
    echo -e "${BLUE}Informations personnelles:${NC}"
    echo "$RESPONSE" | jq -r '.data.informations_personnelles // .data.personal_info // empty'
    
    echo -e "${BLUE}Comp√©tences:${NC}"
    echo "$RESPONSE" | jq -r '.data.competences_techniques // .data.skills // empty'
    
    echo -e "${BLUE}Exp√©riences:${NC}"
    echo "$RESPONSE" | jq -r '.data.experiences_professionnelles // .data.work_experience // empty'
else
    echo -e "${YELLOW}Pour un affichage plus d√©taill√©, installez jq avec:${NC}"
    echo -e "brew install jq"
    echo -e "${YELLOW}Ou consultez le fichier real_parser_result.json directement.${NC}"
fi

echo -e "${GREEN}‚úÖ Test termin√©!${NC}"
