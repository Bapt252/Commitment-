#!/bin/bash

echo "üîß R√âPARATION SERVICES COMMITMENT-"
echo "=================================="

echo "üìä 1. Diagnostic d√©taill√© des services en panne..."

# V√©rifier logs des services en panne
echo "üîç Logs Job Parser:"
docker logs nexten-job-parser --tail 20

echo -e "\nüîç Logs Job Parser Worker 1:"
docker logs commitment--job-parser-worker-1 --tail 10

echo -e "\nüîç Logs Job Parser Worker 2:"
docker logs commitment--job-parser-worker-2 --tail 10

echo -e "\nüîß 2. Tentative red√©marrage services..."

# Arr√™ter les services probl√©matiques
echo "‚èπÔ∏è  Arr√™t services en panne..."
docker stop nexten-job-parser commitment--job-parser-worker-1 commitment--job-parser-worker-2 2>/dev/null

# Attendre un peu
sleep 3

# Red√©marrer les services
echo "üöÄ Red√©marrage Job Parser..."
docker start nexten-job-parser

sleep 5

echo "üöÄ Red√©marrage Workers..."
docker start commitment--job-parser-worker-1
docker start commitment--job-parser-worker-2

sleep 10

echo -e "\nüìä 3. V√©rification post-r√©paration..."

# Re-test des services
services_to_test=(
    "Job Parser:5055"
    "Matching Service:5052"
)

for service in "${services_to_test[@]}"; do
    name=$(echo $service | cut -d':' -f1)
    port=$(echo $service | cut -d':' -f2)
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:$port > /dev/null 2>&1; then
        status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$port)
        if [ $status -eq 200 ] || [ $status -eq 404 ] || [ $status -eq 422 ]; then
            echo "‚úÖ $name (port $port) : R√âPAR√â"
        else
            echo "‚ö†Ô∏è  $name (port $port) : CODE $status"
        fi
    else
        echo "‚ùå $name (port $port) : TOUJOURS INACCESSIBLE"
    fi
done

echo -e "\nüê≥ √âtat conteneurs apr√®s r√©paration:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(job-parser|matching)"

echo -e "\n‚úÖ R√©paration termin√©e !"
