#!/usr/bin/env python3
"""
ü©∫ R√©paration du CV Parser - R√©solution du probl√®me d'extraction BATU Sam.pdf
Script pour diagnostiquer et r√©soudre le probl√®me du service CV Parser
"""

import requests
import json
import subprocess
import time
import psutil
import signal
from pathlib import Path

class CVParserFixer:
    
    def __init__(self):
        self.cv_parser_url = "http://localhost:5051"
        self.test_file_path = "/Users/baptistecomas/Desktop/BATU Sam.pdf"
        
    def check_service_status(self) -> dict:
        """V√©rifie l'√©tat du service CV Parser"""
        print("üíä V√©rification du service CV Parser...")
        
        try:
            # Test de connexion
            response = requests.get(f"{self.cv_parser_url}/health", timeout=5)
            service_responsive = response.ok
            
            # Recherche du processus
            cv_parser_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    if '5051' in cmdline or 'cv-parser' in cmdline.lower() or 'parseur-cv' in cmdline.lower():
                        cv_parser_processes.append({
                            'pid': proc.info['pid'],
                            'name': proc.info['name'],
                            'cmdline': cmdline
                        })
                except:
                    continue
            
            return {
                'responsive': service_responsive,
                'processes': cv_parser_processes,
                'port_5051_used': self.check_port_usage(5051)
            }
            
        except Exception as e:
            return {
                'responsive': False,
                'error': str(e),
                'processes': [],
                'port_5051_used': self.check_port_usage(5051)
            }
    
    def check_port_usage(self, port: int) -> list:
        """V√©rifie quels processus utilisent un port"""
        try:
            result = subprocess.run(['lsof', '-i', f':{port}'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]  # Skip header
                processes = []
                for line in lines:
                    parts = line.split()
                    if len(parts) >= 2:
                        processes.append({
                            'command': parts[0],
                            'pid': parts[1],
                            'full_line': line
                        })
                return processes
            return []
        except:
            return []
    
    def test_file_extraction(self, file_path: str) -> dict:
        """Test l'extraction avec le CV Parser"""
        print(f"üß™ Test extraction: {Path(file_path).name}")
        
        if not Path(file_path).exists():
            return {'error': f'Fichier non trouv√©: {file_path}'}
        
        try:
            with open(file_path, 'rb') as f:
                response = requests.post(
                    f"{self.cv_parser_url}/api/parse-cv/",
                    files={'file': f},
                    data={'force_refresh': 'true'},
                    timeout=30
                )
            
            if response.ok:
                cv_data = response.json()
                return {
                    'success': True,
                    'text_length': len(cv_data.get('raw_text', '')),
                    'response': cv_data
                }
            else:
                return {
                    'success': False,
                    'status_code': response.status_code,
                    'error': response.text
                }
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def restart_cv_parser_service(self) -> dict:
        """Red√©marre le service CV Parser"""
        print("üîÑ Red√©marrage du service CV Parser...")
        
        status = self.check_service_status()
        
        # Arr√™ter les processus existants
        stopped_processes = []
        for proc_info in status['processes']:
            try:
                pid = int(proc_info['pid'])
                process = psutil.Process(pid)
                process.terminate()
                stopped_processes.append(pid)
                print(f"   üõë Processus arr√™t√©: PID {pid}")
            except:
                print(f"   ‚ùå Impossible d'arr√™ter: PID {proc_info['pid']}")
        
        # Attendre que les processus se terminent
        time.sleep(3)
        
        # Forcer l'arr√™t si n√©cessaire
        for pid in stopped_processes:
            try:
                process = psutil.Process(pid)
                if process.is_running():
                    process.kill()
                    print(f"   üíÄ Processus forc√©: PID {pid}")
            except:
                pass
        
        print("   ‚è≥ Attente 5 secondes...")
        time.sleep(5)
        
        # V√©rifier si le port est lib√©r√©
        port_usage = self.check_port_usage(5051)
        if port_usage:
            print(f"   ‚ö†Ô∏è  Port 5051 toujours utilis√© par: {port_usage}")
            return {
                'success': False,
                'message': 'Impossible de lib√©rer le port 5051'
            }
        else:
            print("   ‚úÖ Port 5051 lib√©r√©")
            return {
                'success': True,
                'message': 'Service arr√™t√©. Red√©marrer manuellement le CV Parser.',
                'instructions': [
                    "1. Aller dans le dossier du CV Parser",
                    "2. Ex√©cuter: python parseur-cv-v2.py (ou equivalent)",
                    "3. V√©rifier que le service d√©marre sur le port 5051"
                ]
            }
    
    def install_pdf_dependencies(self) -> dict:
        """Installe/met √† jour les d√©pendances PDF"""
        print("üì¶ Mise √† jour des d√©pendances PDF...")
        
        dependencies = [
            'pdfplumber',
            'PyPDF2',
            'python-pdf2',
            'pdfminer',
            'pdfminer.six'
        ]
        
        results = {}
        
        for dep in dependencies:
            try:
                print(f"   üì¶ Installation: {dep}")
                result = subprocess.run([
                    'pip', 'install', '--upgrade', dep
                ], capture_output=True, text=True, timeout=60)
                
                results[dep] = {
                    'success': result.returncode == 0,
                    'output': result.stdout if result.returncode == 0 else result.stderr
                }
                
                if result.returncode == 0:
                    print(f"   ‚úÖ {dep} install√©/mis √† jour")
                else:
                    print(f"   ‚ùå Erreur {dep}: {result.stderr[:100]}")
                    
            except Exception as e:
                results[dep] = {'success': False, 'error': str(e)}
                print(f"   ‚ùå Exception {dep}: {e}")
        
        return results
    
    def run_comprehensive_fix(self) -> dict:
        """Lance une r√©paration compl√®te"""
        print("üîß R√âPARATION COMPL√àTE DU CV PARSER")
        print("="*50)
        
        results = {}
        
        # 1. √âtat initial
        print("\n1Ô∏è‚É£ √âTAT INITIAL")
        initial_status = self.check_service_status()
        results['initial_status'] = initial_status
        
        print(f"   Service responsive: {initial_status['responsive']}")
        print(f"   Processus trouv√©s: {len(initial_status['processes'])}")
        
        # 2. Test extraction initial
        print("\n2Ô∏è‚É£ TEST EXTRACTION INITIAL")
        initial_test = self.test_file_extraction(self.test_file_path)
        results['initial_test'] = initial_test
        
        if initial_test.get('success'):
            print(f"   Texte extrait: {initial_test['text_length']} caract√®res")
            if initial_test['text_length'] > 100:
                print("   ‚úÖ Probl√®me r√©solu!")
                return results
        else:
            print(f"   ‚ùå √âchec: {initial_test.get('error', 'Erreur inconnue')}")
        
        # 3. Mise √† jour des d√©pendances
        print("\n3Ô∏è‚É£ MISE √Ä JOUR D√âPENDANCES PDF")
        deps_result = self.install_pdf_dependencies()
        results['dependencies'] = deps_result
        
        # 4. Red√©marrage du service
        print("\n4Ô∏è‚É£ RED√âMARRAGE DU SERVICE")
        restart_result = self.restart_cv_parser_service()
        results['restart'] = restart_result
        
        if restart_result['success']:
            print("   ‚úÖ Service arr√™t√©")
            print("   üîß ACTIONS MANUELLES REQUISES:")
            for instruction in restart_result['instructions']:
                print(f"      {instruction}")
        else:
            print(f"   ‚ùå √âchec red√©marrage: {restart_result['message']}")
        
        return results
    
    def wait_for_service_restart(self, timeout: int = 60) -> bool:
        """Attend que le service red√©marre"""
        print(f"‚è≥ Attente red√©marrage service (max {timeout}s)...")
        
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                response = requests.get(f"{self.cv_parser_url}/health", timeout=2)
                if response.ok:
                    print("   ‚úÖ Service red√©marr√©!")
                    return True
            except:
                pass
            
            time.sleep(2)
            print("   ‚è≥ En attente...")
        
        print("   ‚ùå Timeout - Service non red√©marr√©")
        return False
    
    def final_test(self) -> dict:
        """Test final apr√®s r√©paration"""
        print("\n5Ô∏è‚É£ TEST FINAL")
        
        # Attendre que le service red√©marre
        if not self.wait_for_service_restart():
            return {
                'success': False,
                'message': 'Service non red√©marr√©'
            }
        
        # Test d'extraction final
        final_test = self.test_file_extraction(self.test_file_path)
        
        if final_test.get('success') and final_test.get('text_length', 0) > 100:
            print(f"   ‚úÖ SUCC√àS: {final_test['text_length']} caract√®res extraits")
            return {
                'success': True,
                'text_length': final_test['text_length'],
                'message': 'Probl√®me r√©solu!'
            }
        else:
            print(f"   ‚ùå √âCHEC: {final_test.get('text_length', 0)} caract√®res")
            return {
                'success': False,
                'message': 'Probl√®me persistant apr√®s r√©paration',
                'details': final_test
            }

def main():
    # V√©rifier si psutil est install√©
    try:
        import psutil
    except ImportError:
        print("‚ùå Module psutil requis non install√©")
        print("üîß Installation en cours...")
        subprocess.run(['pip', 'install', 'psutil'], check=True)
        import psutil
    
    fixer = CVParserFixer()
    
    print("ü©∫ CV PARSER FIXER - SuperSmartMatch V2.1")
    print("="*50)
    
    # R√©paration compl√®te
    results = fixer.run_comprehensive_fix()
    
    # Affichage du r√©sum√©
    print("\nüìã R√âSUM√â DE LA R√âPARATION")
    print("="*30)
    
    initial_responsive = results.get('initial_status', {}).get('responsive', False)
    print(f"Service initial: {'‚úÖ Op√©rationnel' if initial_responsive else '‚ùå Probl√®me'}")
    
    initial_extraction = results.get('initial_test', {}).get('text_length', 0)
    print(f"Extraction initiale: {initial_extraction} caract√®res")
    
    deps_success = sum(1 for dep, res in results.get('dependencies', {}).items() 
                      if res.get('success', False))
    total_deps = len(results.get('dependencies', {}))
    print(f"D√©pendances: {deps_success}/{total_deps} mises √† jour")
    
    restart_success = results.get('restart', {}).get('success', False)
    print(f"Red√©marrage: {'‚úÖ OK' if restart_success else '‚ùå √âchec'}")
    
    if restart_success:
        print("\nüîß PROCHAINES √âTAPES:")
        print("1. Red√©marrer manuellement le service CV Parser")
        print("2. Ex√©cuter: python batu_sam_diagnostic.py")
        print("3. V√©rifier que l'extraction fonctionne")

if __name__ == "__main__":
    main()
