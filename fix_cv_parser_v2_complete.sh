#!/bin/bash
# üöÄ Script de mise √† jour CV Parser V2 - SuperSmartMatch V2.1
# Corrige les probl√®mes de chemins et fichiers manquants

echo "üöÄ MISE √Ä JOUR CV PARSER V2 - SuperSmartMatch V2.1"
echo "=================================================="

# Aller dans le dossier cv-parser-v2
cd cv-parser-v2 || {
    echo "‚ùå Dossier cv-parser-v2 non trouv√©"
    echo "üí° Ex√©cutez ce script depuis le dossier racine du projet"
    exit 1
}

echo "üìÅ Dossier actuel: $(pwd)"

# Sauvegarder l'ancien app.py
if [ -f "app.py" ]; then
    cp app.py app.py.backup
    echo "üíæ Sauvegarde: app.py.backup cr√©√©e"
fi

# T√©l√©charger le nouveau app.py corrig√©
echo "üì• T√©l√©chargement app.py corrig√©..."
curl -s -o app.py https://raw.githubusercontent.com/Bapt252/Commitment-/main/cv-parser-v2/app.py

if [ $? -eq 0 ]; then
    echo "‚úÖ app.py mis √† jour"
else
    echo "‚ùå Erreur t√©l√©chargement app.py"
    if [ -f "app.py.backup" ]; then
        mv app.py.backup app.py
        echo "‚Ü©Ô∏è Restauration de la sauvegarde"
    fi
    exit 1
fi

# Cr√©er le dossier parsers s'il n'existe pas
mkdir -p parsers

# T√©l√©charger enhanced-mission-parser.js
echo "üì• T√©l√©chargement enhanced-mission-parser.js..."
curl -s -o parsers/enhanced-mission-parser.js https://raw.githubusercontent.com/Bapt252/Commitment-/main/cv-parser-v2/parsers/enhanced-mission-parser.js

if [ $? -eq 0 ]; then
    echo "‚úÖ enhanced-mission-parser.js cr√©√©"
else
    echo "‚ùå Erreur t√©l√©chargement enhanced-mission-parser.js"
fi

# V√©rifier si fix-pdf-extraction.js existe d√©j√†
if [ ! -f "parsers/fix-pdf-extraction.js" ]; then
    echo "üì• T√©l√©chargement fix-pdf-extraction.js..."
    curl -s -o parsers/fix-pdf-extraction.js https://raw.githubusercontent.com/Bapt252/Commitment-/main/cv-parser-v2/parsers/fix-pdf-extraction.js
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ fix-pdf-extraction.js cr√©√©"
    else
        echo "‚ùå Erreur t√©l√©chargement fix-pdf-extraction.js"
    fi
else
    echo "‚úÖ fix-pdf-extraction.js existe d√©j√†"
fi

# Rendre les fichiers ex√©cutables
chmod +x parsers/*.js

# V√©rifier les d√©pendances Node.js
echo "üì¶ V√©rification des d√©pendances Node.js..."
if [ ! -f "package.json" ]; then
    echo "üîß Initialisation npm..."
    npm init -y > /dev/null 2>&1
fi

echo "üì¶ Installation pdf-parse..."
npm install pdf-parse > /dev/null 2>&1

if [ $? -eq 0 ]; then
    echo "‚úÖ D√©pendances Node.js install√©es"
else
    echo "‚ö†Ô∏è Probl√®me avec les d√©pendances Node.js"
fi

# V√©rification finale
echo ""
echo "üîç V√âRIFICATION FINALE"
echo "======================"

if [ -f "app.py" ]; then
    echo "‚úÖ app.py: OK"
else
    echo "‚ùå app.py: MANQUANT"
fi

if [ -f "parsers/fix-pdf-extraction.js" ]; then
    echo "‚úÖ fix-pdf-extraction.js: OK"
else
    echo "‚ùå fix-pdf-extraction.js: MANQUANT"
fi

if [ -f "parsers/enhanced-mission-parser.js" ]; then
    echo "‚úÖ enhanced-mission-parser.js: OK"
else
    echo "‚ùå enhanced-mission-parser.js: MANQUANT"
fi

if [ -d "node_modules" ]; then
    echo "‚úÖ Node.js dependencies: OK"
else
    echo "‚ö†Ô∏è Node.js dependencies: PROBL√àME"
fi

echo ""
echo "üéØ PROCHAINES √âTAPES"
echo "==================="
echo "1. Red√©marrer le service CV Parser:"
echo "   python app.py"
echo ""
echo "2. Dans un autre terminal, tester:"
echo "   curl http://localhost:5051/health"
echo ""
echo "3. Tester parsing CV:"
echo "   curl -X POST -F \"file=@~/Desktop/CV\\ TEST/Bcom\\ HR\\ -\\ Candidature\\ de\\ Sam.pdf\" \\"
echo "        -F \"force_refresh=true\" http://localhost:5051/api/parse-cv/"
echo ""
echo "4. Relancer les tests massifs:"
echo "   cd ../  # Retour au dossier racine"
echo "   python enhanced_batch_testing_v2_fixed.py --test-problematic"

echo ""
echo "‚úÖ MISE √Ä JOUR TERMIN√âE!"
echo "üìã Logs de sauvegarde disponibles: app.py.backup"
