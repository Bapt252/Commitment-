user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" version="$target_version"';

    access_log /var/log/nginx/access.log main;

    upstream supersmartmatch_v1 {
        server supersmartmatch-v1:5062;
    }

    upstream supersmartmatch_v2 {
        server supersmartmatch-v2:5070;
    }

    upstream nexten_matcher {
        server nexten-matcher:5052;
    }

    # Variable pour traffic splitting
    map $arg_version $target_version {
        default "v1";
        "v1" "v1";
        "v2" "v2";
    }

    server {
        listen 80;
        server_name localhost;

        location /health {
            return 200 "SuperSmartMatch Load Balancer OK\n";
            add_header Content-Type text/plain;
        }

        location /health/v1 {
            proxy_pass http://supersmartmatch_v1/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /health/v2 {
            proxy_pass http://supersmartmatch_v2/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /health/nexten {
            proxy_pass http://nexten_matcher/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # API matching avec routing intelligent
        location /api/match {
            # Utiliser une approche plus simple sans 'if'
            try_files $uri @route_version;
        }
        
        location @route_version {
            # Router selon le param√®tre version
            set $backend "supersmartmatch_v1";
            
            # Si version=v2, utiliser V2
            if ($target_version = "v2") {
                set $backend "supersmartmatch_v2";
            }
            
            proxy_pass http://$backend/api/match;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Version $target_version;
            
            # Headers pour debugging
            add_header X-Served-By $target_version;
            add_header X-Backend $backend;
        }

        # API V1 explicite
        location /api/v1/ {
            proxy_pass http://supersmartmatch_v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # API V2 explicite
        location /api/v2/ {
            proxy_pass http://supersmartmatch_v2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Nexten direct
        location /api/nexten/ {
            proxy_pass http://nexten_matcher/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Monitoring endpoints
        location /prometheus/ {
            proxy_pass http://prometheus:9090/;
            proxy_set_header Host $host;
        }

        location /grafana/ {
            proxy_pass http://grafana:3000/;
            proxy_set_header Host $host;
        }

        # Status page
        location /status {
            return 200 "SuperSmartMatch V2 Migration Infrastructure\nLoad Balancer: OK\nServices: V1, V2, Nexten\n";
            add_header Content-Type text/plain;
        }
    }
}
