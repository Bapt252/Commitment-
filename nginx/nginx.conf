user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

    # Upstream services configuration
    upstream api_gateway {
        least_conn;
        server api-gateway:5050 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream cv_parser_service {
        least_conn;
        server cv-parser-service:5051 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream matching_service {
        least_conn;
        server matching-service:5052 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream job_parser_service {
        least_conn;
        server job-parser-service:5053 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream user_service {
        least_conn;
        server user-service:5054 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream notification_service {
        least_conn;
        server notification-service:5055 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream analytics_service {
        least_conn;
        server analytics-service:5056 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name _;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main server configuration
    server {
        listen 80;
        server_name supersmartmatch.local localhost;
        
        # Redirect HTTP to HTTPS in production
        # return 301 https://$server_name$request_uri;
        
        # For development/testing, serve HTTP directly
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>SuperSmartMatch V2 - API Gateway</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .service { background: #f5f5f5; padding: 20px; margin: 10px 0; border-radius: 5px; }
        .status-ok { color: #28a745; }
        .endpoint { font-family: monospace; background: #e9ecef; padding: 5px; border-radius: 3px; }
    </style>
</head>
<body>
    <h1>ðŸš€ SuperSmartMatch V2 - Microservices Architecture</h1>
    <p>Welcome to the SuperSmartMatch V2 API Gateway. All services are operational.</p>
    
    <div class="service">
        <h3>ðŸ“Š Available Services</h3>
        <ul>
            <li><strong>API Gateway:</strong> <span class="endpoint">http://localhost/api/*</span> (JWT Authentication)</li>
            <li><strong>CV Parser:</strong> <span class="endpoint">http://localhost/api/cv/*</span> (OCR + NLP)</li>
            <li><strong>Job Parser:</strong> <span class="endpoint">http://localhost/api/jobs/*</span> (NLP Processing)</li>
            <li><strong>Matching Engine:</strong> <span class="endpoint">http://localhost/api/matching/*</span> (ML Optimization)</li>
            <li><strong>User Management:</strong> <span class="endpoint">http://localhost/api/users/*</span></li>
            <li><strong>Notifications:</strong> <span class="endpoint">http://localhost/api/notifications/*</span> (Real-time)</li>
            <li><strong>Analytics:</strong> <span class="endpoint">http://localhost/api/analytics/*</span></li>
        </ul>
    </div>
    
    <div class="service">
        <h3>ðŸ“– Quick Start</h3>
        <ol>
            <li>Register: <span class="endpoint">POST /api/auth/register</span></li>
            <li>Login: <span class="endpoint">POST /api/auth/login</span></li>
            <li>Upload CV: <span class="endpoint">POST /api/cv/upload</span></li>
            <li>Parse Job: <span class="endpoint">POST /api/jobs/parse</span></li>
            <li>Get Matches: <span class="endpoint">GET /api/matching/candidates</span></li>
        </ol>
    </div>
    
    <div class="service">
        <h3>ðŸ”§ Monitoring</h3>
        <ul>
            <li><strong>Grafana:</strong> <a href="http://localhost:3000">http://localhost:3000</a></li>
            <li><strong>Prometheus:</strong> <a href="http://localhost:9090">http://localhost:9090</a></li>
            <li><strong>MinIO Console:</strong> <a href="http://localhost:9001">http://localhost:9001</a></li>
        </ul>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # API Gateway routes
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Authentication routes with stricter rate limiting
        location /api/auth/ {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # File upload routes with larger body size
        location ~ ^/api/(cv|jobs)/upload {
            client_max_body_size 50M;
            client_body_timeout 60s;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # WebSocket support for notifications
        location /api/notifications/ws {
            proxy_pass http://notification_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health checks for individual services
        location /health/api-gateway {
            proxy_pass http://api_gateway/health;
            access_log off;
        }

        location /health/cv-parser {
            proxy_pass http://cv_parser_service/health;
            access_log off;
        }

        location /health/matching {
            proxy_pass http://matching_service/health;
            access_log off;
        }

        # Monitoring endpoints
        location /metrics {
            proxy_pass http://api_gateway/metrics;
            allow 172.20.0.0/16;  # Only allow from docker network
            deny all;
        }
    }

    # HTTPS server configuration (for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name supersmartmatch.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/supersmartmatch.crt;
    #     ssl_certificate_key /etc/nginx/ssl/supersmartmatch.key;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # ... same location blocks as HTTP server
    # }
}
