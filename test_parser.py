#!/usr/bin/env python3

"""
Script de test pour le service de parsing CV

Ce script teste diff√©rents endpoints du service CV Parser pour diagnostiquer
les probl√®mes de parsing via GPT.
"""

import os
import sys
import json
import time
import requests
from urllib.parse import urljoin

# Configuration
BASE_URL = "http://localhost:8000"
CV_PATH = "/Users/baptistecomas/Desktop/MonSuperCV.pdf"  # Chemin par d√©faut
VERBOSE = True

# Couleurs pour l'affichage
GREEN = "\033[0;32m"
BLUE = "\033[0;34m"
YELLOW = "\033[1;33m"
RED = "\033[0;31m"
NC = "\033[0m"  # No Color


def print_colored(color, message):
    """Affiche un message avec une couleur sp√©cifique"""
    print(f"{color}{message}{NC}")


def check_arguments():
    """V√©rifie et traite les arguments de ligne de commande"""
    global CV_PATH, BASE_URL, VERBOSE

    # Traiter les arguments
    if len(sys.argv) > 1:
        CV_PATH = sys.argv[1]

    # V√©rifier si le fichier CV existe
    if not os.path.isfile(CV_PATH):
        print_colored(RED, f"‚ùå Erreur: Le fichier CV n'existe pas: {CV_PATH}")
        print_colored(YELLOW, "üëâ Sp√©cifiez un chemin valide comme argument: ./test_parser.py /chemin/vers/cv.pdf")
        sys.exit(1)

    # Afficher la configuration
    print_colored(BLUE, "üîç Configuration:")
    print(f"- URL de base: {BASE_URL}")
    print(f"- Fichier CV: {CV_PATH}")
    print(f"- Mode verbose: {VERBOSE}")
    print("\n" + "-"*50 + "\n")


def test_health_endpoint():
    """Teste l'endpoint de sant√© du service"""
    print_colored(BLUE, "üè• Test de l'endpoint health...")
    
    try:
        response = requests.get(urljoin(BASE_URL, "/health"))
        
        if response.status_code == 200:
            print_colored(GREEN, f"‚úÖ Service en ligne! R√©ponse: {response.json()}")
            return True
        else:
            print_colored(RED, f"‚ùå Service accessible mais retourne une erreur: {response.status_code}")
            print(f"Contenu: {response.text}")
            return False
    
    except requests.exceptions.ConnectionError:
        print_colored(RED, f"‚ùå Impossible de se connecter au service √† {BASE_URL}")
        print_colored(YELLOW, "üëâ V√©rifiez que le service est d√©marr√© et que le port est correct")
        return False
    except Exception as e:
        print_colored(RED, f"‚ùå Erreur lors du test de sant√©: {str(e)}")
        return False


def test_direct_parsing_endpoint():
    """Teste l'endpoint de parsing direct"""
    print_colored(BLUE, "\nüìÑ Test de l'endpoint de parsing direct...")
    
    try:
        with open(CV_PATH, "rb") as cv_file:
            files = {"file": (os.path.basename(CV_PATH), cv_file, "application/pdf")}
            data = {"force_refresh": "true"}  # Force le rafra√Æchissement pour √©viter le cache
            
            print_colored(YELLOW, "Envoi de la requ√™te...")
            start_time = time.time()
            
            # Test sans slash final
            url = urljoin(BASE_URL, "/api/parse-cv")
            print(f"URL: {url}")
            
            response = requests.post(
                url,
                files=files,
                data=data,
                allow_redirects=True  # Suivre les redirections
            )
            
            duration = time.time() - start_time
            
            print(f"Statut: {response.status_code} (en {duration:.2f}s)")
            print(f"Headers: {dict(response.headers)}")
            
            if response.status_code == 200:
                print_colored(GREEN, "\n‚úÖ Parsing r√©ussi!")
                try:
                    result = response.json()
                    print_colored(BLUE, "\nR√©sultat du parsing:")
                    print(json.dumps(result, indent=2, ensure_ascii=False))
                    return True
                except json.JSONDecodeError:
                    print_colored(YELLOW, "‚ö†Ô∏è La r√©ponse n'est pas au format JSON")
                    print("Contenu brut:")
                    print(response.text[:500] + "..." if len(response.text) > 500 else response.text)
            else:
                print_colored(RED, f"‚ùå Erreur lors du parsing: {response.status_code}")
                print("Contenu de la r√©ponse:")
                print(response.text)
                return False
    
    except Exception as e:
        print_colored(RED, f"‚ùå Erreur lors du test de parsing direct: {str(e)}")
        return False


def test_queue_endpoint():
    """Teste l'endpoint de file d'attente pour le parsing asynchrone"""
    print_colored(BLUE, "\nüîÑ Test de l'endpoint de file d'attente...")
    
    try:
        with open(CV_PATH, "rb") as cv_file:
            files = {"file": (os.path.basename(CV_PATH), cv_file, "application/pdf")}
            data = {"priority": "premium"}  # Priorit√© maximale pour un traitement rapide
            
            print_colored(YELLOW, "Envoi du CV √† la file d'attente...")
            
            # Endpoint de file d'attente
            url = urljoin(BASE_URL, "/api/queue")
            print(f"URL: {url}")
            
            response = requests.post(
                url,
                files=files,
                data=data
            )
            
            if response.status_code in [200, 202]:
                print_colored(GREEN, "\n‚úÖ CV ajout√© √† la file d'attente!")
                try:
                    result = response.json()
                    print(f"D√©tails: {json.dumps(result, indent=2)}")
                    
                    # Si on a un job_id, on attend et r√©cup√®re le r√©sultat
                    if "job_id" in result:
                        job_id = result["job_id"]
                        print_colored(YELLOW, f"\nAttente du traitement du job {job_id}...")
                        
                        # Boucle pour r√©cup√©rer le r√©sultat (avec timeout)
                        max_attempts = 10
                        for attempt in range(max_attempts):
                            print(f"Tentative {attempt+1}/{max_attempts}...")
                            time.sleep(3)  # Attendre 3 secondes entre chaque tentative
                            
                            result_url = urljoin(BASE_URL, f"/api/result/{job_id}")
                            result_response = requests.get(result_url)
                            
                            if result_response.status_code == 200:
                                result_data = result_response.json()
                                status = result_data.get("status")
                                
                                if status == "done":
                                    print_colored(GREEN, "\n‚úÖ Traitement termin√© avec succ√®s!")
                                    print_colored(BLUE, "\nR√©sultat du parsing:")
                                    print(json.dumps(result_data.get("result", {}), indent=2, ensure_ascii=False))
                                    return True
                                elif status == "failed":
                                    print_colored(RED, f"\n‚ùå Le traitement a √©chou√©: {result_data.get('error', 'Erreur inconnue')}")
                                    return False
                                else:
                                    print(f"Statut actuel: {status}")
                        
                        print_colored(YELLOW, "‚ö†Ô∏è Timeout: le traitement prend trop de temps")
                    return True
                except json.JSONDecodeError:
                    print_colored(YELLOW, "‚ö†Ô∏è La r√©ponse n'est pas au format JSON")
                    print(response.text)
            else:
                print_colored(RED, f"‚ùå Erreur lors de l'ajout √† la file d'attente: {response.status_code}")
                print(response.text)
                return False
    
    except Exception as e:
        print_colored(RED, f"‚ùå Erreur lors du test de file d'attente: {str(e)}")
        return False


def main():
    """Fonction principale"""
    print_colored(BLUE, "=== Test du service de parsing CV via GPT ===")
    
    # V√©rifier les arguments
    check_arguments()
    
    # Test 1: V√©rifier que le service est en ligne
    if not test_health_endpoint():
        print_colored(RED, "\n‚ùå Le service ne r√©pond pas correctement. Arr√™t des tests.")
        return
    
    # Test 2: Parser un CV directement
    direct_result = test_direct_parsing_endpoint()
    
    # Test 3: Utiliser la file d'attente si le parsing direct ne fonctionne pas
    if not direct_result:
        print_colored(YELLOW, "\n‚ö†Ô∏è Le parsing direct n'a pas fonctionn√©, test de la file d'attente...")
        queue_result = test_queue_endpoint()
        
        if not queue_result:
            print_colored(RED, "\n‚ùå Tous les tests ont √©chou√©.")
            print_colored(YELLOW, "Suggestions de d√©pannage:")
            print("1. V√©rifiez que la cl√© API OpenAI est correctement configur√©e")
            print("2. V√©rifiez les logs du service avec 'docker-compose logs cv-parser'")
            print("3. Red√©marrez le service avec './restart-cv-parser.sh'")
            print("4. Essayez d'utiliser le mode mock si vous n'avez pas de cl√© OpenAI valide")
    
    print_colored(BLUE, "\n=== Fin des tests ===\n")


if __name__ == "__main__":
    main()
