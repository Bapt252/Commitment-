version: '3.8'

networks:
  ssm_network:
    driver: bridge

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ssm_redis
    ports:
      - "6379:6379"
    networks:
      - ssm_network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # SuperSmartMatch V1 (Legacy)
  ssm_v1:
    image: supersmartmatch:v1
    container_name: ssm_v1
    ports:
      - "5062:5000"
    networks:
      - ssm_network
    environment:
      - ENV=development
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.v1
      args:
        - VERSION=v1

  # SuperSmartMatch V2 (AI Enhanced)
  ssm_v2:
    image: supersmartmatch:v2
    container_name: ssm_v2
    ports:
      - "5070:5000"
    networks:
      - ssm_network
    environment:
      - ENV=development
      - REDIS_URL=redis://redis:6379
      - V1_SERVICE_URL=http://ssm_v1:5000
      - NEXTEN_SERVICE_URL=http://nexten_matcher:5000
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - ssm_v1
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.v2
      args:
        - VERSION=v2

  # Nexten Advanced Matcher (PROMPT 2 Ultra-Optimized)
  nexten_matcher:
    image: nexten-matcher:latest
    container_name: nexten_matcher
    ports:
      - "5052:5000"
    networks:
      - ssm_network
    environment:
      - ENV=development
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - PROMPT_2_MODE=true
    depends_on:
      - redis
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile.nexten

  # Prometheus (port alternatif)
  prometheus:
    image: prom/prometheus:latest
    container_name: ssm_prometheus
    ports:
      - "9091:9090"  # Port alternatif pour éviter conflits
    networks:
      - ssm_network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana (port alternatif)
  grafana:
    image: grafana/grafana:latest
    container_name: ssm_grafana
    ports:
      - "3001:3000"  # Port alternatif pour éviter conflits
    networks:
      - ssm_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Load Balancer Nginx
  nginx:
    image: nginx:alpine
    container_name: ssm_nginx
    ports:
      - "8080:80"  # Port alternatif pour éviter conflits
    networks:
      - ssm_network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - ssm_v1
      - ssm_v2
      - nexten_matcher
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
