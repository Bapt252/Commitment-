#!/bin/bash

# üîß Script de diagnostic et r√©solution SuperSmartMatch V2
# R√©sout les probl√®mes de connectivit√© r√©seau et services en restart

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
COMPOSE_FILE="docker-compose-integrated.yml"
API_GATEWAY_PORT=5055

echo -e "${BLUE}üöÄ SuperSmartMatch V2 - Diagnostic et R√©solution des Probl√®mes${NC}"
echo -e "${BLUE}================================================================${NC}"

# Fonction utilitaire
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

# 1. V√©rification de l'environnement Docker
echo -e "\n${PURPLE}üîç 1. DIAGNOSTIC DE L'ENVIRONNEMENT${NC}"
echo "=================================================="

# V√©rifier Docker
if command -v docker &> /dev/null; then
    print_status 0 "Docker est install√©"
    DOCKER_VERSION=$(docker --version)
    echo "   Version: $DOCKER_VERSION"
else
    print_status 1 "Docker n'est pas install√©"
    exit 1
fi

# V√©rifier Docker Compose
if command -v docker-compose &> /dev/null; then
    print_status 0 "Docker Compose est disponible"
    COMPOSE_VERSION=$(docker-compose --version)
    echo "   Version: $COMPOSE_VERSION"
else
    print_status 1 "Docker Compose n'est pas install√©"
    exit 1
fi

# V√©rifier le daemon Docker
if docker info &> /dev/null; then
    print_status 0 "Docker daemon est actif"
else
    print_status 1 "Docker daemon n'est pas actif"
    print_info "Tentative de d√©marrage du daemon Docker..."
    sudo systemctl start docker || true
fi

# 2. Diagnostic des containers existants
echo -e "\n${PURPLE}üîç 2. DIAGNOSTIC DES CONTAINERS EXISTANTS${NC}"
echo "=================================================="

print_info "Containers actuellement en cours d'ex√©cution:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

print_info "Tous les containers (y compris arr√™t√©s):"
docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"

# V√©rifier les containers en restart
RESTARTING_CONTAINERS=$(docker ps --filter "status=restarting" --format "{{.Names}}")
if [ -n "$RESTARTING_CONTAINERS" ]; then
    print_warning "Containers en restart d√©tect√©s:"
    echo "$RESTARTING_CONTAINERS"
    
    print_info "Logs des containers en restart:"
    for container in $RESTARTING_CONTAINERS; do
        echo -e "\n${YELLOW}üìã Logs de $container:${NC}"
        docker logs --tail 20 "$container" || true
    done
fi

# 3. Diagnostic r√©seau
echo -e "\n${PURPLE}üîç 3. DIAGNOSTIC R√âSEAU DOCKER${NC}"
echo "=================================================="

print_info "R√©seaux Docker existants:"
docker network ls

# V√©rifier si le r√©seau supersmartmatch existe
if docker network ls | grep -q "supersmartmatch"; then
    print_status 0 "R√©seau supersmartmatch existe"
    
    print_info "D√©tails du r√©seau supersmartmatch:"
    docker network inspect supersmartmatch | jq '.[0].Containers' 2>/dev/null || \
    docker network inspect supersmartmatch | grep -A 20 "Containers"
else
    print_status 1 "R√©seau supersmartmatch n'existe pas"
fi

# 4. Test de connectivit√© r√©seau
echo -e "\n${PURPLE}üîç 4. TEST DE CONNECTIVIT√â R√âSEAU${NC}"
echo "=================================================="

# Services √† tester
SERVICES=(
    "nexten-api:5000"
    "nexten-data-adapter:5052"
    "cv-parser:5051"
    "job-parser:5053"
    "matching-service:5060"
    "redis:6379"
    "postgres:5432"
)

# Tester depuis l'API Gateway s'il existe
if docker ps | grep -q "api-gateway-simple"; then
    print_info "Test de r√©solution DNS depuis api-gateway-simple:"
    
    for service in "${SERVICES[@]}"; do
        service_name=${service%:*}
        service_port=${service#*:}
        
        echo -n "   $service_name: "
        if docker exec api-gateway-simple nslookup "$service_name" &>/dev/null; then
            echo -e "${GREEN}‚úÖ DNS OK${NC}"
            
            # Test de connectivit√© TCP
            if docker exec api-gateway-simple nc -z "$service_name" "$service_port" &>/dev/null; then
                echo -e "      ${GREEN}‚úÖ TCP connectivit√© OK${NC}"
            else
                echo -e "      ${RED}‚ùå TCP connectivit√© √©chou√©e${NC}"
            fi
        else
            echo -e "${RED}‚ùå DNS √©chou√©${NC}"
        fi
    done
else
    print_warning "Container api-gateway-simple non trouv√©, test de connectivit√© ignor√©"
fi

# 5. V√©rification des ports
echo -e "\n${PURPLE}üîç 5. V√âRIFICATION DES PORTS${NC}"
echo "=================================================="

PORTS=(3000 5000 5051 5052 5053 5055 5060 6379 5432)

for port in "${PORTS[@]}"; do
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        print_status 0 "Port $port est utilis√©"
    else
        print_status 1 "Port $port est libre"
    fi
done

# 6. Solutions automatiques
echo -e "\n${PURPLE}üîß 6. R√âSOLUTION AUTOMATIQUE DES PROBL√àMES${NC}"
echo "=================================================="

# Arr√™ter tous les containers existants
print_info "Arr√™t de tous les containers existants..."
docker-compose -f docker-compose.yml down 2>/dev/null || true
docker-compose -f docker-compose-integrated.yml down 2>/dev/null || true

# Nettoyer les containers orphelins
print_info "Nettoyage des containers orphelins..."
docker container prune -f

# Nettoyer les r√©seaux orphelins
print_info "Nettoyage des r√©seaux orphelins..."
docker network prune -f

# Nettoyer les volumes orphelins (optionnel)
read -p "Voulez-vous nettoyer les volumes orphelins ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "Nettoyage des volumes orphelins..."
    docker volume prune -f
fi

# Construire les images si n√©cessaire
print_info "Reconstruction des images si n√©cessaire..."
if [ -f "$COMPOSE_FILE" ]; then
    docker-compose -f "$COMPOSE_FILE" build --parallel
else
    print_warning "Fichier $COMPOSE_FILE non trouv√©, reconstruction ignor√©e"
fi

# 7. D√©marrage de la nouvelle configuration
echo -e "\n${PURPLE}üöÄ 7. D√âMARRAGE DE LA CONFIGURATION INT√âGR√âE${NC}"
echo "=================================================="

if [ -f "$COMPOSE_FILE" ]; then
    print_info "D√©marrage des services int√©gr√©s..."
    
    # D√©marrage progressif pour √©viter les probl√®mes de d√©pendances
    print_info "1. D√©marrage infrastructure (Redis + PostgreSQL)..."
    docker-compose -f "$COMPOSE_FILE" up -d redis postgres
    
    sleep 10
    
    print_info "2. D√©marrage API Gateway..."
    docker-compose -f "$COMPOSE_FILE" up -d api-gateway-simple
    
    sleep 10
    
    print_info "3. D√©marrage frontend..."
    docker-compose -f "$COMPOSE_FILE" up -d nexten-frontend
    
    sleep 10
    
    print_info "4. Services optionnels disponibles avec profiles:"
    echo "   - docker-compose -f $COMPOSE_FILE --profile nexten up -d"
    echo "   - docker-compose -f $COMPOSE_FILE --profile parsing up -d"
    echo "   - docker-compose -f $COMPOSE_FILE --profile matching up -d"
    echo "   - docker-compose -f $COMPOSE_FILE --profile monitoring up -d"
    
else
    print_warning "Fichier $COMPOSE_FILE non trouv√©. Veuillez le cr√©er avant de continuer."
    exit 1
fi

# 8. V√©rification finale
echo -e "\n${PURPLE}üîç 8. V√âRIFICATION FINALE${NC}"
echo "=================================================="

sleep 20  # Attendre que tous les services d√©marrent

print_info "Statut final des containers:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# Test des endpoints
print_info "Test des endpoints principaux:"

ENDPOINTS=(
    "http://localhost:$API_GATEWAY_PORT/api/gateway/status:API Gateway Status"
    "http://localhost:$API_GATEWAY_PORT/api/gateway/health:API Gateway Health"
    "http://localhost:3000:Frontend NexTen"
)

for endpoint_info in "${ENDPOINTS[@]}"; do
    endpoint=${endpoint_info%:*}
    name=${endpoint_info#*:}
    
    echo -n "   $name: "
    if curl -s --connect-timeout 5 "$endpoint" > /dev/null; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå √âchec${NC}"
    fi
done

# 9. R√©sum√© et prochaines √©tapes
echo -e "\n${PURPLE}üìã 9. R√âSUM√â ET PROCHAINES √âTAPES${NC}"
echo "=================================================="

print_info "Configuration termin√©e ! Services disponibles:"
echo -e "${GREEN}üåü API Gateway SuperSmartMatch V2: http://localhost:$API_GATEWAY_PORT/api/gateway/${NC}"
echo -e "${GREEN}üåê Frontend NexTen: http://localhost:3000${NC}"
echo -e "${GREEN}üìö Documentation Swagger: http://localhost:$API_GATEWAY_PORT/api/gateway/docs${NC}"

echo -e "\n${BLUE}üìã Commandes utiles:${NC}"
echo "# Voir les logs de l'API Gateway:"
echo "docker-compose -f $COMPOSE_FILE logs -f api-gateway-simple"
echo ""
echo "# D√©marrer les services de parsing:"
echo "docker-compose -f $COMPOSE_FILE --profile parsing up -d"
echo ""
echo "# D√©marrer les services Nexten:"
echo "docker-compose -f $COMPOSE_FILE --profile nexten up -d"
echo ""
echo "# D√©marrer le matching service:"
echo "docker-compose -f $COMPOSE_FILE --profile matching up -d"
echo ""
echo "# Monitoring en temps r√©el:"
echo "watch 'docker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"'"

print_info "‚úÖ Diagnostic et r√©solution termin√©s avec succ√®s !"
