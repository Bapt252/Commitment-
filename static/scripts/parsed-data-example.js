/**
 * Exemple de donn√©es pars√©es pour tester le pr√©-remplissage du formulaire
 * √Ä stocker dans sessionStorage pour simuler des donn√©es venant du backend
 */

// Format correspondant au format de donn√©es du backend (format brut avant transformation)
const mockParsedData = {
  "processing_time": 1.23,
  "parsed_at": 1714505237.987,
  "file_format": ".pdf",
  "model": "gpt-4o-mini",
  "data": {
    "personal_info": {
      "name": "Thomas Dupont",
      "email": "thomas.dupont@email.com",
      "phone": "06 12 34 56 78",
      "address": "15 Rue de la R√©publique, 75001 Paris"
    },
    "position": "D√©veloppeur Full Stack JavaScript",
    "skills": [
      { "name": "JavaScript" },
      { "name": "React" },
      { "name": "Node.js" },
      { "name": "TypeScript" },
      { "name": "Express" }
    ],
    "experience": [
      {
        "title": "D√©veloppeur Frontend",
        "company": "TechStart",
        "start_date": "Janvier 2021",
        "end_date": "Pr√©sent",
        "description": "D√©veloppement d'applications web avec React"
      },
      {
        "title": "D√©veloppeur Junior",
        "company": "WebAgency",
        "start_date": "Juin 2019",
        "end_date": "D√©cembre 2020",
        "description": "Maintenance et d√©veloppement d'applications web"
      }
    ],
    "education": [
      {
        "degree": "Master en Informatique",
        "institution": "Universit√© Paris-Saclay",
        "start_date": "2017",
        "end_date": "2019"
      },
      {
        "degree": "Licence Informatique",
        "institution": "Universit√© de Lyon",
        "start_date": "2014",
        "end_date": "2017"
      }
    ],
    "languages": [
      { "language": "Fran√ßais", "level": "Natif" },
      { "language": "Anglais", "level": "Courant" },
      { "language": "Espagnol", "level": "Interm√©diaire" }
    ],
    "softwares": [
      "VS Code",
      "Git",
      "Docker",
      "Figma",
      "Jira"
    ]
  }
};

/**
 * Fonction pour stocker les donn√©es dans sessionStorage
 * et initialiser le pr√©-remplissage du formulaire
 */
function storeParseDataForTesting() {
  try {
    // Stocker les donn√©es dans sessionStorage
    sessionStorage.setItem('parsedCandidateData', JSON.stringify(mockParsedData));
    console.log("‚úÖ Donn√©es pars√©es stock√©es avec succ√®s dans sessionStorage");
    
    // D√©finir les fonctions globales si elles n'existent pas encore
    ensureGlobalFunctionsExist();
    
    // Appliquer directement le pr√©-remplissage si FormPrefiller est disponible
    if (window.FormPrefiller && typeof window.FormPrefiller.initialize === 'function') {
      console.log("‚öôÔ∏è Initialisation du FormPrefiller avec les donn√©es mock√©es");
      window.FormPrefiller.initialize(mockParsedData);
    } else {
      console.log("‚ö†Ô∏è Le FormPrefiller n'est pas encore disponible, programmation d'une nouvelle tentative...");
      // Effectuer plusieurs tentatives de pr√©-remplissage avec d√©lais croissants
      attemptFormFilling(0);
    }
    
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors du stockage des donn√©es de test:", error);
    return false;
  }
}

/**
 * S'assure que les fonctions globales requises pour le formulaire existent
 */
function ensureGlobalFunctionsExist() {
  // Fonction pour afficher/masquer les pr√©f√©rences de secteur
  if (typeof window.toggleSectorPreference !== 'function') {
    window.toggleSectorPreference = function(radio) {
      const container = document.getElementById('sector-preference-container');
      if (container) {
        container.style.display = radio.value === 'yes' ? 'block' : 'none';
      }
    };
  }
  
  // Fonction pour afficher/masquer les secteurs prohib√©s
  if (typeof window.toggleProhibitedSector !== 'function') {
    window.toggleProhibitedSector = function(radio) {
      const container = document.getElementById('prohibited-sector-selection');
      if (container) {
        container.style.display = radio.value === 'yes' ? 'block' : 'none';
      }
    };
  }
  
  // Fonction pour afficher/masquer les sections en fonction du statut d'emploi
  if (typeof window.toggleEmploymentStatus !== 'function') {
    window.toggleEmploymentStatus = function(radio) {
      const employedSection = document.getElementById('employed-section');
      const unemployedSection = document.getElementById('unemployed-section');
      
      if (employedSection && unemployedSection) {
        employedSection.style.display = radio.value === 'yes' ? 'block' : 'none';
        unemployedSection.style.display = radio.value === 'yes' ? 'none' : 'block';
        
        // Gestion des champs requis
        if (radio.value === 'yes') {
          document.querySelectorAll('#employed-section input[type="radio"][name="listening-reason"]').forEach(input => {
            input.setAttribute('required', '');
          });
          const noticePeriod = document.getElementById('notice-period');
          if (noticePeriod) noticePeriod.setAttribute('required', '');
          document.querySelectorAll('#employed-section input[type="radio"][name="notice-negotiable"]').forEach(input => {
            input.setAttribute('required', '');
          });
          
          document.querySelectorAll('#unemployed-section input[type="radio"][name="contract-end-reason"]').forEach(input => {
            input.removeAttribute('required');
          });
        } else {
          document.querySelectorAll('#unemployed-section input[type="radio"][name="contract-end-reason"]').forEach(input => {
            input.setAttribute('required', '');
          });
          
          document.querySelectorAll('#employed-section input[type="radio"][name="listening-reason"]').forEach(input => {
            input.removeAttribute('required');
          });
          const noticePeriod = document.getElementById('notice-period');
          if (noticePeriod) noticePeriod.removeAttribute('required');
          document.querySelectorAll('#employed-section input[type="radio"][name="notice-negotiable"]').forEach(input => {
            input.removeAttribute('required');
          });
        }
      }
    };
  }
}

/**
 * Tente de remplir le formulaire √† plusieurs reprises avec des d√©lais croissants
 * @param {number} attempt - Num√©ro de la tentative actuelle
 */
function attemptFormFilling(attempt) {
  const maxAttempts = 5;
  const delays = [500, 1000, 2000, 3000, 5000]; // D√©lais croissants entre chaque tentative
  
  if (attempt >= maxAttempts) {
    console.warn("‚ö†Ô∏è Nombre maximum de tentatives atteint. Pr√©-remplissage automatique abandonn√©.");
    return;
  }
  
  setTimeout(function() {
    console.log(`üîÑ Tentative de pr√©-remplissage #${attempt + 1}`);
    
    if (window.FormPrefiller && typeof window.FormPrefiller.initialize === 'function') {
      window.FormPrefiller.initialize(mockParsedData);
      console.log(`‚úÖ Pr√©-remplissage r√©ussi √† la tentative #${attempt + 1}`);
    } else {
      console.log(`‚è≥ FormPrefiller toujours pas disponible. Nouvelle tentative programm√©e...`);
      // Programmation de la prochaine tentative
      attemptFormFilling(attempt + 1);
      
      // Si c'est la deuxi√®me tentative, essayons de charger dynamiquement le script
      if (attempt === 1) {
        loadFormPrefillerScript();
      }
      
      // Apr√®s plusieurs tentatives, essayons un remplissage manuel basique
      if (attempt === 3) {
        applyBasicFormFilling();
      }
    }
  }, delays[attempt]);
}

/**
 * Charge dynamiquement le script FormPrefiller s'il n'est pas d√©j√† charg√©
 */
function loadFormPrefillerScript() {
  if (!document.querySelector('script[src*="form-prefiller.js"]')) {
    console.log("üì• Chargement dynamique du script form-prefiller.js");
    const script = document.createElement('script');
    script.src = "../static/scripts/form-prefiller.js";
    script.onload = function() {
      console.log("‚úÖ Script form-prefiller.js charg√© avec succ√®s");
      if (window.FormPrefiller) {
        window.FormPrefiller.initialize(mockParsedData);
      }
    };
    document.head.appendChild(script);
  }
}

/**
 * Applique un pr√©-remplissage basique pour les champs essentiels
 * quand tout le reste √©choue
 */
function applyBasicFormFilling() {
  console.log("üîß Application d'un pr√©-remplissage basique de secours");
  
  try {
    // Informations personnelles
    const fullNameField = document.getElementById('full-name');
    if (fullNameField) {
      fullNameField.value = mockParsedData.data.personal_info.name || '';
      fullNameField.dispatchEvent(new Event('input', { bubbles: true }));
    }
    
    const jobTitleField = document.getElementById('job-title');
    if (jobTitleField) {
      jobTitleField.value = mockParsedData.data.position || '';
      jobTitleField.dispatchEvent(new Event('input', { bubbles: true }));
    }
    
    // Adresse
    const addressField = document.getElementById('address');
    if (addressField && mockParsedData.data.personal_info.address) {
      addressField.value = mockParsedData.data.personal_info.address;
      addressField.dispatchEvent(new Event('input', { bubbles: true }));
    }
    
    // Transport (cocher transport en commun par d√©faut)
    const publicTransportCheckbox = document.querySelector('input[name="transport-method"][value="public-transport"]');
    if (publicTransportCheckbox) {
      publicTransportCheckbox.checked = true;
      publicTransportCheckbox.dispatchEvent(new Event('change', { bubbles: true }));
    }
    
    console.log("‚úÖ Pr√©-remplissage basique appliqu√©");
    
    // Afficher une notification
    if (window.showNotification) {
      window.showNotification("Formulaire partiellement pr√©-rempli avec vos informations", "success");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du pr√©-remplissage basique:", error);
  }
}

// Ex√©cution automatique au chargement du script
(function() {
  console.log("üìù Script de donn√©es d'exemple charg√©");
  
  // V√©rifier si les donn√©es sont d√©j√† stock√©es pour √©viter tout doublon
  const existingData = sessionStorage.getItem('parsedCandidateData');
  if (!existingData) {
    console.log("üîÑ Premi√®re ex√©cution, stockage et application des donn√©es de test");
    storeParseDataForTesting();
  } else {
    console.log("üìã Donn√©es d√©j√† pr√©sentes dans sessionStorage");
    
    // Si les donn√©es existent mais le formulaire n'est pas encore rempli, on tente quand m√™me
    const fullNameField = document.getElementById('full-name');
    if (fullNameField && !fullNameField.value && document.readyState !== 'loading') {
      console.log("üîÑ Formulaire non rempli, nouvelle tentative de pr√©-remplissage");
      storeParseDataForTesting();
    }
  }
  
  // S'assurer que le pr√©-remplissage est effectu√© une fois le DOM charg√©
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      console.log("üîÑ DOM charg√©, v√©rification de l'√©tat du pr√©-remplissage");
      // V√©rifier si le formulaire a des valeurs
      const fullNameField = document.getElementById('full-name');
      if (fullNameField && !fullNameField.value) {
        console.log("üîÑ Formulaire non rempli apr√®s chargement du DOM, nouvelle tentative");
        storeParseDataForTesting();
      }
    });
  }
  
  // Ajouter un √©v√©nement au cas o√π la page aurait fini de charger avant notre ex√©cution
  window.addEventListener('load', function() {
    console.log("üîÑ Page enti√®rement charg√©e, v√©rification finale de l'√©tat du pr√©-remplissage");
    const fullNameField = document.getElementById('full-name');
    if (fullNameField && !fullNameField.value) {
      console.log("üîÑ Formulaire toujours non rempli, derni√®re tentative");
      storeParseDataForTesting();
    }
  });
})();