/**
 * Parser CV Optimis√© - Version Am√©lior√©e
 * Am√©liore la pr√©cision d'extraction des CVs en mode local
 * Compatible avec l'architecture Commitment existante
 */

class EnhancedCVParser {
    constructor() {
        // Listes √©tendues de mots-cl√©s pour une d√©tection pr√©cise
        this.techSkills = [
            'JavaScript', 'Python', 'Java', 'React', 'Angular', 'Vue.js', 'Node.js', 'PHP', 'C#', 'C++', 
            'HTML', 'CSS', 'SQL', 'TypeScript', 'Flutter', 'Swift', 'Kotlin', 'Ruby', 'Go', 'Rust',
            'MongoDB', 'MySQL', 'PostgreSQL', 'Redis', 'Docker', 'Kubernetes', 'AWS', 'Azure', 'GCP',
            'Git', 'Jenkins', 'Terraform', 'Ansible', 'Linux', 'Unix', 'Windows Server'
        ];
        
        this.businessSkills = [
            'Gestion projet', 'Gestion √©quipe', 'Communication', 'Leadership', 'Autonomie', 
            'Rigueur', 'Organisation', 'Analytique', 'N√©gociation', 'Pr√©sentation',
            'Budget', 'Planning', 'Reporting', 'Formation', 'Recrutement', 'Management',
            'Tenue d\'agendas', 'Suivi budg√©taire', 'Pr√©paration de rapports', 'Sens de la communication',
            'Excellente organisation du travail', 'Coordination', 'Assistance', 'Secr√©tariat'
        ];
        
        this.softwareTools = [
            'Microsoft Office', 'Excel', 'Word', 'PowerPoint', 'Outlook', 'Teams', 'Microsoft',
            'Google Workspace', 'Gmail', 'Google Drive', 'Google Sheets', 'Google', 
            'Photoshop', 'Illustrator', 'InDesign', 'Figma', 'Sketch', 'Adobe Creative',
            'AutoCAD', 'SolidWorks', 'SketchUp', 'Revit', 'Maya', '3ds Max',
            'SAP', 'Salesforce', 'CRM', 'ERP', 'JIRA', 'Confluence', 'Slack', 'Notion',
            'Tableau', 'Power BI', 'Excel avanc√©', 'VBA', 'Macros',
            'Concur', 'Coupa', 'Pennylane', 'QuickBooks', 'Sage', 'Cegid'
        ];
        
        this.languageLevels = {
            'natif': 'Natif',
            'native': 'Natif',
            'langue maternelle': 'Natif',
            'mother tongue': 'Natif',
            'c2': 'C2 - Ma√Ætrise',
            'c1': 'C1 - Autonome',
            'b2': 'B2 - Avanc√©',
            'b1': 'B1 - Interm√©diaire',
            'a2': 'A2 - √âl√©mentaire',
            'a1': 'A1 - D√©butant',
            'courant': 'Courant',
            'fluent': 'Courant',
            'avanc√©': 'Avanc√©',
            'advanced': 'Avanc√©',
            'interm√©diaire': 'Interm√©diaire',
            'intermediate': 'Interm√©diaire',
            'd√©butant': 'D√©butant',
            'beginner': 'D√©butant',
            'notions': 'Notions',
            'basics': 'Notions'
        };
    }

    /**
     * Parse un CV avec une pr√©cision am√©lior√©e
     */
    parseCV(content) {
        console.log('üîç D√©marrage du parsing optimis√© Commitment...');
        
        const cleanContent = this.cleanText(content);
        
        return {
            data: {
                personal_info: this.extractPersonalInfoEnhanced(cleanContent),
                current_position: this.extractCurrentPositionEnhanced(cleanContent),
                skills: this.extractSkillsEnhanced(cleanContent),
                software: this.extractSoftwareEnhanced(cleanContent),
                languages: this.extractLanguagesEnhanced(cleanContent),
                work_experience: this.extractWorkExperienceEnhanced(cleanContent),
                education: this.extractEducationEnhanced(cleanContent)
            },
            source: 'enhanced_commitment',
            timestamp: new Date().toISOString(),
            parsing_stats: this.getParsingStats(cleanContent)
        };
    }

    /**
     * Nettoie le texte d'entr√©e pour une meilleure extraction
     */
    cleanText(content) {
        let cleaned = content
            .replace(/[\x00-\x1F\x7F]/g, ' ') // Caract√®res de contr√¥le
            .replace(/\s+/g, ' ') // Espaces multiples
            .replace(/\r\n/g, '\n') // Normaliser les retours √† la ligne
            .trim();
        
        console.log(`üìù Texte nettoy√©: ${cleaned.length} caract√®res`);
        return cleaned;
    }

    /**
     * Extraction am√©lior√©e des informations personnelles
     */
    extractPersonalInfoEnhanced(content) {
        // Patterns sophistiqu√©s pour l'email
        const emailPatterns = [
            /[\w\.-]+@[\w\.-]+\.\w+/g,
            /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g
        ];
        
        // Patterns pour t√©l√©phone fran√ßais et internationaux
        const phonePatterns = [
            /(?:\+33|0)[1-9](?:[\s\.-]?\d{2}){4}/g, // France format standard
            /\+33\d{9}/g, // France international compact
            /(?:\+\d{1,3})?[\s\.-]?\(?\d{1,4}\)?[\s\.-]?\d{1,4}[\s\.-]?\d{1,9}/g // International
        ];
        
        let email = '';
        let phone = '';
        let name = '';
        
        // Extraction email - premi√®re occurrence valide
        for (const pattern of emailPatterns) {
            const match = content.match(pattern);
            if (match) {
                email = match[0];
                break;
            }
        }
        
        // Extraction t√©l√©phone - premi√®re occurrence valide
        for (const pattern of phonePatterns) {
            const match = content.match(pattern);
            if (match) {
                phone = match[0].replace(/[\s\.-]/g, ''); // Nettoyer
                break;
            }
        }
        
        // Extraction nom - logique am√©lior√©e pour d√©tecter le nom en d√©but de CV
        const lines = content.split('\n').map(line => line.trim()).filter(line => line.length > 0);
        
        for (let i = 0; i < Math.min(3, lines.length); i++) {
            const line = lines[i];
            // Le nom doit √™tre pr√©sent, pas trop long, sans email/t√©l√©phone/mots-cl√©s CV
            if (line.length > 2 && line.length < 50 && 
                !line.includes('@') && 
                !line.match(/\d{8,}/) && 
                !line.toLowerCase().includes('cv') &&
                !line.toLowerCase().includes('curriculum') &&
                !line.toLowerCase().includes('resume')) {
                name = line;
                break;
            }
        }
        
        console.log(`üë§ Info personnelles: nom="${name}", email="${email}", tel="${phone}"`);
        
        return {
            name: name || '√Ä compl√©ter',
            email: email || '√Ä compl√©ter',
            phone: phone || '√Ä compl√©ter'
        };
    }

    /**
     * Extraction am√©lior√©e du poste actuel
     */
    extractCurrentPositionEnhanced(content) {
        const lines = content.split('\n').map(line => line.trim());
        
        // Chercher dans les premi√®res lignes apr√®s le nom
        for (let i = 1; i < Math.min(5, lines.length); i++) {
            const line = lines[i];
            if (line.length > 5 && line.length < 100 && 
                !line.includes('@') && 
                !line.match(/\+?\d{8,}/) &&
                !line.toLowerCase().includes('email') &&
                !line.toLowerCase().includes('t√©l√©phone') &&
                !line.toLowerCase().includes('phone')) {
                
                // V√©rifier si √ßa ressemble √† un titre de poste
                if (this.looksLikeJobTitle(line)) {
                    console.log(`üíº Poste d√©tect√©: "${line}"`);
                    return line;
                }
            }
        }
        
        return 'Poste √† compl√©ter';
    }

    /**
     * V√©rifie si une ligne ressemble √† un titre de poste
     */
    looksLikeJobTitle(text) {
        const jobKeywords = [
            'assistant', 'd√©veloppeur', 'ing√©nieur', 'chef', 'manager', 'directeur',
            'analyst', 'consultant', 'responsable', 'coordinateur', 'superviseur',
            'specialist', 'expert', 'lead', 'senior', 'junior', 'stagiaire',
            'executive', 'developer', 'engineer', 'officer', 'director'
        ];
        
        return jobKeywords.some(keyword => 
            text.toLowerCase().includes(keyword.toLowerCase())
        );
    }

    /**
     * Extraction am√©lior√©e des comp√©tences
     */
    extractSkillsEnhanced(content) {
        const foundSkills = new Set();
        const lowerContent = content.toLowerCase();
        
        // Chercher comp√©tences techniques
        this.techSkills.forEach(skill => {
            if (lowerContent.includes(skill.toLowerCase())) {
                foundSkills.add(skill);
            }
        });
        
        // Chercher comp√©tences m√©tier
        this.businessSkills.forEach(skill => {
            if (lowerContent.includes(skill.toLowerCase())) {
                foundSkills.add(skill);
            }
        });
        
        // Chercher dans les sections sp√©cifiques
        const skillsSections = this.extractSection(content, [
            'comp√©tences', 'skills', 'expertises', 'savoir-faire', 'comp√©tences d√©tect√©es'
        ]);
        
        skillsSections.forEach(section => {
            // Extraire des listes √† puces
            const bulletPoints = section.match(/[‚Ä¢\-*]\s*([^\n\r]{2,100})/g) || [];
            bulletPoints.forEach(point => {
                const cleanPoint = point.replace(/^[‚Ä¢\-*]\s*/, '').trim();
                if (cleanPoint.length > 2 && cleanPoint.length < 50) {
                    foundSkills.add(cleanPoint);
                }
            });
        });
        
        const skillsArray = Array.from(foundSkills);
        console.log(`üõ†Ô∏è Comp√©tences trouv√©es: ${skillsArray.length} - ${skillsArray.slice(0, 5).join(', ')}...`);
        
        return skillsArray.length > 0 ? skillsArray : ['Comp√©tences √† sp√©cifier'];
    }

    /**
     * Extraction am√©lior√©e des logiciels
     */
    extractSoftwareEnhanced(content) {
        const foundSoftware = new Set();
        const lowerContent = content.toLowerCase();
        
        this.softwareTools.forEach(software => {
            if (lowerContent.includes(software.toLowerCase())) {
                foundSoftware.add(software);
            }
        });
        
        // Chercher dans les sections logiciels/outils
        const softwareSections = this.extractSection(content, [
            'logiciels', 'software', 'outils', 'tools', 'applications', 'informatique'
        ]);
        
        softwareSections.forEach(section => {
            const bulletPoints = section.match(/[‚Ä¢\-*]\s*([^\n\r]{2,50})/g) || [];
            bulletPoints.forEach(point => {
                const cleanPoint = point.replace(/^[‚Ä¢\-*]\s*/, '').trim();
                if (cleanPoint.length > 2 && cleanPoint.length < 30) {
                    foundSoftware.add(cleanPoint);
                }
            });
        });
        
        const softwareArray = Array.from(foundSoftware);
        console.log(`üíª Logiciels trouv√©s: ${softwareArray.length} - ${softwareArray.slice(0, 5).join(', ')}...`);
        
        return softwareArray.length > 0 ? softwareArray : ['Logiciels √† sp√©cifier'];
    }

    /**
     * Extraction am√©lior√©e des langues avec niveaux
     */
    extractLanguagesEnhanced(content) {
        const languages = [];
        
        // Patterns pour d√©tecter les langues avec niveaux
        const languagePatterns = [
            /(fran√ßais|french)\s*[-:\s]*([a-z0-9\s]+)/gi,
            /(anglais|english)\s*[-:\s]*([a-z0-9\s]+)/gi,
            /(espagnol|spanish)\s*[-:\s]*([a-z0-9\s]+)/gi,
            /(allemand|german)\s*[-:\s]*([a-z0-9\s]+)/gi,
            /(italien|italian)\s*[-:\s]*([a-z0-9\s]+)/gi,
            /(chinois|chinese)\s*[-:\s]*([a-z0-9\s]+)/gi,
            /(japonais|japanese)\s*[-:\s]*([a-z0-9\s]+)/gi
        ];
        
        languagePatterns.forEach(pattern => {
            const matches = content.matchAll(pattern);
            for (const match of matches) {
                const language = this.normalizeLanguageName(match[1]);
                const levelText = match[2] ? match[2].toLowerCase().trim() : '';
                const level = this.extractLanguageLevel(levelText);
                
                // √âviter les doublons
                if (!languages.some(lang => lang.language.toLowerCase() === language.toLowerCase())) {
                    languages.push({
                        language: language,
                        level: level
                    });
                }
            }
        });
        
        // Si aucune langue d√©tect√©e, ajouter des langues par d√©faut
        if (languages.length === 0) {
            languages.push(
                { language: 'Fran√ßais', level: 'Natif' },
                { language: 'Anglais', level: '√Ä √©valuer' }
            );
        }
        
        console.log(`üåç Langues d√©tect√©es: ${languages.map(l => `${l.language} (${l.level})`).join(', ')}`);
        
        return languages;
    }

    /**
     * Normalise le nom d'une langue
     */
    normalizeLanguageName(language) {
        const languageMap = {
            'fran√ßais': 'Fran√ßais',
            'french': 'Fran√ßais',
            'anglais': 'Anglais',
            'english': 'Anglais',
            'espagnol': 'Espagnol',
            'spanish': 'Espagnol',
            'allemand': 'Allemand',
            'german': 'Allemand',
            'italien': 'Italien',
            'italian': 'Italien'
        };
        
        return languageMap[language.toLowerCase()] || language.charAt(0).toUpperCase() + language.slice(1).toLowerCase();
    }

    /**
     * Extrait le niveau d'une langue √† partir du texte
     */
    extractLanguageLevel(text) {
        const normalizedText = text.toLowerCase().trim();
        
        // Chercher le niveau exact
        for (const [pattern, level] of Object.entries(this.languageLevels)) {
            if (normalizedText.includes(pattern)) {
                return level;
            }
        }
        
        return '√Ä √©valuer';
    }

    /**
     * Extraction am√©lior√©e de l'exp√©rience professionnelle
     */
    extractWorkExperienceEnhanced(content) {
        const experiences = [];
        
        // Chercher les sections d'exp√©rience
        const expSections = this.extractSection(content, [
            'exp√©rience', 'experience', 'parcours', 'emploi', 'travail'
        ]);
        
        if (expSections.length === 0) {
            console.log('‚ùå Aucune section d\'exp√©rience trouv√©e');
            return [{
                title: '√Ä compl√©ter',
                company: '√Ä sp√©cifier',
                start_date: '√Ä d√©finir',
                end_date: '√Ä d√©finir'
            }];
        }
        
        expSections.forEach(section => {
            const sectionExperiences = this.parseExperienceSection(section);
            experiences.push(...sectionExperiences);
        });
        
        // Trier par date (plus r√©cent en premier)
        experiences.sort((a, b) => this.compareDates(b.start_date, a.start_date));
        
        console.log(`üíº ${experiences.length} exp√©riences trouv√©es`);
        
        return experiences.length > 0 ? experiences : [{
            title: '√Ä compl√©ter',
            company: '√Ä sp√©cifier',
            start_date: '√Ä d√©finir',
            end_date: '√Ä d√©finir'
        }];
    }

    /**
     * Parse une section d'exp√©rience
     */
    parseExperienceSection(section) {
        const experiences = [];
        
        // Pattern pour d√©tecter les dates (MM/YYYY - MM/YYYY)
        const datePattern = /(\d{2}\/\d{4})\s*[-‚Äì]\s*(\d{2}\/\d{4}|pr√©sent|present|actuel|current)/gi;
        
        let match;
        const dateMatches = [];
        
        // Trouver toutes les dates
        while ((match = datePattern.exec(section)) !== null) {
            dateMatches.push({
                start: match[1],
                end: match[2],
                index: match.index,
                fullMatch: match[0]
            });
        }
        
        // Pour chaque p√©riode trouv√©e, extraire l'exp√©rience associ√©e
        dateMatches.forEach((dateMatch, index) => {
            const startPos = dateMatch.index;
            const endPos = index < dateMatches.length - 1 ? 
                dateMatches[index + 1].index : section.length;
            
            const experienceText = section.substring(startPos, endPos);
            const experience = this.parseExperienceBlock(experienceText, dateMatch);
            
            if (experience) {
                experiences.push(experience);
            }
        });
        
        return experiences;
    }

    /**
     * Parse un bloc d'exp√©rience individuel
     */
    parseExperienceBlock(text, dateMatch) {
        const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
        
        if (lines.length < 2) return null;
        
        let title = '√Ä compl√©ter';
        let company = '√Ä sp√©cifier';
        
        // Chercher le titre du poste
        for (let i = 1; i < Math.min(3, lines.length); i++) {
            const line = lines[i];
            if (line.length > 5 && line.length < 100 && 
                !line.match(/\d{2}\/\d{4}/) && // Pas une date
                this.looksLikeJobTitle(line)) {
                title = line;
                break;
            }
        }
        
        // Chercher le nom de l'entreprise
        for (let i = 1; i < Math.min(5, lines.length); i++) {
            const line = lines[i];
            if (line.length > 3 && line.length < 80 && 
                line !== title &&
                !line.match(/\d{2}\/\d{4}/) && // Pas une date
                !line.includes('‚Ä¢') && // Pas une liste
                !line.includes('-') && // Pas une liste
                line.charAt(0) === line.charAt(0).toUpperCase()) { // Commence par majuscule
                company = line;
                break;
            }
        }
        
        return {
            title: title,
            company: company,
            start_date: dateMatch.start,
            end_date: dateMatch.end.toLowerCase().includes('pr√©sent') || 
                      dateMatch.end.toLowerCase().includes('present') || 
                      dateMatch.end.toLowerCase().includes('actuel') ? 'Present' : dateMatch.end
        };
    }

    /**
     * Extraction de la formation
     */
    extractEducationEnhanced(content) {
        const education = [];
        
        // Chercher les sections de formation
        const eduSections = this.extractSection(content, [
            'formation', 'education', '√©tudes', 'dipl√¥me', 'diploma', 'universit√©', 'university', '√©cole'
        ]);
        
        eduSections.forEach(section => {
            const degrees = this.parseEducationSection(section);
            education.push(...degrees);
        });
        
        console.log(`üéì ${education.length} formations trouv√©es`);
        
        return education.length > 0 ? education : [{
            degree: '√Ä compl√©ter',
            institution: '√Ä sp√©cifier',
            year: '√Ä d√©finir'
        }];
    }

    /**
     * Parse une section de formation
     */
    parseEducationSection(section) {
        const education = [];
        const lines = section.split('\n').map(line => line.trim()).filter(line => line.length > 0);
        
        // Chercher les patterns d'ann√©e
        const yearPattern = /\b(19|20)\d{2}\b/g;
        
        lines.forEach(line => {
            const yearMatch = line.match(yearPattern);
            if (yearMatch) {
                const year = yearMatch[yearMatch.length - 1]; // Prendre la derni√®re ann√©e trouv√©e
                
                // Extraire le dipl√¥me et l'institution
                const parts = line.split(/[,\-]/);
                let degree = '√Ä compl√©ter';
                let institution = '√Ä sp√©cifier';
                
                if (parts.length >= 2) {
                    degree = parts[0].replace(yearPattern, '').trim();
                    institution = parts[1].trim();
                } else {
                    degree = line.replace(yearPattern, '').trim();
                }
                
                if (degree.length > 3) {
                    education.push({
                        degree: degree,
                        institution: institution,
                        year: year
                    });
                }
            }
        });
        
        return education;
    }

    /**
     * Extrait des sections sp√©cifiques du contenu
     */
    extractSection(content, keywords) {
        const sections = [];
        const lines = content.split('\n');
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].toLowerCase();
            
            // V√©rifier si la ligne contient un des mots-cl√©s
            if (keywords.some(keyword => line.includes(keyword.toLowerCase()))) {
                // Extraire la section (jusqu'√† la prochaine section ou fin)
                let sectionContent = '';
                let j = i + 1;
                
                while (j < lines.length) {
                    const nextLine = lines[j].toLowerCase();
                    
                    // Arr√™ter si on trouve une nouvelle section
                    if (this.isNewSection(nextLine) && j > i + 3) {
                        break;
                    }
                    
                    sectionContent += lines[j] + '\n';
                    j++;
                }
                
                if (sectionContent.trim().length > 10) {
                    sections.push(sectionContent);
                }
            }
        }
        
        return sections;
    }

    /**
     * V√©rifie si une ligne marque le d√©but d'une nouvelle section
     */
    isNewSection(line) {
        const sectionKeywords = [
            'exp√©rience', 'experience', 'formation', 'education', 'comp√©tences', 'skills',
            'langues', 'languages', 'centres d\'int√©r√™t', 'hobbies', 'r√©f√©rences', 'references',
            'coordonn√©es', 'contact', 'informatique', 'logiciels'
        ];
        
        return sectionKeywords.some(keyword => line.includes(keyword));
    }

    /**
     * Compare deux dates au format MM/YYYY
     */
    compareDates(date1, date2) {
        if (!date1 || !date2) return 0;
        
        const parseDate = (dateStr) => {
            if (dateStr.toLowerCase().includes('present') || 
                dateStr.toLowerCase().includes('actuel')) {
                return new Date();
            }
            
            const parts = dateStr.split('/');
            if (parts.length === 2) {
                return new Date(parseInt(parts[1]), parseInt(parts[0]) - 1);
            }
            return new Date(0);
        };
        
        return parseDate(date1) - parseDate(date2);
    }

    /**
     * Statistiques de parsing pour monitoring
     */
    getParsingStats(content) {
        return {
            content_length: content.length,
            lines_count: content.split('\n').length,
            word_count: content.split(' ').length,
            parsing_time: new Date().toISOString(),
            parser_version: 'enhanced_v1.0'
        };
    }
}

// Fonction d'int√©gration pour remplacer le parser existant
function createEnhancedParser() {
    const parser = new EnhancedCVParser();
    
    return {
        parseCV: async (file) => {
            try {
                const content = await readFileContent(file);
                return parser.parseCV(content);
            } catch (error) {
                console.error('Erreur parsing enhanced:', error);
                throw error;
            }
        }
    };
}

// Fonction utilitaire pour lire le contenu du fichier
async function readFileContent(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.onerror = (e) => reject(new Error('Erreur lecture fichier'));
        reader.readAsText(file);
    });
}

// Export pour utilisation globale
if (typeof window !== 'undefined') {
    window.EnhancedCVParser = EnhancedCVParser;
    window.createEnhancedParser = createEnhancedParser;
}

console.log('‚úÖ Enhanced CV Parser Commitment charg√© avec succ√®s !');
