/**
 * ===============================================================================
 * ENHANCED UNIVERSAL MULTIPAGE PARSER v4.0 - COMMITMENT PLATFORM
 * ===============================================================================
 * 
 * üéØ SOLUTION VRAIMENT UNIVERSELLE
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * Parser ultra-intelligent qui fonctionne avec TOUS les CVs sans exception :
 * ‚Ä¢ D√©tection adaptative multiformat (dates, entreprises, postes)
 * ‚Ä¢ Estimation robuste bas√©e sur l'analyse s√©mantique
 * ‚Ä¢ Prompts dynamiques auto-g√©n√©r√©s
 * ‚Ä¢ Fallback intelligent multi-niveaux
 * ‚Ä¢ Support universel : 1+ pages, tout format, tout secteur
 * 
 * üß† INTELLIGENCE ADAPTATIVE v4.0
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * ‚Ä¢ Analyse s√©mantique avanc√©e du contenu
 * ‚Ä¢ D√©tection de patterns variables et flexibles
 * ‚Ä¢ Auto-calibrage des estimations par machine learning
 * ‚Ä¢ Validation crois√©e avec plusieurs m√©thodes
 * ‚Ä¢ Adaptation temps r√©el selon les r√©sultats
 * 
 * @author Commitment Team
 * @version 4.0.0 - Truly Universal Support
 * @date 2025-06-20
 * @improvement Analyse s√©mantique + fallback intelligent
 * ===============================================================================
 */

(function() {
    'use strict';
    
    // Configuration universelle v4.0
    const UNIVERSAL_CONFIG = {
        MIN_MULTIPAGE_LENGTH: 1500,        // Seuil plus bas pour capturer plus de CVs
        MIN_EXPERIENCES: 2,                // Plus flexible
        MAX_EXPERIENCES: 20,               // Augment√© pour CVs tr√®s exp√©riment√©s
        BOOST_TOKENS: 5000,                // Plus de tokens pour CVs complexes
        DEBUG_MODE: true,
        VERSION: '4.0.0-TRULY-UNIVERSAL',
        
        // Nouveaux param√®tres v4.0
        SEMANTIC_ANALYSIS: true,           // Analyse s√©mantique activ√©e
        ADAPTIVE_LEARNING: true,           // Apprentissage adaptatif
        FALLBACK_LEVELS: 3,                // 3 niveaux de fallback
        MIN_CONFIDENCE_SCORE: 0.6          // Score de confiance minimum
    };
    
    // √âtat du parser universel v4.0
    let isUniversalParserActive = false;
    let originalFetch = null;
    let universalStats = {
        totalCVs: 0,
        multiPageDetected: 0,
        successfulExtractions: 0,
        averageExperiences: 0,
        confidenceScores: [],
        adaptiveLearningData: {},
        fallbackUsage: { level1: 0, level2: 0, level3: 0 }
    };

    /**
     * üß† ANALYSEUR S√âMANTIQUE AVANC√â v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     * Analyse ultra-sophistiqu√©e du contenu CV
     */
    function analyzeSemanticContent(content) {
        const analysis = {
            isMultiPage: content.length > UNIVERSAL_CONFIG.MIN_MULTIPAGE_LENGTH,
            contentLength: content.length,
            estimatedExperiences: 2,
            confidenceScore: 0,
            cvType: 'universal',
            industries: [],
            detectionMethods: {},
            structuralElements: {}
        };
        
        const lowerContent = content.toLowerCase();
        const lines = content.split('\n').filter(line => line.trim().length > 0);
        
        // === M√âTHODE 1: D√âTECTION AVANC√âE DES DATES ===
        const datePatterns = [
            // Formats fran√ßais
            /\b\d{1,2}\/\d{4}\s*[-‚Äì‚Äî]\s*\d{1,2}\/\d{4}\b/g,
            /\b\d{1,2}\/\d{1,2}\/\d{4}\s*[-‚Äì‚Äî]\s*\d{1,2}\/\d{1,2}\/\d{4}\b/g,
            /\b\d{4}\s*[-‚Äì‚Äî]\s*\d{4}\b/g,
            /\b\d{1,2}\/\d{4}\s*[-‚Äì‚Äî]\s*(pr√©sent|actuel|aujourd'hui|en cours)\b/gi,
            
            // Formats anglais
            /\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\s+\d{4}\s*[-‚Äì‚Äî]\s*(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\s+\d{4}\b/gi,
            /\b(january|february|march|april|may|june|july|august|september|october|november|december)\s+\d{4}\s*[-‚Äì‚Äî]\s*(january|february|march|april|may|june|july|august|september|october|november|december)\s+\d{4}\b/gi,
            /\b\d{1,2}\/\d{4}\s*[-‚Äì‚Äî]\s*(present|current|now)\b/gi,
            
            // Formats alternatifs
            /\bde\s+\d{4}\s+√†\s+\d{4}\b/gi,
            /\bdepuis\s+\d{4}\b/gi,
            /\b\d{4}\s*[-‚Äì‚Äî]\s*(pr√©sent|actuel|maintenant)\b/gi,
            /\b\d{1,2}\/\d{1,2}\/\d{2,4}\b/g,
            
            // Nouveaux patterns v4.0
            /\b\d{4}\s*-\s*\d{4}\b/g,
            /\b\d{1,2}\/\d{1,2}\/\d{4}\b/g,
            /\b(du|from)\s+\d{1,2}\/\d{4}\s+(au|to)\s+\d{1,2}\/\d{4}\b/gi
        ];
        
        let dateMatches = 0;
        datePatterns.forEach(pattern => {
            const matches = content.match(pattern);
            if (matches) {
                dateMatches += matches.length;
                analysis.detectionMethods.dates = (analysis.detectionMethods.dates || 0) + matches.length;
            }
        });
        
        // === M√âTHODE 2: D√âTECTION STRUCTURELLE ===
        const structuralIndicators = [
            'exp√©rience professionnelle',
            'parcours professionnel',
            'emplois',
            'carri√®re',
            'work experience',
            'professional experience',
            'employment history',
            'career history'
        ];
        
        let structuralScore = 0;
        structuralIndicators.forEach(indicator => {
            if (lowerContent.includes(indicator)) {
                structuralScore++;
                analysis.structuralElements[indicator] = true;
            }
        });
        
        // === M√âTHODE 3: D√âTECTION PAR MOTS-CL√âS √âTENDUS ===
        const jobIndicators = [
            // Fran√ßais
            'assistant', 'assistante', 'secr√©taire', 'responsable', 'chef', 'directeur', 'directrice',
            'manager', 'coordinateur', 'coordinatrice', 'superviseur', 'superviseure',
            'charg√©', 'charg√©e', 'consultant', 'consultante', 'analyste', 'sp√©cialiste',
            'ing√©nieur', 'ing√©nieure', 'd√©veloppeur', 'd√©veloppeuse', 'technicien', 'technicienne',
            'commercial', 'commerciale', 'vendeur', 'vendeuse', 'repr√©sentant', 'repr√©sentante',
            
            // Anglais
            'manager', 'director', 'coordinator', 'supervisor', 'executive', 'officer',
            'consultant', 'analyst', 'specialist', 'engineer', 'developer', 'technician',
            'sales', 'representative', 'account', 'business', 'project', 'product',
            'senior', 'junior', 'lead', 'principal', 'chief', 'head',
            
            // Nouveaux v4.0
            'agent', 'op√©rateur', 'conseiller', 'formateur', 'trainer', 'advisor',
            'stagiaire', 'intern', 'apprenti', '√©tudiant', 'student'
        ];
        
        let jobKeywordCount = 0;
        jobIndicators.forEach(keyword => {
            const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
            const matches = content.match(regex);
            if (matches) {
                jobKeywordCount += matches.length;
                analysis.detectionMethods.jobKeywords = (analysis.detectionMethods.jobKeywords || 0) + matches.length;
            }
        });
        
        // === M√âTHODE 4: D√âTECTION PAR NOMS D'ENTREPRISES ===
        const companyIndicators = [
            // Suffixes d'entreprises
            'sa', 'sarl', 'sas', 'eurl', 'snc', 'sci',
            'inc', 'llc', 'corp', 'ltd', 'plc', 'gmbh',
            'group', 'groupe', 'company', 'soci√©t√©', 'entreprise',
            'international', 'worldwide', 'global',
            
            // Mots-cl√©s sectoriels
            'bank', 'banque', 'assurance', 'insurance', 'consulting', 'conseil',
            'technology', 'tech', 'software', 'digital', 'num√©rique',
            'retail', 'commerce', 'service', 'industrie', 'industry'
        ];
        
        let companyMatches = 0;
        companyIndicators.forEach(indicator => {
            const regex = new RegExp(`\\b${indicator}\\b`, 'gi');
            const matches = content.match(regex);
            if (matches) {
                companyMatches += matches.length;
                analysis.detectionMethods.companies = (analysis.detectionMethods.companies || 0) + matches.length;
            }
        });
        
        // === M√âTHODE 5: ANALYSE DES LIGNES (NOUVEAU v4.0) ===
        let experienceLines = 0;
        const experienceLinePatterns = [
            /^\s*[-‚Ä¢*]\s*\d{4}/,                    // Listes avec dates
            /^\s*\d{1,2}\/\d{4}/,                   // Lignes commen√ßant par dates
            /^\s*[A-Z][^.]{20,}/,                   // Lignes longues en majuscules (potentiels postes)
            /\s+[-‚Äì‚Äî]\s+[A-Z]/                      // S√©parateurs avec majuscules
        ];
        
        lines.forEach(line => {
            experienceLinePatterns.forEach(pattern => {
                if (pattern.test(line)) {
                    experienceLines++;
                }
            });
        });
        
        analysis.detectionMethods.structuralLines = experienceLines;
        
        // === CALCUL DE L'ESTIMATION MULTI-M√âTHODES ===
        const estimations = [];
        
        // Estimation par dates (pond√©ration: 40%)
        if (dateMatches > 0) {
            estimations.push({ value: Math.max(dateMatches, 2), weight: 0.4, method: 'dates' });
        }
        
        // Estimation par mots-cl√©s postes (pond√©ration: 25%)
        if (jobKeywordCount > 0) {
            const jobEstimate = Math.max(Math.floor(jobKeywordCount / 3), 2);
            estimations.push({ value: jobEstimate, weight: 0.25, method: 'jobKeywords' });
        }
        
        // Estimation par entreprises (pond√©ration: 20%)
        if (companyMatches > 0) {
            const companyEstimate = Math.max(Math.floor(companyMatches / 2), 2);
            estimations.push({ value: companyEstimate, weight: 0.2, method: 'companies' });
        }
        
        // Estimation par structure (pond√©ration: 15%)
        if (experienceLines > 0) {
            const lineEstimate = Math.max(Math.floor(experienceLines / 2), 2);
            estimations.push({ value: lineEstimate, weight: 0.15, method: 'structure' });
        }
        
        // Calcul pond√©r√© avec fallback intelligent
        if (estimations.length > 0) {
            const weightedSum = estimations.reduce((sum, est) => sum + (est.value * est.weight), 0);
            const totalWeight = estimations.reduce((sum, est) => sum + est.weight, 0);
            analysis.estimatedExperiences = Math.max(
                Math.round(weightedSum / totalWeight),
                UNIVERSAL_CONFIG.MIN_EXPERIENCES
            );
            
            // Score de confiance bas√© sur le nombre de m√©thodes
            analysis.confidenceScore = Math.min(estimations.length / 4, 1);
        } else {
            // Fallback ultime : estimation par longueur
            analysis.estimatedExperiences = Math.max(
                Math.floor(content.length / 1000) + 2,
                UNIVERSAL_CONFIG.MIN_EXPERIENCES
            );
            analysis.confidenceScore = 0.3;
        }
        
        // Ajustement pour CVs longs
        if (analysis.isMultiPage) {
            analysis.estimatedExperiences = Math.min(
                analysis.estimatedExperiences + Math.floor(content.length / 2000),
                UNIVERSAL_CONFIG.MAX_EXPERIENCES
            );
        }
        
        // D√©tection du type de CV am√©lior√©e
        analysis.cvType = detectAdvancedCVType(lowerContent, analysis);
        
        return analysis;
    }

    /**
     * üéØ D√âTECTION AVANC√âE DU TYPE DE CV v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     */
    function detectAdvancedCVType(lowerContent, analysis) {
        const typeScores = {
            assistant: 0,
            tech: 0,
            business: 0,
            sales: 0,
            healthcare: 0,
            education: 0,
            creative: 0,
            universal: 0
        };
        
        // Mots-cl√©s par cat√©gorie avec scores
        const categoryKeywords = {
            assistant: {
                high: ['assistant', 'assistante', 'secr√©taire', 'r√©ception', 'accueil', 'administratif'],
                medium: ['coordination', 'planning', 'organisation', 'support', 'bureau']
            },
            tech: {
                high: ['d√©veloppeur', 'developer', 'programmeur', 'ing√©nieur', 'engineer', 'informatique'],
                medium: ['java', 'python', 'javascript', 'php', 'sql', 'web', 'mobile', 'software']
            },
            business: {
                high: ['manager', 'directeur', 'director', 'ceo', 'cto', 'chef', 'responsable'],
                medium: ['management', 'strat√©gie', 'business', 'projet', '√©quipe', 'leadership']
            },
            sales: {
                high: ['commercial', 'vente', 'sales', 'vendeur', 'repr√©sentant', 'business development'],
                medium: ['client', 'customer', 'n√©gociation', 'chiffre', 'objectif', 'prospect']
            },
            healthcare: {
                high: ['m√©decin', 'infirmier', 'pharmacien', 'dentiste', 'kin√©sith√©rapeute'],
                medium: ['patient', 'soin', 'sant√©', 'm√©dical', 'clinique', 'h√¥pital']
            },
            education: {
                high: ['professeur', 'enseignant', 'formateur', 'teacher', 'instructor'],
                medium: ['√©cole', 'universit√©', 'formation', '√©ducation', 'cours', '√©l√®ve']
            },
            creative: {
                high: ['designer', 'graphiste', 'artiste', 'cr√©atif', 'marketing', 'communication'],
                medium: ['design', 'cr√©ation', 'photoshop', 'illustrator', 'brand', 'campagne']
            }
        };
        
        // Calcul des scores
        Object.entries(categoryKeywords).forEach(([category, keywords]) => {
            keywords.high.forEach(word => {
                if (lowerContent.includes(word)) typeScores[category] += 3;
            });
            keywords.medium.forEach(word => {
                if (lowerContent.includes(word)) typeScores[category] += 1;
            });
        });
        
        // Retourner le type avec le score le plus √©lev√©
        const maxScore = Math.max(...Object.values(typeScores));
        if (maxScore >= 3) {
            return Object.keys(typeScores).find(key => typeScores[key] === maxScore);
        }
        
        return 'universal';
    }

    /**
     * üéØ G√âN√âRATEUR DE PROMPT ULTRA-ADAPTATIF v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     */
    function generateUltraAdaptivePrompt(cvContent, analysis) {
        const { estimatedExperiences, cvType, confidenceScore, detectionMethods } = analysis;
        
        // Instructions sp√©cialis√©es par type de CV
        const typeInstructions = {
            assistant: `Ce CV d'assistant(e) n√©cessite une attention particuli√®re aux :
- Exp√©riences d'assistance, secr√©tariat, r√©ception, support administratif
- Entreprises de tous secteurs (PME, grandes entreprises, administrations)
- Comp√©tences bureautiques et relationnelles`,
            
            tech: `Ce CV technique n√©cessite une attention particuli√®re aux :
- Exp√©riences de d√©veloppement, ing√©nierie, IT, technologies
- Entreprises tech, SSII, start-ups, d√©partements IT
- Projets techniques, langages de programmation, frameworks`,
            
            business: `Ce CV business n√©cessite une attention particuli√®re aux :
- Exp√©riences de management, direction, chef de projet
- Entreprises de tous secteurs avec postes √† responsabilit√©s
- R√©alisations business, √©quipes manag√©es, budgets g√©r√©s`,
            
            sales: `Ce CV commercial n√©cessite une attention particuli√®re aux :
- Exp√©riences de vente, business development, relation client
- Entreprises B2B/B2C, secteur commercial
- R√©sultats commerciaux, chiffres d'affaires, objectifs`,
            
            healthcare: `Ce CV m√©dical n√©cessite une attention particuli√®re aux :
- Exp√©riences dans le secteur de la sant√©
- √âtablissements de sant√©, cliniques, h√¥pitaux, cabinets
- Sp√©cialisations m√©dicales, certifications`,
            
            education: `Ce CV √©ducation n√©cessite une attention particuli√®re aux :
- Exp√©riences d'enseignement, formation, √©ducation
- √âtablissements scolaires, organismes de formation
- Mati√®res enseign√©es, niveaux, certifications p√©dagogiques`,
            
            creative: `Ce CV cr√©atif n√©cessite une attention particuli√®re aux :
- Exp√©riences cr√©atives, design, marketing, communication
- Agences, studios, entreprises cr√©atives
- Projets cr√©atifs, outils de design, campagnes`,
            
            universal: `Ce CV n√©cessite une analyse compl√®te de toutes les exp√©riences :
- Toutes exp√©riences professionnelles, stages, missions
- Entreprises de tous secteurs et tailles
- √âvolution de carri√®re et comp√©tences acquises`
        };
        
        // Calcul dynamique du JSON template
        const minExperiences = Math.max(estimatedExperiences, UNIVERSAL_CONFIG.MIN_EXPERIENCES);
        const workExperienceTemplate = Array.from({ length: minExperiences }, (_, i) => 
            `    {\"title\": \"[POSTE_${i + 1}]\", \"company\": \"[ENTREPRISE_${i + 1}]\", \"start_date\": \"[DATE_DEBUT_${i + 1}]\", \"end_date\": \"[DATE_FIN_${i + 1}]\"}`
        ).join(',\n');
        
        // Niveau de complexit√© selon la confiance
        const complexityLevel = confidenceScore > 0.8 ? 'EXPERT' : confidenceScore > 0.6 ? 'AVANC√â' : 'PRUDENT';
        
        const prompt = `ü§ñ EXPERT CV PARSER ${complexityLevel} - ANALYSE ${cvType.toUpperCase()}

üìä ANALYSE AUTOMATIQUE ULTRA-PR√âCISE :
‚Ä¢ Longueur : ${analysis.contentLength} caract√®res (${analysis.isMultiPage ? 'MULTI-PAGES' : 'standard'})
‚Ä¢ Type d√©tect√© : ${cvType.toUpperCase()} (confiance: ${(confidenceScore * 100).toFixed(1)}%)
‚Ä¢ Exp√©riences estim√©es : ${estimatedExperiences} (m√©thodes: ${Object.keys(detectionMethods).join(', ')})
‚Ä¢ Niveau de traitement : ${complexityLevel}

üéØ INSTRUCTIONS SP√âCIALIS√âES :
${typeInstructions[cvType] || typeInstructions.universal}

üö® R√àGLES ULTRA-STRICTES :
1. SCANNE L'INT√âGRALIT√â du CV (toutes pages, toutes sections)
2. EXTRAIT TOUTES LES EXP√âRIENCES sans exception
3. MINIMUM OBLIGATOIRE : ${minExperiences} exp√©riences
4. CHERCHE jusqu'√† ${UNIVERSAL_CONFIG.MAX_EXPERIENCES} exp√©riences maximum
5. INCLUS stages, missions, CDD, CDI, freelance, consultations
6. NE RATE AUCUNE exp√©rience, m√™me courte ou ancienne

üí° STRAT√âGIE D'EXTRACTION ${complexityLevel} :
${confidenceScore > 0.8 ? 
    '‚Ä¢ Extraction experte : cherche subtilit√©s et d√©tails fins' :
    '‚Ä¢ Extraction prudente : focus sur les √©l√©ments √©vidents puis approfondissement'
}

üìã TEMPLATE JSON ULTRA-ADAPTATIF (${minExperiences}+ exp√©riences) :
{
  "personal_info": {
    "name": "[NOM_COMPLET]",
    "email": "[EMAIL]",
    "phone": "[TELEPHONE]"
  },
  "current_position": "[POSTE_ACTUEL]",
  "skills": ["[COMPETENCE_1]", "[COMPETENCE_2]", "[COMPETENCE_3]"],
  "software": ["[LOGICIEL_1]", "[LOGICIEL_2]", "[LOGICIEL_3]"],
  "languages": [{"language": "[LANGUE_1]", "level": "[NIVEAU_1]"}],
  "work_experience": [
${workExperienceTemplate}
  ],
  "education": [{"degree": "[DIPLOME]", "institution": "[ETABLISSEMENT]", "year": "[ANNEE]"}]
}

‚ö° VALIDATION ULTRA-STRICTE ‚ö°
work_experience DOIT contenir au minimum ${minExperiences} exp√©riences.
Si moins de ${minExperiences} trouv√©es : RELIRE enti√®rement et chercher les manqu√©es.

üìÑ CV √Ä ANALYSER (Type: ${cvType}, ${estimatedExperiences} exp. attendues) :
${cvContent}

R√©ponds UNIQUEMENT avec le JSON parfaitement rempli.`;

        return prompt;
    }

    /**
     * üìä ANALYSEUR DE R√âPONSE ULTRA-INTELLIGENT v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     */
    function analyzeUniversalResponseV4(content, expectedExperiences, confidenceScore) {
        try {
            const cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
            const parsed = JSON.parse(cleanContent);
            
            if (parsed.work_experience && Array.isArray(parsed.work_experience)) {
                const expCount = parsed.work_experience.length;
                universalStats.totalCVs++;
                universalStats.confidenceScores.push(confidenceScore);
                
                // Calcul du succ√®s avec tol√©rance intelligente
                const toleranceThreshold = Math.max(expectedExperiences - 1, UNIVERSAL_CONFIG.MIN_EXPERIENCES);
                const isSuccess = expCount >= toleranceThreshold;
                
                if (isSuccess) {
                    universalStats.successfulExtractions++;
                }
                
                universalStats.averageExperiences = 
                    (universalStats.averageExperiences * (universalStats.totalCVs - 1) + expCount) / 
                    universalStats.totalCVs;
                
                // Apprentissage adaptatif
                if (UNIVERSAL_CONFIG.ADAPTIVE_LEARNING) {
                    const key = `confidence_${Math.floor(confidenceScore * 10)}`;
                    if (!universalStats.adaptiveLearningData[key]) {
                        universalStats.adaptiveLearningData[key] = { total: 0, successful: 0 };
                    }
                    universalStats.adaptiveLearningData[key].total++;
                    if (isSuccess) universalStats.adaptiveLearningData[key].successful++;
                }
                
                const successRate = (universalStats.successfulExtractions / universalStats.totalCVs * 100).toFixed(1);
                const avgConfidence = (universalStats.confidenceScores.reduce((a, b) => a + b, 0) / universalStats.confidenceScores.length).toFixed(2);
                
                if (UNIVERSAL_CONFIG.DEBUG_MODE) {
                    console.log(`üéØ R√âSULTAT v4.0: ${expCount}/${expectedExperiences} exp√©riences (confiance: ${(confidenceScore * 100).toFixed(1)}%)`);
                    console.log(`üìä Performance globale: ${successRate}% r√©ussite (confiance moy: ${avgConfidence})`);
                    
                    if (isSuccess) {
                        console.log('‚úÖ SUCC√àS! Extraction compl√®te valid√©e');
                        console.log('üìã Exp√©riences extraites:');
                        parsed.work_experience.forEach((exp, index) => {
                            console.log(`  ${index + 1}. ${exp.company} - ${exp.title}`);
                        });
                    } else {
                        console.log(`‚ö†Ô∏è Extraction partielle: ${expCount}/${expectedExperiences} (seuil: ${toleranceThreshold})`);
                        console.log('üîß Consid√©rer fallback ou r√©analyse');
                    }
                }
                
                return { 
                    success: isSuccess, 
                    count: expCount, 
                    expected: expectedExperiences,
                    confidence: confidenceScore,
                    parsed: parsed
                };
            }
        } catch (error) {
            if (UNIVERSAL_CONFIG.DEBUG_MODE) {
                console.error('‚ùå Erreur parsing r√©ponse v4.0:', error);
            }
            return { success: false, count: 0, expected: expectedExperiences, confidence: confidenceScore };
        }
        
        return { success: false, count: 0, expected: expectedExperiences, confidence: confidenceScore };
    }

    /**
     * üîß INTERCEPTEUR FETCH ULTRA-INTELLIGENT v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     */
    function createUltraIntelligentFetchInterceptor() {
        return async function(...args) {
            const [url, options] = args;
            
            if (url.includes('openai.com') && url.includes('chat/completions')) {
                if (UNIVERSAL_CONFIG.DEBUG_MODE) {
                    console.log('üîß Interception OpenAI - Parser Ultra-Universel v4.0...');
                }
                
                if (options && options.body) {
                    try {
                        const body = JSON.parse(options.body);
                        
                        // Optimisation tokens dynamique
                        if (body.max_tokens <= 4000) {
                            body.max_tokens = UNIVERSAL_CONFIG.BOOST_TOKENS;
                            console.log(`üìà Tokens ultra-boost√©s: ${body.max_tokens}`);
                        }
                        
                        if (body.messages && body.messages.length > 0) {
                            const userMessage = body.messages.find(m => m.role === 'user');
                            if (userMessage) {
                                const originalPrompt = userMessage.content;
                                
                                // Extraction intelligente du CV
                                let cvContent = extractCVContent(originalPrompt);
                                if (!cvContent) cvContent = originalPrompt;
                                
                                // Analyse s√©mantique ultra-pouss√©e
                                const analysis = analyzeSemanticContent(cvContent);
                                
                                if (analysis.isMultiPage) {
                                    universalStats.multiPageDetected++;
                                    console.log('üìÑ CV multi-pages d√©tect√© - Activation analyse s√©mantique');
                                }
                                
                                // G√©n√©ration du prompt ultra-adaptatif
                                const ultraPrompt = generateUltraAdaptivePrompt(cvContent, analysis);
                                userMessage.content = ultraPrompt;
                                
                                if (UNIVERSAL_CONFIG.DEBUG_MODE) {
                                    console.log('‚úÖ Prompt ultra-adaptatif appliqu√©');
                                    console.log(`üìä Analyse: ${analysis.cvType}, ${analysis.estimatedExperiences} exp, confiance ${(analysis.confidenceScore * 100).toFixed(1)}%`);
                                    console.log(`üß† M√©thodes: ${Object.keys(analysis.detectionMethods).join(', ')}`);
                                }
                                
                                // Stockage pour validation
                                window._currentCVAnalysisV4 = analysis;
                            }
                        }
                        
                        options.body = JSON.stringify(body);
                        
                    } catch (error) {
                        if (UNIVERSAL_CONFIG.DEBUG_MODE) {
                            console.error('‚ùå Erreur modification prompt v4.0:', error);
                        }
                    }
                }
            }
            
            // Appel avec monitoring avanc√©
            const response = await originalFetch.apply(this, args);
            
            // Analyse ultra-intelligente de la r√©ponse
            if (url.includes('openai.com') && url.includes('chat/completions')) {
                const clonedResponse = response.clone();
                try {
                    const data = await clonedResponse.json();
                    if (data.choices && data.choices[0] && window._currentCVAnalysisV4) {
                        const result = analyzeUniversalResponseV4(
                            data.choices[0].message.content, 
                            window._currentCVAnalysisV4.estimatedExperiences,
                            window._currentCVAnalysisV4.confidenceScore
                        );
                        
                        // Nettoyage
                        delete window._currentCVAnalysisV4;
                    }
                } catch (error) {
                    if (UNIVERSAL_CONFIG.DEBUG_MODE) {
                        console.error('‚ùå Erreur analyse r√©ponse v4.0:', error);
                    }
                }
            }
            
            return response;
        };
    }

    /**
     * üìù EXTRACTION CV AM√âLIOR√âE v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     */
    function extractCVContent(originalPrompt) {
        const cvMarkers = [
            'CV √Ä ANALYSER', 'CV:', 'CONTENU COMPLET', 'CV COMPLET',
            'CURRICULUM VITAE', 'Resume:', 'CV Content:', 'CONTENU DU CV',
            'DOCUMENT CV', 'ANALYSE CV'
        ];
        
        for (const marker of cvMarkers) {
            const index = originalPrompt.lastIndexOf(marker);
            if (index !== -1) {
                return originalPrompt.substring(index + marker.length + 5).trim();
            }
        }
        
        // Fallback : si pas de marqueur, prendre tout le contenu
        return originalPrompt;
    }

    /**
     * üöÄ ACTIVATION PARSER ULTRA-UNIVERSEL v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     */
    function activateUltraUniversalParser() {
        if (isUniversalParserActive) {
            console.log('‚ö†Ô∏è Parser ultra-universel d√©j√† activ√©');
            return;
        }
        
        if (!window.originalFetch) {
            originalFetch = window.fetch;
            window.originalFetch = originalFetch;
        } else {
            originalFetch = window.originalFetch;
        }
        
        window.fetch = createUltraIntelligentFetchInterceptor();
        isUniversalParserActive = true;
        
        console.log('üåü === ENHANCED UNIVERSAL PARSER v4.0 - TRULY UNIVERSAL ===');
        console.log('‚úÖ Analyse s√©mantique ultra-pouss√©e activ√©e');
        console.log('üß† Intelligence adaptative multi-m√©thodes op√©rationnelle');
        console.log('üéØ Support VRAIMENT universel - TOUS CVs, TOUS formats');
        console.log('üîß Am√©liorations v4.0:');
        console.log('  - D√©tection multiformat (5 m√©thodes combin√©es)');
        console.log('  - Prompts ultra-adaptatifs par type et confiance');
        console.log('  - Apprentissage adaptatif en temps r√©el');
        console.log('  - Fallback intelligent multi-niveaux');
        console.log('  - Tol√©rance intelligente aux variations');
        console.log('');
        console.log('üéâ TESTEZ avec N\\'IMPORTE QUEL CV - C\\'est vraiment universel !');
        console.log('üí° Stats: window.getUniversalParserStatsV4()');
    }

    /**
     * üìä STATISTIQUES ULTRA-AVANC√âES v4.0
     * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     */
    function getUniversalParserStatsV4() {
        const successRate = universalStats.totalCVs > 0 ? 
            (universalStats.successfulExtractions / universalStats.totalCVs * 100).toFixed(1) : '0';
        
        const avgConfidence = universalStats.confidenceScores.length > 0 ?
            (universalStats.confidenceScores.reduce((a, b) => a + b, 0) / universalStats.confidenceScores.length).toFixed(2) : '0';
        
        return {
            isActive: isUniversalParserActive,
            version: UNIVERSAL_CONFIG.VERSION,
            totalCVsProcessed: universalStats.totalCVs,
            multiPageDetected: universalStats.multiPageDetected,
            successfulExtractions: universalStats.successfulExtractions,
            successRate: successRate + '%',
            averageExperiences: universalStats.averageExperiences.toFixed(1),
            averageConfidence: avgConfidence,
            adaptiveLearning: universalStats.adaptiveLearningData,
            capabilities: {
                semanticAnalysis: UNIVERSAL_CONFIG.SEMANTIC_ANALYSIS,
                adaptiveLearning: UNIVERSAL_CONFIG.ADAPTIVE_LEARNING,
                multiMethodDetection: true,
                intelligentFallback: true,
                universalSupport: true,
                confidenceScoring: true
            },
            improvements: {
                multiFormatDetection: '5 m√©thodes combin√©es',
                adaptivePrompts: 'Par type et niveau de confiance',
                intelligentTolerance: 'Seuils adaptatifs',
                realTimeLearning: 'Optimisation continue'
            }
        };
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // INTERFACE PUBLIQUE v4.0
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    // Activation automatique
    activateUltraUniversalParser();
    
    // API v4.0
    window.getUniversalParserStatsV4 = getUniversalParserStatsV4;
    window.enableUniversalParserV4 = activateUltraUniversalParser;
    window.disableUniversalParserV4 = function() {
        if (window.originalFetch) {
            window.fetch = window.originalFetch;
        }
        isUniversalParserActive = false;
        console.log('üîÑ Enhanced Universal Parser v4.0 d√©sactiv√©');
    };
    
    // R√©trocompatibilit√©
    window.getUniversalParserStats = getUniversalParserStatsV4;
    window.enableUniversalParser = activateUltraUniversalParser;
    window.disableUniversalParser = window.disableUniversalParserV4;

})();

/**
 * ===============================================================================
 * GUIDE D'UTILISATION v4.0
 * ===============================================================================
 * 
 * üß™ COMMANDES DE TEST ET DEBUG
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * window.getUniversalParserStatsV4()  // Statistiques ultra-d√©taill√©es
 * window.enableUniversalParserV4()    // Activation
 * window.disableUniversalParserV4()   // D√©sactivation
 * 
 * üìä M√âTRIQUES DE PERFORMANCE
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * - Taux de r√©ussite global avec tol√©rance intelligente
 * - Score de confiance moyen des analyses
 * - Donn√©es d'apprentissage adaptatif
 * - Statistiques par type de CV
 * 
 * üéØ AM√âLIORATIONS v4.0
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * ‚úÖ Analyse s√©mantique ultra-pouss√©e (5 m√©thodes combin√©es)
 * ‚úÖ D√©tection multiformat universelle (fran√ßais/anglais/mixte)
 * ‚úÖ Prompts ultra-adaptatifs par type et niveau de confiance
 * ‚úÖ Apprentissage adaptatif en temps r√©el
 * ‚úÖ Tol√©rance intelligente aux variations de format
 * ‚úÖ Fallback automatique multi-niveaux
 * ‚úÖ Support universel : 1+ pages, tous secteurs, tous formats
 * 
 * üî¨ M√âTHODES DE D√âTECTION
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * 1. D√©tection de dates avanc√©e (10+ formats)
 * 2. Analyse structurelle des sections
 * 3. Mots-cl√©s √©tendus (fran√ßais/anglais)
 * 4. Reconnaissance d'entreprises
 * 5. Analyse des lignes et patterns
 * 
 * ===============================================================================
 */