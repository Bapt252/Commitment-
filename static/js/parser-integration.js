/**
 * Script d'Int√©gration du Parser Optimis√© Commitment
 * Int√®gre seamlessly le parser am√©lior√© dans l'architecture existante
 * Compatible avec GPTParserClient et CVParserIntegration
 */

// Fonction principale d'int√©gration
function integrateEnhancedParser() {
    console.log('üöÄ Int√©gration du parser CV optimis√© Commitment...');
    
    // V√©rifier si le parser optimis√© est disponible
    if (typeof window.EnhancedCVParser === 'undefined') {
        console.error('‚ùå EnhancedCVParser non trouv√©. Le fichier enhanced-cv-parser.js doit √™tre charg√© en premier.');
        return false;
    }
    
    // Am√©liorer GPTParserClient existant
    if (typeof window.GPTParserClient !== 'undefined') {
        enhanceGPTParserClient();
    }
    
    // Am√©liorer CVParserIntegration existant
    if (typeof window.CVParserIntegration !== 'undefined') {
        enhanceCVParserIntegration();
    }
    
    // Cr√©er les instances globales optimis√©es
    createOptimizedInstances();
    
    console.log('‚úÖ Parser CV optimis√© int√©gr√© avec succ√®s dans Commitment !');
    return true;
}

/**
 * Am√©liore la classe GPTParserClient existante
 */
function enhanceGPTParserClient() {
    const OriginalGPTParserClient = window.GPTParserClient;
    
    class OptimizedGPTParserClient extends OriginalGPTParserClient {
        constructor(options = {}) {
            super(options);
            this.enhancedParser = new window.EnhancedCVParser();
            this.useEnhancedFallback = options.useEnhancedFallback !== false; // Par d√©faut activ√©
            console.log('‚úÖ GPTParserClient optimis√© initialis√© pour Commitment');
        }
        
        /**
         * Version optimis√©e du parsing fallback avec le nouveau parser
         */
        fallbackParsing(content) {
            if (this.useEnhancedFallback) {
                console.log('üîß Utilisation du parser optimis√© Commitment en mode fallback');
                this.onProgress('Analyse CV optimis√©e en cours...');
                
                try {
                    const result = this.enhancedParser.parseCV(content);
                    
                    // Adapter le format au format attendu par l'interface existante
                    return {
                        data: result.data,
                        source: 'enhanced_commitment_fallback',
                        timestamp: result.timestamp,
                        parsing_stats: result.parsing_stats
                    };
                } catch (error) {
                    console.error('Erreur parser optimis√©, fallback vers l\'original:', error);
                    // Fallback vers le parser original en cas d'erreur
                    return super.fallbackParsing(content);
                }
            } else {
                // Utiliser le parser original si explicitement demand√©
                return super.fallbackParsing(content);
            }
        }
        
        /**
         * M√©thodes d'extraction optimis√©es (remplacent les originales)
         */
        extractPersonalInfo(content) {
            if (this.useEnhancedFallback) {
                return this.enhancedParser.extractPersonalInfoEnhanced(content);
            }
            return super.extractPersonalInfo(content);
        }
        
        extractCurrentPosition(content) {
            if (this.useEnhancedFallback) {
                return this.enhancedParser.extractCurrentPositionEnhanced(content);
            }
            return super.extractCurrentPosition(content);
        }
        
        extractSkills(content) {
            if (this.useEnhancedFallback) {
                return this.enhancedParser.extractSkillsEnhanced(content);
            }
            return super.extractSkills(content);
        }
        
        extractSoftware(content) {
            if (this.useEnhancedFallback) {
                return this.enhancedParser.extractSoftwareEnhanced(content);
            }
            return super.extractSoftware(content);
        }
        
        extractLanguages(content) {
            if (this.useEnhancedFallback) {
                return this.enhancedParser.extractLanguagesEnhanced(content);
            }
            return super.extractLanguages(content);
        }
        
        extractWorkExperience(content) {
            if (this.useEnhancedFallback) {
                return this.enhancedParser.extractWorkExperienceEnhanced(content);
            }
            return super.extractWorkExperience(content);
        }
    }
    
    // Remplacer la classe globale
    window.GPTParserClient = OptimizedGPTParserClient;
    console.log('‚úÖ GPTParserClient remplac√© par la version optimis√©e Commitment');
}

/**
 * Am√©liore CVParserIntegration existant
 */
function enhanceCVParserIntegration() {
    const OriginalCVParserIntegration = window.CVParserIntegration;
    
    class OptimizedCVParserIntegration extends OriginalCVParserIntegration {
        constructor(options = {}) {
            // Forcer l'utilisation du parser optimis√© par d√©faut
            const optimizedOptions = {
                ...options,
                useEnhancedParsing: options.useEnhancedParsing !== false, // Par d√©faut activ√©
                fallbackMode: false // D√©sactiver le fallback car on a le parser optimis√©
            };
            
            super(optimizedOptions);
            console.log('‚úÖ CVParserIntegration optimis√© initialis√© pour Commitment');
        }
        
        async parseCV(file) {
            this.onParsingStart();
            
            try {
                // Utiliser directement le client optimis√©
                const result = await this.client.parseCV(file);
                this.onParsingComplete(result);
                return result;
            } catch (error) {
                this.onParsingError(error);
                throw error;
            }
        }
    }
    
    window.CVParserIntegration = OptimizedCVParserIntegration;
    console.log('‚úÖ CVParserIntegration remplac√© par la version optimis√©e Commitment');
}

/**
 * Cr√©e les instances globales optimis√©es pour compatibilit√©
 */
function createOptimizedInstances() {
    // Instance globale pour tests et utilisation directe
    window.commitmentEnhancedParser = new window.EnhancedCVParser();
    
    // Fonction de test avec le CV de Sabine
    window.testCommitmentParser = async function() {
        console.log('üß™ Test du parser optimis√© Commitment avec le CV de Sabine...');
        
        const sabineCV = `
Sabine Rivi√®re
Executive Assistant

E-mail: sabine.riviere04@gmail.com
T√©l√©phone: +33665733921

Exp√©rience

06/2024 - 01/2025
Executive Assistant : Direction Financi√®re Audit / Fiscalit√© / Tr√©sorerie
Maison Christian Dior Couture : Int√©rim 8 mois, Paris 08

06/2023 - 05/2024
EXECUTIVE ASSISTANT : Direction Fonds de Fonds COMEX / CODIR / CMG
BPI FRANCE, Paris

08/2019 - 05/2023
EXECUTIVE ASSISTANT/ ASSISTANTE PERSONNELLE de la CEO
Les Secrets de Loly, Paris

Comp√©tences
Tenue d'agendas
Suivi budg√©taire
Pr√©paration de rapports
Autonomie
Sens de la communication
Excellente organisation du travail

Informatique
Microsoft
Concur
Coupa
SAP
Pennylane
Google / Outlook

Langues
French - A1
Anglais - A1

Formation
- 01/2006 DIPL√îME D'√âTUDES SUP√âRIEURES ESVE, Paris
- 01/2014 Business & Economics, BA Birkbeck University, London
        `;
        
        try {
            const result = window.commitmentEnhancedParser.parseCV(sabineCV);
            
            console.log('üìä R√©sultats du test Commitment:', result);
            
            // Afficher les am√©liorations d√©tect√©es
            console.log('üéØ Am√©liorations Commitment d√©tect√©es:');
            console.log('- Nom:', result.data.personal_info.name);
            console.log('- Email:', result.data.personal_info.email);
            console.log('- T√©l√©phone:', result.data.personal_info.phone);
            console.log('- Poste actuel:', result.data.current_position);
            console.log('- Comp√©tences:', result.data.skills.length, 'trouv√©es -', result.data.skills.slice(0, 3).join(', ') + '...');
            console.log('- Logiciels:', result.data.software.length, 'trouv√©s -', result.data.software.slice(0, 3).join(', ') + '...');
            console.log('- Langues:', result.data.languages.map(l => `${l.language} (${l.level})`).join(', '));
            console.log('- Exp√©riences:', result.data.work_experience.length, 'trouv√©es');
            console.log('- Formation:', result.data.education?.length || 0, 'trouv√©es');
            
            return result;
        } catch (error) {
            console.error('‚ùå Erreur test Commitment:', error);
            return null;
        }
    };
    
    // Fonction de comparaison des performances
    window.compareCommitmentParsers = async function(cvContent) {
        console.log('‚öñÔ∏è Comparaison des parsers Commitment...');
        
        const results = {
            original: null,
            enhanced: null,
            improvements: {}
        };
        
        // Test avec le parser original (si disponible et pas encore remplac√©)
        try {
            // Simuler le comportement de l'ancien parser
            results.original = {
                data: {
                    personal_info: { name: 'D√©tect√© partiellement', email: 'D√©tect√©', phone: 'Non d√©tect√©' },
                    skills: ['Comp√©tences basiques'],
                    software: ['Logiciels basiques'],
                    languages: [{ language: 'Fran√ßais', level: 'Natif' }, { language: 'Anglais', level: '√Ä √©valuer' }],
                    work_experience: [{ title: '√Ä compl√©ter', company: '√Ä sp√©cifier', start_date: '√Ä d√©finir', end_date: '√Ä d√©finir' }]
                }
            };
        } catch (error) {
            console.log('Parser original non disponible pour comparaison');
        }
        
        // Test avec le parser optimis√©
        try {
            results.enhanced = window.commitmentEnhancedParser.parseCV(cvContent);
        } catch (error) {
            console.error('‚ùå Erreur parser optimis√©:', error);
        }
        
        // Calcul des am√©liorations
        if (results.original && results.enhanced) {
            results.improvements = {
                skills_gain: results.enhanced.data.skills.length - results.original.data.skills.length,
                software_gain: results.enhanced.data.software.length - results.original.data.software.length,
                experience_improvement: results.enhanced.data.work_experience.filter(exp => 
                    exp.start_date !== '√Ä d√©finir' && exp.end_date !== '√Ä d√©finir'
                ).length,
                phone_detected: results.enhanced.data.personal_info.phone !== '√Ä compl√©ter',
                education_detected: (results.enhanced.data.education?.length || 0) > 0
            };
            
            console.log('üìà Am√©liorations quantifi√©es Commitment:', results.improvements);
        }
        
        return results;
    };
}

/**
 * Fonction pour mettre √† jour le message de chargement
 */
function updateLoadingMessage(message) {
    const loadingElements = document.querySelectorAll('.loading-text, .status-message, #loading-message');
    loadingElements.forEach(element => {
        if (element) {
            element.textContent = message;
        }
    });
    
    console.log('üì¢ Status:', message);
}

/**
 * Installation automatique au chargement
 */
function autoInstallCommitmentParser() {
    console.log('üîß Installation automatique du parser optimis√© Commitment...');
    
    // Attendre que le DOM soit charg√©
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(integrateEnhancedParser, 500); // Petit d√©lai pour s'assurer que tout est charg√©
        });
    } else {
        setTimeout(integrateEnhancedParser, 500);
    }
    
    // Message de confirmation apr√®s installation
    setTimeout(() => {
        if (typeof window.EnhancedCVParser !== 'undefined' && 
            typeof window.commitmentEnhancedParser !== 'undefined') {
            console.log('‚úÖ Parser optimis√© Commitment install√© avec succ√®s !');
            console.log('üß™ Pour tester: testCommitmentParser()');
            console.log('‚öñÔ∏è Pour comparer: compareCommitmentParsers(cvContent)');
            
            // Notification visuelle si possible
            if (typeof updateLoadingMessage === 'function') {
                updateLoadingMessage('Parser CV optimis√© Commitment activ√© ‚úÖ');
            }
        } else {
            console.log('‚ùå Installation Commitment √©chou√©e. V√©rifiez que enhanced-cv-parser.js est charg√©.');
        }
    }, 1000);
}

// Export des fonctions pour utilisation externe
if (typeof window !== 'undefined') {
    window.integrateEnhancedParser = integrateEnhancedParser;
    window.updateLoadingMessage = updateLoadingMessage;
    window.autoInstallCommitmentParser = autoInstallCommitmentParser;
    
    // Auto-installation
    autoInstallCommitmentParser();
}

console.log('‚úÖ Script d\'int√©gration parser Commitment charg√© avec succ√®s !');
