#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SuperSmartMatch V3.0 Enhanced - Testeur de Parsing Avanc√©
Diagnostic complet du syst√®me de parsing de CV et PDF
"""

import os
import sys
import time
import logging
from pathlib import Path
import tempfile
from typing import Dict, List, Optional, Any

# Imports pour parsing
try:
    import PyPDF2
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False
    print("‚ö†Ô∏è PyPDF2 non disponible")

try:
    import docx
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False
    print("‚ö†Ô∏è python-docx non disponible")

try:
    from PIL import Image
    import pytesseract
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False
    print("‚ö†Ô∏è pytesseract/Pillow non disponible")

import re
import json
from datetime import datetime

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ParseTester:
    """Testeur avanc√© du syst√®me de parsing"""
    
    def __init__(self):
        self.results = []
        self.stats = {
            'total_files': 0,
            'successful_extractions': 0,
            'failed_extractions': 0,
            'empty_extractions': 0,
            'pdf_count': 0,
            'docx_count': 0,
            'image_count': 0,
            'txt_count': 0
        }
        
        # Base de comp√©tences (version r√©duite pour test)
        self.skills_database = {
            "tech": [
                "Python", "Java", "JavaScript", "TypeScript", "React", "Vue.js", "Angular",
                "Node.js", "Django", "Flask", "Spring", "Docker", "Kubernetes", "AWS",
                "Azure", "GCP", "DevOps", "CI/CD", "Git", "SQL", "PostgreSQL", "MongoDB",
                "Redis", "Machine Learning", "AI", "Data Science", "TensorFlow", "PyTorch",
                "API", "REST", "GraphQL", "Microservices", "Linux", "Bash", "PowerShell"
            ],
            "juridique": [
                "Droit", "Juridique", "Contentieux", "Contrats", "RGPD", "Compliance",
                "Administrative", "Conseil juridique", "R√©daction juridique", "Veille juridique",
                "Droit social", "Droit commercial", "Droit des affaires", "Propri√©t√© intellectuelle"
            ],
            "rh": [
                "Ressources Humaines", "RH", "Recrutement", "Formation", "Paie", "Gestion RH",
                "Talent Management", "Performance Management", "SIRH", "Relations sociales"
            ],
            "business": [
                "Management", "Leadership", "Strategy", "Business Development", "Marketing",
                "Sales", "Finance", "Accounting", "Budget", "Controlling", "Analytics",
                "Project Management", "Change Management", "Innovation"
            ],
            "langues": [
                "Fran√ßais", "Anglais", "Espagnol", "Allemand", "Italien", "Chinois",
                "Japonais", "Arabe", "Russe", "Portugais"
            ]
        }
    
    def print_header(self):
        """Header de test"""
        print("\n" + "="*70)
        print("üîç SUPERSMARTMATCH V3.0 - TESTEUR DE PARSING AVANC√â")
        print("="*70)
        print(f"üìÖ Test d√©marr√©: {datetime.now().strftime('%H:%M:%S')}")
        print("\nüîß V√©rification des d√©pendances:")
        print(f"   üìÑ PyPDF2: {'‚úÖ' if PDF_AVAILABLE else '‚ùå'}")
        print(f"   üìù python-docx: {'‚úÖ' if DOCX_AVAILABLE else '‚ùå'}")
        print(f"   üñºÔ∏è OCR (pytesseract): {'‚úÖ' if OCR_AVAILABLE else '‚ùå'}")
        print("="*70)
    
    def test_text_extraction(self, file_path: str) -> Dict[str, Any]:
        """Test extraction de texte selon le format"""
        file_path = Path(file_path)
        
        if not file_path.exists():
            return {"error": f"Fichier non trouv√©: {file_path}"}
        
        result = {
            "file": str(file_path),
            "size": file_path.stat().st_size,
            "extension": file_path.suffix.lower(),
            "text": "",
            "error": None,
            "processing_time": 0,
            "method": "unknown"
        }
        
        start_time = time.time()
        
        try:
            ext = file_path.suffix.lower()
            
            if ext == '.pdf':
                result["text"] = self._extract_pdf(file_path)
                result["method"] = "PyPDF2"
                self.stats['pdf_count'] += 1
                
            elif ext in ['.docx', '.doc']:
                result["text"] = self._extract_docx(file_path)
                result["method"] = "python-docx"
                self.stats['docx_count'] += 1
                
            elif ext in ['.png', '.jpg', '.jpeg']:
                result["text"] = self._extract_image(file_path)
                result["method"] = "pytesseract OCR"
                self.stats['image_count'] += 1
                
            elif ext == '.txt':
                result["text"] = self._extract_txt(file_path)
                result["method"] = "lecture directe"
                self.stats['txt_count'] += 1
                
            else:
                result["error"] = f"Format non support√©: {ext}"
            
            result["processing_time"] = (time.time() - start_time) * 1000
            
            # Classification du r√©sultat
            if result["error"]:
                self.stats['failed_extractions'] += 1
            elif len(result["text"].strip()) == 0:
                self.stats['empty_extractions'] += 1
            else:
                self.stats['successful_extractions'] += 1
            
            self.stats['total_files'] += 1
            
        except Exception as e:
            result["error"] = str(e)
            result["processing_time"] = (time.time() - start_time) * 1000
            self.stats['failed_extractions'] += 1
            self.stats['total_files'] += 1
        
        return result
    
    def _extract_pdf(self, file_path: Path) -> str:
        """Extraction PDF avec PyPDF2"""
        if not PDF_AVAILABLE:
            raise ImportError("PyPDF2 non disponible")
        
        text = ""
        with open(file_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            print(f"   üìÑ PDF d√©tect√©: {len(pdf_reader.pages)} page(s)")
            
            for page_num, page in enumerate(pdf_reader.pages):
                try:
                    page_text = page.extract_text()
                    text += page_text
                    print(f"      Page {page_num + 1}: {len(page_text)} caract√®res extraits")
                except Exception as e:
                    print(f"      Page {page_num + 1}: Erreur - {e}")
        
        return text
    
    def _extract_docx(self, file_path: Path) -> str:
        """Extraction DOCX avec python-docx"""
        if not DOCX_AVAILABLE:
            raise ImportError("python-docx non disponible")
        
        doc = docx.Document(file_path)
        text = ""
        
        print(f"   üìù DOCX d√©tect√©: {len(doc.paragraphs)} paragraphe(s)")
        
        for para in doc.paragraphs:
            text += para.text + "\n"
        
        return text
    
    def _extract_image(self, file_path: Path) -> str:
        """Extraction image avec OCR"""
        if not OCR_AVAILABLE:
            raise ImportError("pytesseract/Pillow non disponible")
        
        print(f"   üñºÔ∏è Image d√©tect√©e: OCR en cours...")
        
        image = Image.open(file_path)
        
        # Informations sur l'image
        print(f"      Dimensions: {image.size}")
        print(f"      Mode: {image.mode}")
        
        # OCR avec langues fran√ßaise et anglaise
        text = pytesseract.image_to_string(image, lang='fra+eng')
        
        print(f"      OCR termin√©: {len(text)} caract√®res extraits")
        
        return text
    
    def _extract_txt(self, file_path: Path) -> str:
        """Extraction TXT"""
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    
    def analyze_extracted_data(self, text: str) -> Dict[str, Any]:
        """Analyse du texte extrait pour d√©tecter les donn√©es CV"""
        analysis = {
            "text_length": len(text),
            "lines_count": len(text.split('\n')),
            "words_count": len(text.split()),
            "name": self._extract_name(text),
            "skills": self._extract_skills(text),
            "experience_years": self._extract_experience(text),
            "education": self._extract_education(text),
            "languages": self._extract_languages(text),
            "sector": None,
            "emails": self._extract_emails(text),
            "phones": self._extract_phones(text)
        }
        
        # D√©tection secteur bas√© sur comp√©tences
        analysis["sector"] = self._detect_sector(analysis["skills"])
        
        return analysis
    
    def _extract_name(self, text: str) -> Optional[str]:
        """Extraction nom candidat"""
        lines = text.split('\n')[:5]
        
        for line in lines:
            line = line.strip()
            # Pattern nom/pr√©nom simple
            if re.match(r'^[A-Z√Ä-≈∏][a-z√†-√ø]+\s+[A-Z√Ä-≈∏][a-z√†-√ø]+', line):
                return line
        
        return None
    
    def _extract_skills(self, text: str) -> List[str]:
        """Extraction comp√©tences"""
        skills_found = []
        text_lower = text.lower()
        
        for sector, skills_list in self.skills_database.items():
            for skill in skills_list:
                if skill.lower() in text_lower:
                    skills_found.append(skill)
        
        return list(set(skills_found))
    
    def _extract_experience(self, text: str) -> int:
        """Extraction ann√©es d'exp√©rience"""
        patterns = [
            r'(\d+)\s*ans?\s*d.exp√©rience',
            r'(\d+)\s*ann√©es?\s*d.exp√©rience',
            r'(\d+)\s*ans?\s*dans',
            r'exp√©rience.*?(\d+)\s*ans?'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text.lower())
            if matches:
                return max(int(match) for match in matches)
        
        return 0
    
    def _extract_education(self, text: str) -> List[str]:
        """Extraction formation"""
        education_keywords = [
            'Master', 'Licence', 'Bachelor', 'BTS', 'DUT', 'MBA',
            'Doctorat', 'PhD', 'Ing√©nieur', '√âcole', 'Universit√©'
        ]
        
        found = []
        for keyword in education_keywords:
            if keyword.lower() in text.lower():
                found.append(keyword)
        
        return found
    
    def _extract_languages(self, text: str) -> List[str]:
        """Extraction langues"""
        languages_found = []
        text_lower = text.lower()
        
        for language in self.skills_database["langues"]:
            if language.lower() in text_lower:
                languages_found.append(language)
        
        return languages_found
    
    def _extract_emails(self, text: str) -> List[str]:
        """Extraction emails"""
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return re.findall(email_pattern, text)
    
    def _extract_phones(self, text: str) -> List[str]:
        """Extraction t√©l√©phones"""
        phone_patterns = [
            r'\b(?:\+33|0)[1-9](?:[.\-\s]?\d{2}){4}\b',
            r'\b\d{2}[\.\-\s]?\d{2}[\.\-\s]?\d{2}[\.\-\s]?\d{2}[\.\-\s]?\d{2}\b'
        ]
        
        phones = []
        for pattern in phone_patterns:
            phones.extend(re.findall(pattern, text))
        
        return list(set(phones))
    
    def _detect_sector(self, skills: List[str]) -> Optional[str]:
        """D√©tection secteur principal"""
        sector_scores = {}
        
        for sector, skills_list in self.skills_database.items():
            score = sum(1 for skill in skills if skill in skills_list)
            if score > 0:
                sector_scores[sector] = score
        
        if sector_scores:
            return max(sector_scores, key=sector_scores.get).title()
        
        return None
    
    def test_single_file(self, file_path: str, detailed: bool = True):
        """Test d'un seul fichier avec analyse d√©taill√©e"""
        print(f"\nüîç TEST FICHIER: {file_path}")
        print("-" * 50)
        
        # 1. Extraction du texte
        extraction_result = self.test_text_extraction(file_path)
        
        print(f"üìÅ Fichier: {extraction_result['file']}")
        print(f"üìè Taille: {extraction_result['size']:,} octets")
        print(f"üîß M√©thode: {extraction_result['method']}")
        print(f"‚è±Ô∏è Temps: {extraction_result['processing_time']:.1f}ms")
        
        if extraction_result['error']:
            print(f"‚ùå Erreur: {extraction_result['error']}")
            return
        
        text = extraction_result['text']
        print(f"üìù Texte extrait: {len(text):,} caract√®res")
        
        if len(text.strip()) == 0:
            print("‚ö†Ô∏è AUCUN TEXTE EXTRAIT - Possible PDF scann√© n√©cessitant OCR")
            return
        
        # 2. Aper√ßu du texte
        if detailed:
            print(f"\nüìñ APER√áU DU TEXTE (100 premiers caract√®res):")
            print(f"'{text[:100].strip()}...'")
        
        # 3. Analyse des donn√©es
        print(f"\nüß† ANALYSE DES DONN√âES:")
        analysis = self.analyze_extracted_data(text)
        
        print(f"   üìä Statistiques texte:")
        print(f"      ‚Ä¢ Lignes: {analysis['lines_count']:,}")
        print(f"      ‚Ä¢ Mots: {analysis['words_count']:,}")
        
        print(f"   üë§ Donn√©es candidat:")
        print(f"      ‚Ä¢ Nom: {analysis['name'] or 'Non d√©tect√©'}")
        print(f"      ‚Ä¢ Secteur: {analysis['sector'] or 'Non d√©tect√©'}")
        print(f"      ‚Ä¢ Exp√©rience: {analysis['experience_years']} ans")
        
        print(f"   üéì Comp√©tences ({len(analysis['skills'])}):")
        for skill in analysis['skills'][:10]:  # Top 10
            print(f"      ‚Ä¢ {skill}")
        if len(analysis['skills']) > 10:
            print(f"      ... et {len(analysis['skills']) - 10} autres")
        
        if analysis['education']:
            print(f"   üéì Formation: {', '.join(analysis['education'])}")
        
        if analysis['languages']:
            print(f"   üåç Langues: {', '.join(analysis['languages'])}")
        
        if analysis['emails']:
            print(f"   üìß Emails: {', '.join(analysis['emails'])}")
        
        if analysis['phones']:
            print(f"   üìû T√©l√©phones: {', '.join(analysis['phones'])}")
        
        # 4. √âvaluation qualit√©
        print(f"\nüìä √âVALUATION QUALIT√â:")
        quality_score = self._evaluate_quality(analysis)
        print(f"   Score global: {quality_score}/100")
        
        self.results.append({
            'file': file_path,
            'extraction': extraction_result,
            'analysis': analysis,
            'quality_score': quality_score
        })
    
    def _evaluate_quality(self, analysis: Dict) -> int:
        """√âvaluation qualit√© de l'extraction"""
        score = 0
        
        # Texte extrait (30 points)
        if analysis['text_length'] > 100:
            score += 30
        elif analysis['text_length'] > 50:
            score += 15
        
        # Donn√©es candidat (40 points)
        if analysis['name']:
            score += 15
        if analysis['experience_years'] > 0:
            score += 10
        if analysis['skills']:
            score += 15
        
        # Donn√©es suppl√©mentaires (30 points)
        if analysis['education']:
            score += 10
        if analysis['emails']:
            score += 10
        if analysis['languages']:
            score += 10
        
        return min(100, score)
    
    def test_directory(self, directory_path: str):
        """Test de tous les fichiers d'un dossier"""
        directory = Path(directory_path)
        
        if not directory.exists():
            print(f"‚ùå Dossier non trouv√©: {directory_path}")
            return
        
        # Recherche des fichiers support√©s
        supported_extensions = ['.pdf', '.docx', '.doc', '.txt', '.png', '.jpg', '.jpeg']
        files = []
        
        for ext in supported_extensions:
            files.extend(directory.glob(f"*{ext}"))
            files.extend(directory.glob(f"*{ext.upper()}"))
        
        if not files:
            print(f"‚ùå Aucun fichier support√© trouv√© dans: {directory_path}")
            return
        
        print(f"\nüìÅ TEST DOSSIER: {directory_path}")
        print(f"üìä Fichiers trouv√©s: {len(files)}")
        
        for i, file_path in enumerate(files, 1):
            print(f"\n{'='*20} FICHIER {i}/{len(files)} {'='*20}")
            self.test_single_file(str(file_path), detailed=False)
    
    def print_summary(self):
        """R√©sum√© des tests"""
        print("\n" + "="*70)
        print("üìä R√âSUM√â DES TESTS DE PARSING")
        print("="*70)
        
        print(f"üìÅ Fichiers test√©s: {self.stats['total_files']}")
        print(f"   ‚Ä¢ PDF: {self.stats['pdf_count']}")
        print(f"   ‚Ä¢ DOCX: {self.stats['docx_count']}")
        print(f"   ‚Ä¢ Images: {self.stats['image_count']}")
        print(f"   ‚Ä¢ TXT: {self.stats['txt_count']}")
        
        print(f"\nüìä R√©sultats:")
        print(f"   ‚úÖ Succ√®s: {self.stats['successful_extractions']}")
        print(f"   üìÑ Vides: {self.stats['empty_extractions']}")
        print(f"   ‚ùå √âchecs: {self.stats['failed_extractions']}")
        
        if self.stats['total_files'] > 0:
            success_rate = (self.stats['successful_extractions'] / self.stats['total_files']) * 100
            print(f"\nüéØ Taux de succ√®s: {success_rate:.1f}%")
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS:")
        
        if self.stats['empty_extractions'] > 0:
            print("   ‚Ä¢ Fichiers vides d√©tect√©s - V√©rifiez si ce sont des PDF scann√©s")
            print("   ‚Ä¢ Installez tesseract pour l'OCR: brew install tesseract (macOS)")
        
        if not PDF_AVAILABLE:
            print("   ‚Ä¢ Installez PyPDF2: pip install PyPDF2")
        
        if not DOCX_AVAILABLE:
            print("   ‚Ä¢ Installez python-docx: pip install python-docx")
        
        if not OCR_AVAILABLE:
            print("   ‚Ä¢ Installez OCR: pip install pytesseract pillow")
        
        print("="*70)

def main():
    """Fonction principale"""
    tester = ParseTester()
    tester.print_header()
    
    if len(sys.argv) < 2:
        print("\nüöÄ UTILISATION:")
        print("   python test_parsing.py <fichier>          # Test d'un fichier")
        print("   python test_parsing.py <dossier>          # Test d'un dossier")
        print("\nüìù EXEMPLES:")
        print("   python test_parsing.py cv_test.pdf")
        print("   python test_parsing.py ~/Desktop/CV\\ TEST/")
        print("   python test_parsing.py ~/Desktop/FDP\\ TEST/")
        return
    
    target_path = sys.argv[1]
    
    # Expansion du tilde (~)
    if target_path.startswith('~'):
        target_path = os.path.expanduser(target_path)
    
    if os.path.isfile(target_path):
        # Test d'un seul fichier
        tester.test_single_file(target_path)
    elif os.path.isdir(target_path):
        # Test d'un dossier
        tester.test_directory(target_path)
    else:
        print(f"‚ùå Chemin non valide: {target_path}")
        return
    
    tester.print_summary()

if __name__ == "__main__":
    main()
