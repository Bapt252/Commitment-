# Configuration Logstash pour les logs Nexten
input {
  beats {
    port => 5044
  }
  
  # Input direct depuis les containers Docker
  tcp {
    port => 5000
    codec => json_lines
    tags => ["docker", "nexten"]
  }
  
  # Input depuis les fichiers de log
  file {
    path => "/var/log/nexten/*.log"
    start_position => "beginning"
    codec => json
    tags => ["file", "nexten"]
  }
}

filter {
  # Parse les logs JSON
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Ajouter un timestamp si absent
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # Parser les logs Uvicorn/FastAPI
  if [logger] =~ /uvicorn/ or [logger] =~ /fastapi/ {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:level} - %{GREEDYDATA:log_message}" 
      }
    }
  }
  
  # Enrichir avec des mÃ©ta-donnÃ©es
  mutate {
    add_field => {
      "[@metadata][index]" => "nexten-logs-%{+YYYY.MM.dd}"
      "environment" => "${ENVIRONMENT:development}"
    }
  }
  
  # Anonymiser les informations sensibles
  if [message] =~ /api_key|password|token|secret/ {
    mutate {
      gsub => [
        "message", "(['\"])(api_key|password|token|secret)(['\"]:\s*['\"])[^'\"]*(['\"])", "\1\2\3***\4"
      ]
    }
  }
  
  # GÃ©olocalisation des IPs si disponible
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Parser les erreurs Python
  if [level] == "ERROR" and [message] =~ /Traceback/ {
    multiline {
      pattern => "^Traceback"
      what => "previous"
      negate => true
    }
  }
}

output {
  # Sortie vers Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index]}"
    template_name => "nexten-logs"
    template_pattern => "nexten-logs-*"
    template => "/usr/share/logstash/templates/nexten-logs.json"
  }
  
  # Debug output (optionnel)
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }
  
  # Alertes critiques vers webhook
  if [level] == "CRITICAL" or [level] == "FATAL" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "alerts" => [
          {
            "labels" => {
              "alertname" => "CriticalLogAlert",
              "severity" => "critical",
              "service" => "%{service}",
              "environment" => "%{environment}"
            },
            "annotations" => {
              "summary" => "Critical log message detected",
              "description" => "%{message}"
            }
          }
        ]
      }
    }
  }
}