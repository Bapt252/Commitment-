/**
 * Script de test pour v√©rifier le fonctionnement du job parser corrig√©
 * √Ä ex√©cuter dans la console du navigateur sur la page client-questionnaire.html
 */

async function testJobParser() {
    console.log('üß™ D√©but des tests du job parser...');
    
    // Test 1: V√©rifier que l'API est charg√©e
    console.log('\n=== Test 1: V√©rification de l\'API ===');
    
    if (window.JobParserAPI) {
        console.log('‚úÖ window.JobParserAPI est disponible');
        
        // Cr√©er une instance de test
        const testAPI = new window.JobParserAPI({
            apiUrl: 'http://localhost:5055/api/parse-job',
            debug: true
        });
        
        console.log('‚úÖ Instance JobParserAPI cr√©√©e avec succ√®s');
    } else {
        console.error('‚ùå window.JobParserAPI non trouv√©e');
        return;
    }
    
    // Test 2: V√©rifier que l'UI est initialis√©e
    console.log('\n=== Test 2: V√©rification de l\'UI ===');
    
    if (window.JobParsingUI) {
        console.log('‚úÖ window.JobParsingUI est disponible');
        
        if (window.JobParsingUI.jobParserInstance) {
            const instance = window.JobParsingUI.jobParserInstance();
            if (instance) {
                console.log('‚úÖ Instance JobParser UI initialis√©e');
            } else {
                console.warn('‚ö†Ô∏è Instance JobParser UI non initialis√©e');
            }
        }
    } else {
        console.error('‚ùå window.JobParsingUI non trouv√©e');
    }
    
    // Test 3: V√©rifier la disponibilit√© du backend
    console.log('\n=== Test 3: Test de connexion backend ===');
    
    try {
        const response = await fetch('http://localhost:5055/api/health');
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Backend disponible:', data);
        } else {
            console.warn('‚ö†Ô∏è Backend r√©pond mais avec erreur:', response.status);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Backend non accessible:', error.message);
        console.log('üí° Le parser local devrait fonctionner en fallback');
    }
    
    // Test 4: Test d'analyse de texte simple
    console.log('\n=== Test 4: Analyse de texte test ===');
    
    const testText = `
    FICHE DE POSTE
    
    Intitul√©: D√©veloppeur JavaScript Senior
    Entreprise: TechCorp
    Lieu: Paris 75001
    Contrat: CDI
    Salaire: 45-55K‚Ç¨ selon exp√©rience
    
    Exp√©rience requise: 3-5 ans en d√©veloppement web
    
    Comp√©tences:
    - JavaScript ES6+
    - React.js
    - Node.js
    - Git
    - SQL
    
    Missions:
    - D√©veloppement d'applications web modernes
    - Collaboration avec l'√©quipe produit
    - Code review et mentoring junior
    
    Avantages:
    - T√©l√©travail 2j/semaine
    - Tickets restaurant
    - Mutuelle
    `;
    
    if (window.JobParsingUI && window.JobParsingUI.jobParserInstance) {
        const instance = window.JobParsingUI.jobParserInstance();
        if (instance) {
            try {
                console.log('üîç Analyse du texte de test...');
                const result = await instance.parseJobText(testText);
                console.log('‚úÖ R√©sultat de l\'analyse:', result);
                
                // V√©rifier que les donn√©es ne sont pas g√©n√©riques
                if (result.title && result.title !== 'Comptable Auxiliaire') {
                    console.log('‚úÖ Titre extrait correctement:', result.title);
                } else {
                    console.warn('‚ö†Ô∏è Titre g√©n√©rique d√©tect√©, possible probl√®me');
                }
                
                if (result.skills && result.skills.length > 0) {
                    console.log('‚úÖ Comp√©tences extraites:', result.skills);
                } else {
                    console.warn('‚ö†Ô∏è Aucune comp√©tence extraite');
                }
                
            } catch (error) {
                console.error('‚ùå Erreur lors de l\'analyse:', error);
            }
        }
    }
    
    // Test 5: V√©rifier les √©l√©ments DOM
    console.log('\n=== Test 5: V√©rification des √©l√©ments DOM ===');
    
    const elements = {
        'recruitment-yes': document.getElementById('recruitment-yes'),
        'job-parsing-section': document.getElementById('job-parsing-section'),
        'job-description-text': document.getElementById('job-description-text'),
        'analyze-job-text': document.getElementById('analyze-job-text'),
        'job-info-container': document.getElementById('job-info-container')
    };
    
    Object.entries(elements).forEach(([name, element]) => {
        if (element) {
            console.log(`‚úÖ √âl√©ment trouv√©: ${name}`);
        } else {
            console.warn(`‚ö†Ô∏è √âl√©ment manquant: ${name}`);
        }
    });
    
    // Test 6: Simuler le workflow complet
    console.log('\n=== Test 6: Simulation du workflow ===');
    
    const recruitmentYes = document.getElementById('recruitment-yes');
    const jobParsingSection = document.getElementById('job-parsing-section');
    
    if (recruitmentYes && jobParsingSection) {
        console.log('üìù Simulation: s√©lection "Oui" pour recrutement...');
        
        // Simuler le clic sur "Oui"
        recruitmentYes.checked = true;
        recruitmentYes.dispatchEvent(new Event('change'));
        
        // V√©rifier que la section appara√Æt
        setTimeout(() => {
            if (jobParsingSection.classList.contains('active')) {
                console.log('‚úÖ Section de parsing affich√©e correctement');
            } else {
                console.warn('‚ö†Ô∏è Section de parsing non affich√©e');
            }
        }, 100);
    }
    
    console.log('\nüéâ Tests termin√©s !');
    console.log('\nüìã R√©sum√©:');
    console.log('- V√©rifiez les ‚úÖ pour les tests r√©ussis');
    console.log('- Corrigez les ‚ùå pour les erreurs critiques');
    console.log('- Examinez les ‚ö†Ô∏è pour les avertissements');
}

// Test rapide de l'API
async function quickAPITest() {
    console.log('‚ö° Test rapide de l\'API...');
    
    if (!window.JobParserAPI) {
        console.error('‚ùå JobParserAPI non disponible');
        return;
    }
    
    const api = new window.JobParserAPI({
        apiUrl: 'http://localhost:5055/api/parse-job',
        debug: true
    });
    
    const simpleText = "Recherche d√©veloppeur React avec 2 ans d'exp√©rience minimum";
    
    try {
        const result = await api.parseJobText(simpleText);
        console.log('‚úÖ Test rapide r√©ussi:', result);
        return true;
    } catch (error) {
        console.error('‚ùå Test rapide √©chou√©:', error);
        return false;
    }
}

// Test de connectivit√© backend
async function testBackendConnectivity() {
    console.log('üåê Test de connectivit√© backend...');
    
    try {
        // Test health check
        const healthResponse = await fetch('http://localhost:5055/api/health');
        if (healthResponse.ok) {
            console.log('‚úÖ Health check r√©ussi');
        }
        
        // Test endpoint principal
        const formData = new FormData();
        formData.append('text', 'Test de connectivit√©');
        
        const parseResponse = await fetch('http://localhost:5055/api/parse-job', {
            method: 'POST',
            body: formData
        });
        
        if (parseResponse.ok) {
            const data = await parseResponse.json();
            console.log('‚úÖ Endpoint de parsing accessible:', data);
        } else {
            console.warn('‚ö†Ô∏è Endpoint de parsing r√©pond avec erreur:', parseResponse.status);
        }
        
    } catch (error) {
        console.error('‚ùå Backend non accessible:', error.message);
        console.log('üí° Conseil: D√©marrez le backend avec "python job_parser_api.py"');
    }
}

// Commandes disponibles dans la console
console.log('üîß Commandes de test disponibles:');
console.log('- testJobParser() : Test complet');
console.log('- quickAPITest() : Test rapide de l\'API');
console.log('- testBackendConnectivity() : Test de connectivit√© backend');

// Export pour utilisation dans la console
window.testJobParser = testJobParser;
window.quickAPITest = quickAPITest;
window.testBackendConnectivity = testBackendConnectivity;
