#!/bin/bash
# üöÄ PROMPT 2: Script de d√©ploiement Parsers Ultra v2.0
# SuperSmartMatch V2 - D√©ploiement production avec streaming temps r√©el

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_FILE="/tmp/deploy-ultra-$(date +%Y%m%d-%H%M%S).log"
BACKUP_DIR="/tmp/backup-$(date +%Y%m%d-%H%M%S)"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a "$LOG_FILE"
}

log_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}" | tee -a "$LOG_FILE"
}

# Banner
show_banner() {
    echo -e "${PURPLE}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    üöÄ SuperSmartMatch V2 - Parsers Ultra v2.0 Deploy       ‚ïë
‚ïë                                                              ‚ïë
‚ïë    PROMPT 2: Streaming temps r√©el + IA + WebSocket          ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rification des variables d'environnement
    local required_vars=(
        "OPENAI_API_KEY"
        "POSTGRES_PASSWORD"
        "REDIS_PASSWORD"
        "JWT_SECRET"
        "GRAFANA_ADMIN_PASSWORD"
    )
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            log_error "Variable d'environnement $var manquante"
            exit 1
        fi
    done
    
    log_success "Pr√©requis valid√©s"
}

# Sauvegarde de l'√©tat actuel
backup_current_state() {
    log "üíæ Sauvegarde de l'√©tat actuel..."
    
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarde des volumes Docker
    if docker volume ls | grep -q "supersmartmatch"; then
        log "Sauvegarde des volumes Docker..."
        docker run --rm -v postgres_data:/source -v "$BACKUP_DIR":/backup alpine tar czf /backup/postgres_data.tar.gz -C /source .
        docker run --rm -v redis_data:/source -v "$BACKUP_DIR":/backup alpine tar czf /backup/redis_data.tar.gz -C /source .
        docker run --rm -v grafana_data:/source -v "$BACKUP_DIR":/backup alpine tar czf /backup/grafana_data.tar.gz -C /source .
    fi
    
    # Sauvegarde de la configuration
    cp docker-compose.production.yml "$BACKUP_DIR/" 2>/dev/null || true
    
    log_success "Sauvegarde cr√©√©e dans $BACKUP_DIR"
}

# Construction des images Docker
build_images() {
    log "üî® Construction des images Docker Ultra..."
    
    cd "$PROJECT_ROOT"
    
    # CV Parser Ultra
    log "Construction CV Parser Ultra..."
    docker build -t supersmartmatch/cv-parser-ultra:v2.0 \
        -f services/cv-parser-ultra/Dockerfile \
        services/cv-parser-ultra/
    
    # Job Parser Ultra  
    log "Construction Job Parser Ultra..."
    docker build -t supersmartmatch/job-parser-ultra:v2.0 \
        -f services/job-parser-ultra/Dockerfile \
        services/job-parser-ultra/
    
    log_success "Images Docker construites"
}

# Validation des images
validate_images() {
    log "üîç Validation des images Docker..."
    
    local images=(
        "supersmartmatch/cv-parser-ultra:v2.0"
        "supersmartmatch/job-parser-ultra:v2.0"
    )
    
    for image in "${images[@]}"; do
        if ! docker images | grep -q "$image"; then
            log_error "Image $image manquante"
            exit 1
        fi
        
        # Test basic de l'image
        log "Test de l'image $image..."
        docker run --rm "$image" python -c "print('Image OK')" || {
            log_error "Test de l'image $image √©chou√©"
            exit 1
        }
    done
    
    log_success "Images valid√©es"
}

# Arr√™t des anciens services
stop_old_services() {
    log "‚èπÔ∏è  Arr√™t des anciens services..."
    
    cd "$PROJECT_ROOT"
    
    # Arr√™t gracieux
    if docker-compose -f docker-compose.production.yml ps | grep -q "Up"; then
        log "Arr√™t des services existants..."
        docker-compose -f docker-compose.production.yml down --timeout 30
    fi
    
    log_success "Anciens services arr√™t√©s"
}

# D√©ploiement des services Ultra
deploy_ultra_services() {
    log "üöÄ D√©ploiement des services Ultra..."
    
    cd "$PROJECT_ROOT"
    
    # Variables d'environnement pour Ultra
    export COMPOSE_PROJECT_NAME="supersmartmatch-ultra"
    export COMPOSE_FILE="docker-compose.ultra.yml"
    
    # D√©marrage de l'infrastructure de base d'abord
    log "D√©marrage de l'infrastructure..."
    docker-compose up -d postgres redis minio
    
    # Attendre que l'infrastructure soit pr√™te
    log "Attente de l'infrastructure..."
    sleep 30
    
    # D√©marrage des services de monitoring
    log "D√©marrage du monitoring..."
    docker-compose up -d prometheus grafana
    
    # Attendre monitoring
    sleep 15
    
    # D√©marrage des parsers Ultra
    log "D√©marrage des parsers Ultra..."
    docker-compose up -d cv-parser-ultra job-parser-ultra
    
    # Attendre parsers
    sleep 20
    
    # D√©marrage des autres services
    log "D√©marrage des services restants..."
    docker-compose up -d
    
    log_success "Services Ultra d√©ploy√©s"
}

# Tests de sant√©
health_checks() {
    log "üè• Tests de sant√© des services..."
    
    local services=(
        "http://localhost:5051/health:CV Parser Ultra"
        "http://localhost:5053/health:Job Parser Ultra" 
        "http://localhost:5052/health:Matching Service"
        "http://localhost:5050/health:API Gateway"
        "http://localhost:3001/api/health:Grafana"
        "http://localhost:9091/-/healthy:Prometheus"
    )
    
    local max_attempts=30
    local attempt=1
    
    for service_info in "${services[@]}"; do
        IFS=':' read -r url name <<< "$service_info"
        
        log "Test de sant√©: $name..."
        attempt=1
        
        while [[ $attempt -le $max_attempts ]]; do
            if curl -sf "$url" >/dev/null 2>&1; then
                log_success "$name est en bonne sant√©"
                break
            fi
            
            if [[ $attempt -eq $max_attempts ]]; then
                log_error "$name ne r√©pond pas apr√®s $max_attempts tentatives"
                return 1
            fi
            
            log "Tentative $attempt/$max_attempts pour $name..."
            sleep 5
            ((attempt++))
        done
    done
    
    log_success "Tous les services sont en bonne sant√©"
}

# Tests fonctionnels des parsers Ultra
test_parsers_functionality() {
    log "üß™ Tests fonctionnels des parsers Ultra..."
    
    # Test CV Parser Ultra avec WebSocket
    log "Test CV Parser Ultra..."
    local cv_test_response=$(curl -s -X POST \
        -F "file=@test-data/sample-cv.pdf" \
        http://localhost:5051/v2/parse/cv/stream)
    
    if echo "$cv_test_response" | grep -q "task_id"; then
        log_success "CV Parser Ultra r√©pond correctement"
    else
        log_error "CV Parser Ultra ne r√©pond pas correctement"
        return 1
    fi
    
    # Test Job Parser Ultra avec WebSocket
    log "Test Job Parser Ultra..."
    local job_test_response=$(curl -s -X POST \
        -F "file=@test-data/sample-job.txt" \
        http://localhost:5053/v2/parse/job/stream)
    
    if echo "$job_test_response" | grep -q "task_id"; then
        log_success "Job Parser Ultra r√©pond correctement"
    else
        log_error "Job Parser Ultra ne r√©pond pas correctement"
        return 1
    fi
    
    log_success "Tests fonctionnels r√©ussis"
}

# V√©rification des m√©triques
verify_metrics() {
    log "üìä V√©rification des m√©triques..."
    
    # V√©rifier que Prometheus collecte les m√©triques des parsers Ultra
    local prometheus_url="http://localhost:9091"
    
    # M√©triques CV Parser Ultra
    if curl -s "$prometheus_url/api/v1/query?query=cv_parsing_requests_total" | grep -q "success"; then
        log_success "M√©triques CV Parser Ultra collect√©es"
    else
        log_warning "M√©triques CV Parser Ultra non trouv√©es (normal au d√©marrage)"
    fi
    
    # M√©triques Job Parser Ultra
    if curl -s "$prometheus_url/api/v1/query?query=job_parsing_requests_total" | grep -q "success"; then
        log_success "M√©triques Job Parser Ultra collect√©es"
    else
        log_warning "M√©triques Job Parser Ultra non trouv√©es (normal au d√©marrage)"
    fi
    
    log_success "V√©rification des m√©triques termin√©e"
}

# Configuration post-d√©ploiement
post_deployment_setup() {
    log "‚öôÔ∏è  Configuration post-d√©ploiement..."
    
    # Import des dashboards Grafana
    log "Import des dashboards Grafana Ultra..."
    sleep 10  # Attendre que Grafana soit compl√®tement d√©marr√©
    
    # Les dashboards sont automatiquement provisionn√©s via les volumes
    log_success "Dashboards Grafana configur√©s"
    
    # Configuration des alertes
    log "Configuration des alertes..."
    # Les r√®gles d'alertes sont d√©j√† charg√©es via prometheus-ultra.yml
    log_success "Alertes configur√©es"
    
    log_success "Configuration post-d√©ploiement termin√©e"
}

# Affichage du statut final
show_final_status() {
    log "üìã Statut final du d√©ploiement..."
    
    echo ""
    echo -e "${GREEN}üéâ D√âPLOIEMENT ULTRA v2.0 TERMIN√â AVEC SUCC√àS! üéâ${NC}"
    echo ""
    echo -e "${BLUE}Services accessibles:${NC}"
    echo -e "  üöÄ API Gateway:           http://localhost:5050"
    echo -e "  ‚ö° CV Parser Ultra:       http://localhost:5051"
    echo -e "  üéØ Job Parser Ultra:      http://localhost:5053"
    echo -e "  üîÑ Matching Service:      http://localhost:5052"
    echo -e "  üìä Grafana Ultra:         http://localhost:3001 (admin/admin)"
    echo -e "  üìà Prometheus:            http://localhost:9091"
    echo -e "  üíæ MinIO:                 http://localhost:9001"
    echo ""
    echo -e "${YELLOW}Fonctionnalit√©s Ultra v2.0:${NC}"
    echo -e "  ‚úÖ Streaming WebSocket temps r√©el"
    echo -e "  ‚úÖ Parsing IA avec OpenAI GPT-4"
    echo -e "  ‚úÖ Validation interactive"
    echo -e "  ‚úÖ Fallback manuel intelligent"
    echo -e "  ‚úÖ M√©triques Prometheus d√©taill√©es"
    echo -e "  ‚úÖ Support multi-formats (PDF, DOCX, JPG, PNG, HTML)"
    echo -e "  ‚úÖ Cache Redis ultra-performant"
    echo -e "  ‚úÖ OCR int√©gr√© pour images"
    echo ""
    echo -e "${PURPLE}Logs de d√©ploiement: $LOG_FILE${NC}"
    echo -e "${PURPLE}Sauvegarde: $BACKUP_DIR${NC}"
    echo ""
}

# Fonction de rollback
rollback() {
    log_error "üîÑ Rollback en cours..."
    
    # Arr√™t des services Ultra
    docker-compose -f docker-compose.ultra.yml down --timeout 30
    
    # Restauration des donn√©es si n√©cessaire
    if [[ -d "$BACKUP_DIR" ]]; then
        log "Restauration des donn√©es..."
        # Restauration des volumes
        docker run --rm -v postgres_data:/target -v "$BACKUP_DIR":/backup alpine tar xzf /backup/postgres_data.tar.gz -C /target
        docker run --rm -v redis_data:/target -v "$BACKUP_DIR":/backup alpine tar xzf /backup/redis_data.tar.gz -C /target
        docker run --rm -v grafana_data:/target -v "$BACKUP_DIR":/backup alpine tar xzf /backup/grafana_data.tar.gz -C /target
    fi
    
    # Red√©marrage des anciens services
    if [[ -f "$BACKUP_DIR/docker-compose.production.yml" ]]; then
        cp "$BACKUP_DIR/docker-compose.production.yml" docker-compose.production.yml
        docker-compose -f docker-compose.production.yml up -d
    fi
    
    log_success "Rollback termin√©"
}

# Gestion des erreurs
trap 'log_error "Erreur d√©tect√©e √† la ligne $LINENO. Arr√™t du d√©ploiement."; rollback; exit 1' ERR

# Main function
main() {
    show_banner
    
    log "üöÄ D√©but du d√©ploiement Ultra v2.0..."
    log "üìù Logs d√©taill√©s: $LOG_FILE"
    
    check_prerequisites
    backup_current_state
    build_images
    validate_images
    stop_old_services
    deploy_ultra_services
    health_checks
    test_parsers_functionality
    verify_metrics
    post_deployment_setup
    show_final_status
    
    log_success "üéâ D√©ploiement Ultra v2.0 termin√© avec succ√®s!"
}

# Gestion des arguments
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "rollback")
        rollback
        ;;
    "health")
        health_checks
        ;;
    "test")
        test_parsers_functionality
        ;;
    *)
        echo "Usage: $0 {deploy|rollback|health|test}"
        exit 1
        ;;
esac
