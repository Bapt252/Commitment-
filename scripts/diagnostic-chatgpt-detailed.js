// Diagnostic ChatGPT D√©taill√© - Identifier pourquoi l'extraction ne fonctionne pas
// Ce script va diagnostiquer tous les aspects du syst√®me ChatGPT

class ChatGPTDiagnostic {
    constructor() {
        this.results = [];
        this.errors = [];
    }
    
    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = `[${timestamp}] ${type.toUpperCase()}: ${message}`;
        
        if (type === 'error') {
            this.errors.push(logEntry);
            console.error(logEntry);
        } else {
            this.results.push(logEntry);
            console.log(logEntry);
        }
    }
    
    async runFullDiagnostic() {
        console.clear();
        console.log('üîç DIAGNOSTIC CHATGPT D√âTAILL√â - D√âMARRAGE');
        console.log('================================================');
        
        // 1. V√©rifier l'existence des classes et instances
        this.checkClassesAndInstances();
        
        // 2. V√©rifier la configuration API
        this.checkApiConfiguration();
        
        // 3. V√©rifier les √©l√©ments DOM
        this.checkDOMElements();
        
        // 4. V√©rifier les event listeners
        this.checkEventListeners();
        
        // 5. Test de connexion API
        await this.testApiConnection();
        
        // 6. Test d'analyse compl√®te
        await this.testFullAnalysis();
        
        // 7. Afficher le rapport final
        this.displayFinalReport();
    }
    
    checkClassesAndInstances() {
        this.log('=== 1. V√âRIFICATION DES CLASSES ET INSTANCES ===');
        
        // V√©rifier JobParserGPT
        if (window.JobParserGPT) {
            this.log('‚úÖ JobParserGPT classe disponible');
        } else {
            this.log('‚ùå JobParserGPT classe MANQUANTE', 'error');
        }
        
        // V√©rifier JobParserUIIntegration
        if (window.JobParserUIIntegration) {
            this.log('‚úÖ JobParserUIIntegration classe disponible');
        } else {
            this.log('‚ùå JobParserUIIntegration classe MANQUANTE', 'error');
        }
        
        // V√©rifier l'instance ChatGPT
        if (window.jobParsingUIGPT) {
            this.log('‚úÖ Instance jobParsingUIGPT cr√©√©e');
            
            if (window.jobParsingUIGPT.gptParser) {
                this.log('‚úÖ Parser GPT initialis√©');
            } else {
                this.log('‚ùå Parser GPT NON initialis√©', 'error');
            }
        } else {
            this.log('‚ùå Instance jobParsingUIGPT MANQUANTE', 'error');
        }
        
        // V√©rifier l'ancien syst√®me
        if (window.jobParsingUI) {
            this.log('‚ö†Ô∏è Ancien syst√®me jobParsingUI encore pr√©sent (conflit possible)', 'error');
        } else {
            this.log('‚úÖ Ancien syst√®me correctement d√©sactiv√©');
        }
    }
    
    checkApiConfiguration() {
        this.log('=== 2. V√âRIFICATION CONFIGURATION API ===');
        
        // V√©rifier le champ de saisie de cl√© API
        const apiKeyInput = document.getElementById('openai-api-key');
        if (apiKeyInput) {
            this.log('‚úÖ Champ cl√© API trouv√©');
            
            if (apiKeyInput.value && apiKeyInput.value.trim().length > 0) {
                this.log('‚úÖ Cl√© API saisie dans le champ');
                this.log(`üìù Longueur cl√©: ${apiKeyInput.value.length} caract√®res`);
                
                if (apiKeyInput.value.startsWith('sk-')) {
                    this.log('‚úÖ Format cl√© API correct (commence par sk-)');
                } else {
                    this.log('‚ùå Format cl√© API incorrect (doit commencer par sk-)', 'error');
                }
            } else {
                this.log('‚ùå Aucune cl√© API saisie', 'error');
            }
        } else {
            this.log('‚ùå Champ cl√© API introuvable', 'error');
        }
        
        // V√©rifier le stockage local
        try {
            const storedKey = localStorage.getItem('openai_api_key_jobparser');
            if (storedKey) {
                this.log('‚úÖ Cl√© API trouv√©e dans localStorage');
                this.log(`üìù Longueur cl√© stock√©e: ${storedKey.length} caract√®res`);
            } else {
                this.log('‚ùå Aucune cl√© API en localStorage', 'error');
            }
        } catch (e) {
            this.log('‚ùå Erreur acc√®s localStorage: ' + e.message, 'error');
        }
        
        // V√©rifier la configuration du parser
        if (window.jobParsingUIGPT && window.jobParsingUIGPT.gptParser) {
            const hasApiKey = window.jobParsingUIGPT.gptParser.hasApiKey();
            if (hasApiKey) {
                this.log('‚úÖ Parser confirme avoir une cl√© API');
            } else {
                this.log('‚ùå Parser n\'a pas de cl√© API', 'error');
            }
        }
    }
    
    checkDOMElements() {
        this.log('=== 3. V√âRIFICATION √âL√âMENTS DOM ===');
        
        const elementsToCheck = [
            'job-drop-zone',
            'job-file-input', 
            'job-description-text',
            'analyze-job-text',
            'analysis-loader',
            'job-info-container',
            'gpt-config-section'
        ];
        
        elementsToCheck.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                this.log(`‚úÖ ${id} trouv√©`);
            } else {
                this.log(`‚ùå ${id} MANQUANT`, 'error');
            }
        });
        
        // V√©rifier les champs de r√©sultats
        const resultFields = [
            'job-title-value',
            'job-contract-value', 
            'job-location-value',
            'job-skills-value'
        ];
        
        resultFields.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                this.log(`‚úÖ Champ r√©sultat ${id}: "${element.textContent}"`);
            } else {
                this.log(`‚ùå Champ r√©sultat ${id} MANQUANT`, 'error');
            }
        });
    }
    
    checkEventListeners() {
        this.log('=== 4. V√âRIFICATION EVENT LISTENERS ===');
        
        const analyzeBtn = document.getElementById('analyze-job-text');
        if (analyzeBtn) {
            // Tester si le bouton r√©pond au clic
            this.log('üß™ Test du bouton d\'analyse...');
            
            // Simuler un clic (sans d√©clencher l'analyse)
            const originalHandler = analyzeBtn.onclick;
            let hasHandler = false;
            
            // V√©rifier s'il y a des event listeners
            const listeners = getEventListeners ? getEventListeners(analyzeBtn) : null;
            if (listeners && listeners.click && listeners.click.length > 0) {
                hasHandler = true;
                this.log(`‚úÖ ${listeners.click.length} event listener(s) sur le bouton`);
            }
            
            if (originalHandler) {
                hasHandler = true;
                this.log('‚úÖ Handler onclick d√©tect√©');
            }
            
            if (!hasHandler) {
                this.log('‚ùå Aucun event listener sur le bouton d\'analyse', 'error');
            }
        }
    }
    
    async testApiConnection() {
        this.log('=== 5. TEST CONNEXION API ===');
        
        if (!window.jobParsingUIGPT || !window.jobParsingUIGPT.gptParser) {
            this.log('‚ùå Impossible de tester - Parser non disponible', 'error');
            return;
        }
        
        const parser = window.jobParsingUIGPT.gptParser;
        
        if (!parser.hasApiKey()) {
            this.log('‚ùå Impossible de tester - Cl√© API manquante', 'error');
            return;
        }
        
        try {
            this.log('üîÑ Test de connexion en cours...');
            const result = await parser.testConnection();
            this.log('‚úÖ Test de connexion R√âUSSI');
            this.log(`üìã R√©sultat test: ${JSON.stringify(result, null, 2)}`);
        } catch (error) {
            this.log(`‚ùå Test de connexion √âCHOU√â: ${error.message}`, 'error');
            
            if (error.message.includes('401')) {
                this.log('üí° Erreur 401 = Cl√© API invalide', 'error');
            } else if (error.message.includes('429')) {
                this.log('üí° Erreur 429 = Quota d√©pass√©', 'error');
            } else if (error.message.includes('network')) {
                this.log('üí° Erreur r√©seau - V√©rifiez votre connexion', 'error');
            }
        }
    }
    
    async testFullAnalysis() {
        this.log('=== 6. TEST ANALYSE COMPL√àTE ===');
        
        if (!window.jobParsingUIGPT || !window.jobParsingUIGPT.gptParser) {
            this.log('‚ùå Impossible de tester - Parser non disponible', 'error');
            return;
        }
        
        const parser = window.jobParsingUIGPT.gptParser;
        
        if (!parser.hasApiKey()) {
            this.log('‚ùå Impossible de tester - Cl√© API manquante', 'error');
            return;
        }
        
        const testText = `Poste: D√©veloppeur Full Stack
Entreprise: TechCorp
Localisation: Paris, France  
Type de contrat: CDI
Exp√©rience: 3-5 ans d'exp√©rience
Formation: Master en informatique ou √©quivalent
Comp√©tences techniques: JavaScript, React, Node.js, MongoDB, Git
Missions: 
- D√©veloppement d'applications web modernes
- Collaboration avec l'√©quipe design
- Maintenance et optimisation du code existant
- Participation aux r√©unions techniques
R√©mun√©ration: 50-60k‚Ç¨ selon profil
Avantages: 
- T√©l√©travail hybride 2j/semaine
- Mutuelle prise en charge √† 100%
- Tickets restaurant
- Formation continue`;
        
        try {
            this.log('üîÑ Test d\'analyse en cours...');
            this.log(`üìù Texte test: ${testText.substring(0, 100)}...`);
            
            const result = await parser.parseJobText(testText);
            this.log('‚úÖ Analyse R√âUSSIE');
            this.log(`üìã R√©sultat: ${JSON.stringify(result, null, 2)}`);
            
            // V√©rifier que les donn√©es ne sont pas vides
            const filledFields = Object.keys(result).filter(key => 
                result[key] && result[key].toString().trim() !== '' && result[key] !== 'Non sp√©cifi√©'
            );
            
            this.log(`üìä Champs extraits: ${filledFields.length}/10`);
            filledFields.forEach(field => {
                this.log(`  ‚úÖ ${field}: ${result[field]}`);
            });
            
        } catch (error) {
            this.log(`‚ùå Analyse √âCHOU√âE: ${error.message}`, 'error');
        }
    }
    
    displayFinalReport() {
        console.log('\n');
        console.log('================================================');
        console.log('üìä RAPPORT FINAL DU DIAGNOSTIC');
        console.log('================================================');
        
        if (this.errors.length === 0) {
            console.log('üéâ AUCUNE ERREUR D√âTECT√âE - Le syst√®me devrait fonctionner !');
        } else {
            console.log(`‚ùå ${this.errors.length} ERREUR(S) D√âTECT√âE(S):`);
            this.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }
        
        console.log('\nüí° ACTIONS RECOMMAND√âES:');
        
        if (this.errors.some(e => e.includes('cl√© API'))) {
            console.log('1. üîë Configurer une cl√© API OpenAI valide');
            console.log('   - Aller sur https://platform.openai.com/api-keys');
            console.log('   - Cr√©er une nouvelle cl√© (sk-...)');
            console.log('   - La saisir dans la section bleue de configuration');
        }
        
        if (this.errors.some(e => e.includes('MANQUANT'))) {
            console.log('2. üîÑ Recharger la page pour r√©initialiser les scripts');
        }
        
        if (this.errors.some(e => e.includes('conflit'))) {
            console.log('3. üßπ Nettoyer le cache du navigateur');
        }
        
        console.log('\nüõ†Ô∏è FONCTIONS UTILES:');
        console.log('- diagnoseChatGPTParser() : Diagnostic rapide');
        console.log('- testChatGPTParser() : Test d\'analyse');
        console.log('- window.chatgptDiag.runFullDiagnostic() : Ce diagnostic complet');
    }
}

// Cr√©er l'instance globale
window.chatgptDiag = new ChatGPTDiagnostic();

// Fonction de diagnostic rapide
window.diagnoseChatGPTParser = function() {
    window.chatgptDiag.runFullDiagnostic();
};

console.log('üîç Diagnostic ChatGPT D√©taill√© charg√© !');
console.log('üí° Utilisez diagnoseChatGPTParser() pour lancer le diagnostic complet');
