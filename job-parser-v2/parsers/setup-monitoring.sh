#!/bin/bash

# Script de d√©ploiement du monitoring Prometheus/Grafana
# Session 2 : Setup environnement et outils de d√©veloppement

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier que Docker fonctionne
    if ! docker info &> /dev/null; then
        log_error "Docker n'est pas d√©marr√©"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Cr√©er la structure des dossiers
create_directories() {
    log_info "Cr√©ation de la structure des dossiers..."
    
    # Dossiers de configuration monitoring
    mkdir -p monitoring/{prometheus/{rules},grafana/{provisioning/{datasources,dashboards},dashboards/{system,services,databases,business}},alertmanager}
    
    # Permissions pour Grafana
    sudo chown -R 472:472 monitoring/grafana/ 2>/dev/null || log_warning "Impossible de d√©finir les permissions Grafana (necessaire pour les volumes)"
    
    log_success "Structure des dossiers cr√©√©e"
}

# Cr√©er les fichiers de configuration
create_config_files() {
    log_info "Cr√©ation des fichiers de configuration..."
    
    # Note: Les fichiers ont √©t√© cr√©√©s via les artifacts pr√©c√©dents
    # Ce script assume qu'ils sont d√©j√† en place
    
    # V√©rifier la pr√©sence des fichiers essentiels
    local required_files=(
        "monitoring/prometheus/prometheus.yml"
        "monitoring/prometheus/rules/alert-rules.yml"
        "monitoring/alertmanager/alertmanager.yml"
        "monitoring/grafana/provisioning/datasources/prometheus.yml"
        "monitoring/grafana/provisioning/dashboards/dashboards.yml"
        "docker-compose.monitoring.yml"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "Fichier manquant: $file"
            log_info "Veuillez vous assurer que tous les fichiers de configuration sont en place"
            exit 1
        fi
    done
    
    log_success "Fichiers de configuration v√©rifi√©s"
}

# D√©marrer les services de monitoring
start_monitoring() {
    log_info "D√©marrage des services de monitoring..."
    
    # Arr√™ter les services existants si ils tournent
    log_info "Arr√™t des services existants..."
    docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml down 2>/dev/null || true
    
    # D√©marrer tous les services
    log_info "D√©marrage de tous les services..."
    docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml up -d
    
    log_success "Services de monitoring d√©marr√©s"
}

# V√©rifier que les services sont op√©rationnels
check_services() {
    log_info "V√©rification de l'√©tat des services..."
    
    local services=(
        "prometheus:9090:Prometheus"
        "grafana:3000:Grafana"
        "node-exporter:9100:Node Exporter"
        "cadvisor:8080:cAdvisor"
        "alertmanager:9093:AlertManager"
        "redis-exporter:9121:Redis Exporter"
        "postgres-exporter:9187:Postgres Exporter"
    )
    
    for service_info in "${services[@]}"; do
        IFS=':' read -r service port name <<< "$service_info"
        
        log_info "V√©rification de $name sur le port $port..."
        
        # Attendre que le service soit disponible (timeout 60s)
        local timeout=60
        local count=0
        
        while ! curl -s "http://localhost:$port" >/dev/null 2>&1; do
            sleep 2
            count=$((count + 2))
            
            if [[ $count -ge $timeout ]]; then
                log_warning "$name n'est pas accessible sur le port $port (timeout)"
                break
            fi
        done
        
        if curl -s "http://localhost:$port" >/dev/null 2>&1; then
            log_success "$name est op√©rationnel sur http://localhost:$port"
        fi
    done
}

# Afficher les informations d'acc√®s
show_access_info() {
    log_info "=== INFORMATIONS D'ACC√àS ==="
    echo
    log_success "Monitoring d√©ploy√© avec succ√®s!"
    echo
    echo "üîç Services de monitoring accessibles:"
    echo "  ‚Ä¢ Prometheus:     http://localhost:9090"
    echo "  ‚Ä¢ Grafana:        http://localhost:3001 (admin/admin123)"
    echo "  ‚Ä¢ AlertManager:   http://localhost:9093"
    echo "  ‚Ä¢ Node Exporter:  http://localhost:9100"
    echo "  ‚Ä¢ cAdvisor:       http://localhost:8080"
    echo
    echo "üìä Services m√©tier existants:"
    echo "  ‚Ä¢ API principale: http://localhost:5050"
    echo "  ‚Ä¢ CV Parser:      http://localhost:5051"
    echo "  ‚Ä¢ Job Parser:     http://localhost:5055"
    echo "  ‚Ä¢ Matching API:   http://localhost:5052"
    echo "  ‚Ä¢ Frontend:       http://localhost:3000"
    echo
    echo "üóÑÔ∏è Services de stockage:"
    echo "  ‚Ä¢ Redis Commander: http://localhost:8081"
    echo "  ‚Ä¢ RQ Dashboard:    http://localhost:9181"
    echo "  ‚Ä¢ MinIO Console:   http://localhost:9001 (minioadmin/minioadmin)"
    echo
    log_info "Configuration termin√©e! üéâ"
}

# Fonction d'assistance pour les m√©triques
setup_app_metrics() {
    log_info "=== CONFIGURATION DES M√âTRIQUES APPLICATIVES ==="
    echo
    log_info "Pour activer les m√©triques dans vos services Python:"
    echo
    echo "1. Ajoutez prometheus_client √† vos requirements.txt:"
    echo "   prometheus-client>=0.17.0"
    echo
    echo "2. Int√©grez le middleware de m√©triques (voir cv-parser-service/metrics.py)"
    echo
    echo "3. Red√©marrez vos services pour appliquer les changements:"
    echo "   docker-compose restart cv-parser job-parser matching-api"
    echo
    log_warning "N'oubliez pas d'ajouter l'endpoint /metrics √† vos services!"
}

# Fonction principale
main() {
    echo
    log_info "üöÄ D√©ploiement du monitoring Prometheus/Grafana"
    log_info "Session 2 : Setup environnement et outils de d√©veloppement"
    echo
    
    check_prerequisites
    create_directories
    create_config_files
    start_monitoring
    
    # Attendre un moment pour que les services d√©marrent
    log_info "Attente du d√©marrage des services..."
    sleep 10
    
    check_services
    show_access_info
    setup_app_metrics
    
    echo
    log_success "‚úÖ Session 2 termin√©e avec succ√®s!"
    log_info "Le monitoring Prometheus/Grafana est maintenant op√©rationnel."
}

# Gestion des arguments
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "restart")
        log_info "Red√©marrage des services de monitoring..."
        docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml restart
        ;;
    "stop")
        log_info "Arr√™t des services de monitoring..."
        docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml down
        ;;
    "logs")
        log_info "Logs des services de monitoring..."
        docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml logs -f
        ;;
    "status")
        log_info "√âtat des services..."
        docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml ps
        ;;
    *)
        log_info "Usage: $0 [deploy|restart|stop|logs|status]"
        log_info "  deploy  : D√©ploie le monitoring (d√©faut)"
        log_info "  restart : Red√©marre les services"
        log_info "  stop    : Arr√™te les services"
        log_info "  logs    : Affiche les logs"
        log_info "  status  : Affiche l'√©tat des services"
        ;;
esac