#!/bin/bash

# Script de d√©marrage pour SuperSmartMatch
echo "üöÄ D√©marrage de SuperSmartMatch - Service unifi√© de matching"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# V√©rification de l'environnement
echo -e "${BLUE}üìã V√©rification de l'environnement...${NC}"

# V√©rifier si Python est install√©
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python 3 n'est pas install√©${NC}"
    exit 1
fi

# V√©rifier si pip est install√©
if ! command -v pip3 &> /dev/null; then
    echo -e "${RED}‚ùå pip3 n'est pas install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Python et pip d√©tect√©s${NC}"

# Aller dans le r√©pertoire SuperSmartMatch
cd super-smart-match 2>/dev/null || {
    echo -e "${RED}‚ùå R√©pertoire super-smart-match non trouv√©${NC}"
    echo -e "${YELLOW}üí° Veuillez ex√©cuter ce script depuis la racine du projet${NC}"
    exit 1
}

# Installation des d√©pendances
echo -e "${BLUE}üì¶ Installation des d√©pendances...${NC}"
pip3 install -r requirements.txt

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ D√©pendances install√©es avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Erreur lors de l'installation des d√©pendances${NC}"
    exit 1
fi

# V√©rification des algorithmes disponibles
echo -e "${BLUE}üîç V√©rification des algorithmes...${NC}"

algorithms_found=0

if [ -f "../matching_engine.py" ]; then
    echo -e "${GREEN}‚úÖ Algorithme original trouv√©${NC}"
    algorithms_found=$((algorithms_found + 1))
else
    echo -e "${YELLOW}‚ö†Ô∏è  Algorithme original non trouv√©${NC}"
fi

if [ -f "../matching_engine_enhanced.py" ]; then
    echo -e "${GREEN}‚úÖ Algorithme enhanced trouv√©${NC}"
    algorithms_found=$((algorithms_found + 1))
else
    echo -e "${YELLOW}‚ö†Ô∏è  Algorithme enhanced non trouv√©${NC}"
fi

if [ -f "../my_matching_engine.py" ]; then
    echo -e "${GREEN}‚úÖ Algorithme personnalis√© trouv√©${NC}"
    algorithms_found=$((algorithms_found + 1))
else
    echo -e "${YELLOW}‚ö†Ô∏è  Algorithme personnalis√© non trouv√©${NC}"
fi

if [ -f "../compare_algorithms.py" ]; then
    echo -e "${GREEN}‚úÖ Module de comparaison trouv√©${NC}"
    algorithms_found=$((algorithms_found + 1))
else
    echo -e "${YELLOW}‚ö†Ô∏è  Module de comparaison non trouv√©${NC}"
fi

echo -e "${BLUE}üìä Total: ${algorithms_found} algorithmes d√©tect√©s${NC}"

# Configuration des variables d'environnement
export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/.."
export FLASK_APP=app.py
export FLASK_ENV=development

# Choix du mode de d√©marrage
echo -e "${BLUE}üîß Mode de d√©marrage:${NC}"
echo "1. Mode d√©veloppement (Flask dev server)"
echo "2. Mode production (Gunicorn)"
echo "3. Test de l'API uniquement"

read -p "Choisissez une option (1-3) [1]: " choice
choice=${choice:-1}

case $choice in
    1)
        echo -e "${GREEN}üî• D√©marrage en mode d√©veloppement...${NC}"
        echo -e "${YELLOW}üìç Service disponible sur: http://localhost:5060${NC}"
        echo -e "${YELLOW}üìç API de matching: http://localhost:5060/api/match${NC}"
        echo -e "${YELLOW}üìç Health check: http://localhost:5060/api/health${NC}"
        echo ""
        echo -e "${BLUE}üõë Appuyez sur Ctrl+C pour arr√™ter${NC}"
        echo ""
        python3 app.py
        ;;
    2)
        echo -e "${GREEN}üöÄ D√©marrage en mode production...${NC}"
        echo -e "${YELLOW}üìç Service disponible sur: http://localhost:5060${NC}"
        echo ""
        echo -e "${BLUE}üõë Appuyez sur Ctrl+C pour arr√™ter${NC}"
        echo ""
        gunicorn --bind 0.0.0.0:5060 --workers 4 app:app
        ;;
    3)
        echo -e "${GREEN}üß™ Test de l'API...${NC}"
        python3 -c "
import requests
import json

try:
    response = requests.get('http://localhost:5060/api/health')
    print('‚úÖ API accessible')
    print(json.dumps(response.json(), indent=2))
except:
    print('‚ùå API non accessible - veuillez la d√©marrer d\\'abord')
"
        ;;
    *)
        echo -e "${RED}‚ùå Option invalide${NC}"
        exit 1
        ;;
esac
