#!/usr/bin/env python3
"""
Script FINAL corrig√© pour SuperSmartMatch V2 avec la structure EXACTE attendue
R√©sout TOUS les probl√®mes 422 identifi√©s
"""

import requests
import json
import uuid
from datetime import datetime

# Configuration des endpoints
SUPERSMARTMATCH_V2_URL = "http://localhost:5070"
NEXTEN_URL = "http://localhost:5052"

def test_final_correct_structure():
    """Teste avec la structure FINALE corrig√©e"""
    
    print("üéØ TEST FINAL - Structure EXACTE SuperSmartMatch V2")
    print("=" * 80)
    
    # STRUCTURE FINALE CORRIG√âE
    final_payload = {
        "candidate": {
            "name": "Marie Martin",  # üî• CHANGEMENT: name directement dans candidate
            "email": "marie.martin@email.com",
            "phone": "+33123456789",
            "location": {
                "city": "Lyon",
                "country": "France"
            },
            "skills": ["Python", "FastAPI", "Docker", "PostgreSQL", "Machine Learning"],
            "experience": [
                {
                    "title": "D√©veloppeur Full Stack",
                    "company": "WebCorp",
                    "duration": "2021-2024",
                    "description": "D√©veloppement d'applications web avec Python/FastAPI et React"
                },
                {
                    "title": "D√©veloppeur Junior",
                    "company": "StartupTech", 
                    "duration": "2019-2021",
                    "description": "Premi√®re exp√©rience en d√©veloppement Python"
                }
            ],
            "education": [
                {
                    "degree": "Master Informatique",
                    "school": "Universit√© de Lyon",
                    "year": "2019"
                }
            ]
        },
        "offers": [
            {
                "id": str(uuid.uuid4()),
                "title": "D√©veloppeur Python Senior",
                "company": "Innovation Tech",
                "description": "Nous recherchons un d√©veloppeur Python exp√©riment√© pour rejoindre notre √©quipe de d√©veloppement d'applications web et d'intelligence artificielle.",
                "requirements": ["Python", "FastAPI", "Docker", "PostgreSQL"],
                "salary_range": "50000-70000",
                "contract_type": "CDI",
                "location": {
                    "city": "Paris",
                    "region": "√éle-de-France",
                    "country": "France"
                }
            },
            {
                "id": str(uuid.uuid4()),
                "title": "Lead Developer Python",
                "company": "DataCorp",
                "description": "Poste de lead developer pour diriger une √©quipe de d√©veloppement Python sp√©cialis√©e en machine learning.",
                "requirements": ["Python", "Machine Learning", "Docker", "Leadership"],
                "salary_range": "60000-80000",
                "contract_type": "CDI",
                "location": {
                    "city": "Lyon",
                    "country": "France"
                }
            }
        ]
    }
    
    print(f"üìä Structure FINALE corrig√©e:")
    print(f"   ‚úÖ 'candidate' avec 'name' direct")
    print(f"   ‚úÖ Chaque offer a un 'id' unique")
    print(f"   ‚úÖ Location en format objet")
    print(f"   üìã Candidate: {final_payload['candidate']['name']}")
    print(f"   üìã Email: {final_payload['candidate']['email']}")
    print(f"   üìã Nombre d'offres: {len(final_payload['offers'])}")
    
    try:
        print(f"\nüì§ Envoi requ√™te FINALE √† SuperSmartMatch V2...")
        response = requests.post(
            f"{SUPERSMARTMATCH_V2_URL}/match",
            json=final_payload,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"üì• Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"üéâ SUCC√àS TOTAL ! SuperSmartMatch V2 fonctionne parfaitement !")
            print(f"\nüìà R√©sultats:")
            print(f"Algorithm used: {result.get('algorithm_used', 'N/A')}")
            print(f"Processing time: {result.get('processing_time', 'N/A')} seconds")
            
            if 'matches' in result:
                print(f"\nüéØ Matches trouv√©s:")
                for i, match in enumerate(result['matches'], 1):
                    print(f"  {i}. {match.get('offer_title', match.get('title', 'N/A'))}")
                    print(f"     Score: {match.get('score', 'N/A')}")
                    print(f"     Company: {match.get('company', 'N/A')}")
                    if 'reasons' in match:
                        print(f"     Reasons: {', '.join(match.get('reasons', []))}")
                    print()
            
            # V√©rifier si Nexten est utilis√©
            algorithm_used = result.get('algorithm_used', '')
            if 'nexten' in algorithm_used.lower():
                print(f"üî• PARFAIT ! SuperSmartMatch V2 utilise bien Nexten : {algorithm_used}")
            else:
                print(f"‚ö†Ô∏è  Algorithm utilis√©: {algorithm_used}")
                
            return True, result
            
        elif response.status_code == 422:
            error_detail = response.json()
            print(f"‚ùå Erreur 422 - Champs encore manquants:")
            for error in error_detail.get('detail', []):
                if error.get('type') == 'missing':
                    field_path = '.'.join(map(str, error.get('loc', [])))
                    print(f"   - Manque: {field_path}")
            print(f"\nD√©tail complet: {json.dumps(error_detail, indent=2)}")
            return False, None
        else:
            print(f"‚ùå Erreur {response.status_code}")
            print(f"Response: {response.text[:1000]}")
            return False, None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False, None

def test_minimal_working():
    """Teste avec un payload minimal pour valider la structure exacte"""
    
    print("\nüß™ TEST MINIMAL FINAL - Structure minimale")
    print("=" * 80)
    
    minimal_payload = {
        "candidate": {
            "name": "Test User",  # Direct dans candidate
            "email": "test@example.com",
            "skills": ["Python"]
        },
        "offers": [
            {
                "id": str(uuid.uuid4()),
                "title": "Test Job",
                "company": "Test Company",
                "description": "Test description",
                "location": {
                    "city": "Paris",
                    "country": "France"
                }
            }
        ]
    }
    
    try:
        print(f"üì§ Test structure minimale...")
        response = requests.post(
            f"{SUPERSMARTMATCH_V2_URL}/match",
            json=minimal_payload,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"üì• Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Structure minimale OK !")
            print(f"Algorithm used: {result.get('algorithm_used', 'N/A')}")
            return True
        elif response.status_code == 422:
            error_detail = response.json()
            print(f"‚ùå Erreur 422 - Champs encore manquants:")
            for error in error_detail.get('detail', []):
                if error.get('type') == 'missing':
                    field_path = '.'.join(map(str, error.get('loc', [])))
                    print(f"   - Manque: {field_path}")
            return False
        else:
            print(f"‚ùå Erreur {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def verify_nexten_direct():
    """Test direct de Nexten pour comparison"""
    
    print("\nüîç TEST DIRECT NEXTEN - R√©f√©rence")
    print("=" * 80)
    
    payload = {
        "cv_text": "Marie Martin, d√©veloppeur Python senior avec 5 ans d'exp√©rience en FastAPI, Docker et Machine Learning.",
        "job_description": "D√©veloppeur Python senior pour √©quipe. Comp√©tences: Python, FastAPI, Docker, PostgreSQL."
    }
    
    try:
        response = requests.post(
            f"{NEXTEN_URL}/match",
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Nexten direct - Score: {result.get('score', 'N/A')}")
            print(f"‚úÖ Algorithm: {result.get('algorithm', 'N/A')}")
            print(f"‚úÖ Temps: {result.get('processing_time', 'N/A')} ms")
            return True, result
        else:
            print(f"‚ùå Nexten Error: {response.status_code}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå Nexten Error: {e}")
        return False, None

def generate_final_template():
    """G√©n√®re le template FINAL avec la structure correcte"""
    
    template = {
        "candidate": {
            "name": "Pr√©nom Nom",
            "email": "email@example.com", 
            "phone": "+33123456789",
            "location": {
                "city": "Ville",
                "country": "France"
            },
            "skills": ["Comp√©tence1", "Comp√©tence2"],
            "experience": [
                {
                    "title": "Poste",
                    "company": "Entreprise",
                    "duration": "2020-2023",
                    "description": "Description"
                }
            ],
            "education": [
                {
                    "degree": "Dipl√¥me",
                    "school": "√âcole",
                    "year": "2020"
                }
            ]
        },
        "offers": [
            {
                "id": "REMPLACER_PAR_UUID",
                "title": "Titre du poste",
                "company": "Entreprise",
                "description": "Description du poste",
                "requirements": ["Comp√©tence1", "Comp√©tence2"],
                "salary_range": "40000-60000",
                "contract_type": "CDI",
                "location": {
                    "city": "Ville",
                    "region": "R√©gion",
                    "country": "France"
                }
            }
        ]
    }
    
    template_file = "supersmartmatch_v2_FINAL_template.json"
    with open(template_file, "w", encoding="utf-8") as f:
        json.dump(template, f, indent=2, ensure_ascii=False)
    
    print(f"üìù Template FINAL sauvegard√©: {template_file}")
    return template_file

def main():
    """Fonction principale"""
    print("üöÄ SUPERSMARTMATCH V2 - TEST FINAL STRUCTURE CORRIG√âE")
    print("=" * 80)
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. Test Nexten direct (r√©f√©rence)
    nexten_ok, nexten_result = verify_nexten_direct()
    
    # 2. Test minimal SuperSmartMatch V2
    minimal_ok = test_minimal_working()
    
    # 3. Test complet FINAL
    success, v2_result = test_final_correct_structure()
    
    # 4. G√©n√©rer template final
    template_file = generate_final_template()
    
    # 5. R√©sum√© et comparaison
    print("\n" + "=" * 80)
    print("üìã R√âSUM√â FINAL - SUPERSMARTMATCH V2")
    print("=" * 80)
    
    if success and v2_result:
        print("üéâ VICTOIRE TOTALE ! PROBL√àME 422 R√âSOLU !")
        print("\n‚úÖ Structure payload FINALE identifi√©e:")
        print("   - 'candidate' avec 'name' direct (pas dans personal_info)")
        print("   - 'id' unique pour chaque offer")  
        print("   - 'location' en format objet")
        print("\nüî• SuperSmartMatch V2 vs Nexten Direct:")
        if nexten_ok and nexten_result:
            print(f"   üìä Nexten direct  : Score {nexten_result.get('score', 'N/A')}")
        print(f"   üìä SuperSmartMatch: Algorithm {v2_result.get('algorithm_used', 'N/A')}")
        
        if 'nexten' in v2_result.get('algorithm_used', '').lower():
            print("   üéØ PARFAIT ! SuperSmartMatch V2 utilise bien Nexten !")
        
        print(f"\nüìù Template final: {template_file}")
        print("\nüí° Prochaines √©tapes:")
        print("   1. Mettre √† jour TOUS tes scripts avec cette structure")
        print("   2. Utiliser le template final pour nouveaux tests")
        print("   3. Tester avec vraies donn√©es CV/questionnaires")
        print("   4. Valider performance end-to-end")
    else:
        print("‚ùå Probl√®me en cours de r√©solution")
        print("üí° Progress:")
        print(f"   ‚úÖ Nexten fonctionne: {nexten_ok}")
        print(f"   ‚úÖ Structure minimale: {minimal_ok}")
        print(f"   ‚ùå Structure compl√®te: en cours")
        
        if not success:
            print("\nüîç Actions suivantes:")
            print("   1. Analyser les derniers champs manquants")
            print("   2. Ajuster structure selon erreurs")
            print("   3. Re-tester √©tape par √©tape")

if __name__ == "__main__":
    main()
