version: '3.8'

services:
  # üéØ CV Parser Universal V2.1
  cv-parser:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PARSER_TYPE: cv
    image: supersmartmatch/cv-parser:v2.1
    container_name: cv-parser-universal
    ports:
      - "5051:5051"
    environment:
      - FLASK_ENV=production
      - MAX_CONTENT_LENGTH=52428800
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      - ./cv-parser-v2/parsers:/app/parsers:ro
      - cv_temp:/tmp/cv_parsing
      - logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - supersmartmatch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cv-parser.rule=PathPrefix(/api/parse-cv/)"
      - "traefik.http.services.cv-parser.loadbalancer.server.port=5051"

  # üíº Job Parser Universal V2.1
  job-parser:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PARSER_TYPE: job
    image: supersmartmatch/job-parser:v2.1
    container_name: job-parser-universal
    ports:
      - "5053:5053"
    environment:
      - FLASK_ENV=production
      - MAX_CONTENT_LENGTH=52428800
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      - ./job-parser-v2/parsers:/app/parsers:ro
      - job_temp:/tmp/job_parsing
      - logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5053/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - supersmartmatch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.job-parser.rule=PathPrefix(/api/parse-job)"
      - "traefik.http.services.job-parser.loadbalancer.server.port=5053"

  # üîç API Enhanced V2.1 (optionnel - si pr√©sent)
  api-enhanced:
    image: supersmartmatch/api-enhanced:v2.1
    container_name: api-enhanced-v2.1
    ports:
      - "5055:5055"
    environment:
      - CV_PARSER_URL=http://cv-parser:5051
      - JOB_PARSER_URL=http://job-parser:5053
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/commitment
    depends_on:
      - cv-parser
      - job-parser
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - supersmartmatch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-enhanced.rule=PathPrefix(/api/match/)"
      - "traefik.http.services.api-enhanced.loadbalancer.server.port=5055"

  # üìä Redis Cache
  redis:
    image: redis:7-alpine
    container_name: supersmartmatch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - supersmartmatch
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: supersmartmatch-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=commitment
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - supersmartmatch

  # üìà Monitoring (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: supersmartmatch-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - supersmartmatch
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: supersmartmatch-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - supersmartmatch
    profiles:
      - monitoring

# Volumes persistants
volumes:
  cv_temp:
    driver: local
  job_temp:
    driver: local
  logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# R√©seau isol√©
networks:
  supersmartmatch:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# === UTILISATION ===
#
# D√©marrage complet :
# docker-compose up -d
#
# D√©marrage parsers uniquement :
# docker-compose up -d cv-parser job-parser
#
# D√©marrage avec monitoring :
# docker-compose --profile monitoring up -d
#
# Reconstruction des images :
# docker-compose build --no-cache
#
# Logs en temps r√©el :
# docker-compose logs -f cv-parser job-parser
#
# Test des endpoints :
# curl http://localhost:5051/health
# curl http://localhost:5053/health
#
# Arr√™t des services :
# docker-compose down
#
# Nettoyage complet :
# docker-compose down -v --rmi all
#
# === MONITORING ===
# - Grafana: http://localhost:3000 (admin/admin)
# - Prometheus: http://localhost:9090
# - CV Parser Health: http://localhost:5051/health
# - Job Parser Health: http://localhost:5053/health
#
# === SCALING ===
# docker-compose up -d --scale cv-parser=3 --scale job-parser=2
#
# === PRODUCTION ===
# - Utiliser un reverse proxy (Traefik labels inclus)
# - Configurer SSL/TLS
# - Ajuster les limites de ressources
# - Monitoring et alerting
# - Backup des volumes
