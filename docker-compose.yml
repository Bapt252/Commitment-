version: '3.8'

services:
  # üåü API Gateway Unifi√© - Point d'entr√©e principal (PORT 5050)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      target: production
    image: supersmartmatch/api-gateway:v2.1
    container_name: supersmartmatch-gateway
    ports:
      - "5050:5050"
    environment:
      # Configuration g√©n√©rale
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=info
      
      # Services endpoints
      - CV_PARSER_URL=http://cv-parser:5051
      - JOB_PARSER_URL=http://job-parser:5053
      - MATCHING_SERVICE_URL=http://matching-service:5060
      
      # S√©curit√© JWT
      - JWT_SECRET=${JWT_SECRET:-supersecure-jwt-secret-change-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_HOURS=24
      
      # Infrastructure
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://supersmartmatch:${POSTGRES_PASSWORD:-password}@postgres:5432/supersmartmatch
      
      # Rate limiting
      - RATE_LIMIT_PER_MINUTE=100
      - RATE_LIMIT_BURST=20
      
      # CORS
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000
      
      # Monitoring
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30
    volumes:
      - gateway_logs:/app/logs
      - gateway_temp:/app/temp
    depends_on:
      - redis
      - postgres
      - cv-parser
      - job-parser
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/api/gateway/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - supersmartmatch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=PathPrefix(/api/gateway/)"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=5050"
      - "traefik.http.middlewares.api-gateway-strip.stripprefix.prefixes=/api/gateway"

  # üéØ CV Parser Universal V2.1
  cv-parser:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PARSER_TYPE: cv
    image: supersmartmatch/cv-parser:v2.1
    container_name: cv-parser-universal
    ports:
      - "5051:5051"
    environment:
      - FLASK_ENV=production
      - MAX_CONTENT_LENGTH=52428800
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      - ./cv-parser-v2/parsers:/app/parsers:ro
      - cv_temp:/tmp/cv_parsing
      - logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - supersmartmatch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cv-parser.rule=PathPrefix(/api/parse-cv/)"
      - "traefik.http.services.cv-parser.loadbalancer.server.port=5051"

  # üíº Job Parser Universal V2.1
  job-parser:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PARSER_TYPE: job
    image: supersmartmatch/job-parser:v2.1
    container_name: job-parser-universal
    ports:
      - "5053:5053"
    environment:
      - FLASK_ENV=production
      - MAX_CONTENT_LENGTH=52428800
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      - ./job-parser-v2/parsers:/app/parsers:ro
      - job_temp:/tmp/job_parsing
      - logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5053/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - supersmartmatch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.job-parser.rule=PathPrefix(/api/parse-job)"
      - "traefik.http.services.job-parser.loadbalancer.server.port=5053"

  # ü§ñ Matching Service avec 9 Algorithmes ML (PORT 5060)
  matching-service:
    build:
      context: ../SuperSmartMatch-Service
      dockerfile: Dockerfile
    image: supersmartmatch/matching-service:v2.1
    container_name: matching-service-ml
    ports:
      - "5060:5060"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://supersmartmatch:${POSTGRES_PASSWORD:-password}@postgres:5432/supersmartmatch
      - API_VERSION=v1
      - ML_MODEL_PATH=/app/models
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CACHE_TTL=3600
    volumes:
      - ml_models:/app/models
      - matching_logs:/app/logs
      - matching_cache:/app/cache
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5060/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - supersmartmatch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.matching-service.rule=PathPrefix(/api/v1/match)"
      - "traefik.http.services.matching-service.loadbalancer.server.port=5060"

  # üìä Redis Cache
  redis:
    image: redis:7-alpine
    container_name: supersmartmatch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - supersmartmatch
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: supersmartmatch-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=supersmartmatch
      - POSTGRES_USER=supersmartmatch
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - supersmartmatch
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supersmartmatch"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåê Nginx Load Balancer & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: supersmartmatch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - supersmartmatch
    profiles:
      - production

  # üìà Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: supersmartmatch-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - supersmartmatch
    profiles:
      - monitoring

  # üìä Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: supersmartmatch-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - supersmartmatch
    profiles:
      - monitoring

  # üìß Notification Service (optionnel)
  notification-service:
    image: supersmartmatch/notifications:v2.1
    container_name: notification-service
    ports:
      - "5070:5070"
    environment:
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    depends_on:
      - redis
    networks:
      - supersmartmatch
    profiles:
      - notifications

# Volumes persistants
volumes:
  # API Gateway
  gateway_logs:
    driver: local
  gateway_temp:
    driver: local
  
  # Services de parsing
  cv_temp:
    driver: local
  job_temp:
    driver: local
  logs:
    driver: local
  
  # Matching service
  ml_models:
    driver: local
  matching_logs:
    driver: local
  matching_cache:
    driver: local
  
  # Infrastructure
  redis_data:
    driver: local
  postgres_data:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Nginx
  nginx_logs:
    driver: local

# R√©seau isol√© avec configuration IP
networks:
  supersmartmatch:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# === ARCHITECTURE SuperSmartMatch V2 ===
#
# üåü API Gateway (Port 5050) - Point d'entr√©e unifi√©
# ‚îú‚îÄ‚îÄ üéØ CV Parser (Port 5051) - Parsing de CV universel
# ‚îú‚îÄ‚îÄ üíº Job Parser (Port 5053) - Parsing d'offres d'emploi
# ‚îú‚îÄ‚îÄ ü§ñ Matching Service (Port 5060) - 9 algorithmes ML
# ‚îú‚îÄ‚îÄ üìä Redis (Port 6379) - Cache et sessions
# ‚îî‚îÄ‚îÄ üóÑÔ∏è PostgreSQL (Port 5432) - Base de donn√©es principale
#
# === UTILISATION ===
#
# üöÄ D√©marrage complet :
# docker-compose up -d
#
# üéØ D√©marrage core services uniquement :
# docker-compose up -d api-gateway cv-parser job-parser matching-service redis postgres
#
# üìà D√©marrage avec monitoring :
# docker-compose --profile monitoring up -d
#
# üìß D√©marrage avec notifications :
# docker-compose --profile notifications up -d
#
# üè≠ D√©marrage production (avec Nginx) :
# docker-compose --profile production up -d
#
# üîß Reconstruction des images :
# docker-compose build --no-cache
#
# üìã Logs en temps r√©el :
# docker-compose logs -f api-gateway
#
# === ENDPOINTS PRINCIPAUX ===
# 
# üåü API Gateway Unifi√©: http://localhost:5050/api/gateway/
# ‚îú‚îÄ‚îÄ üîê Auth: http://localhost:5050/api/gateway/auth/
# ‚îú‚îÄ‚îÄ üìÑ Parse CV: http://localhost:5050/api/gateway/parse-cv
# ‚îú‚îÄ‚îÄ üíº Parse Job: http://localhost:5050/api/gateway/parse-job
# ‚îú‚îÄ‚îÄ üéØ Matching: http://localhost:5050/api/gateway/match
# ‚îú‚îÄ‚îÄ üè• Health: http://localhost:5050/api/gateway/health
# ‚îú‚îÄ‚îÄ üìä Metrics: http://localhost:5050/api/gateway/metrics
# ‚îî‚îÄ‚îÄ üìö Docs: http://localhost:5050/api/gateway/docs
#
# === ACC√àS DIRECT AUX SERVICES ===
# - CV Parser: http://localhost:5051/health
# - Job Parser: http://localhost:5053/health  
# - Matching Service: http://localhost:5060/health
# - Redis: localhost:6379
# - PostgreSQL: localhost:5432
#
# === MONITORING ===
# - Grafana: http://localhost:3000 (admin/admin)
# - Prometheus: http://localhost:9090
# - API Gateway Metrics: http://localhost:5050/api/gateway/metrics
#
# === SCALING HORIZONTAL ===
# docker-compose up -d --scale cv-parser=3 --scale job-parser=2 --scale matching-service=2
#
# === PRODUCTION ===
# 1. Configurer les variables d'environnement dans .env
# 2. Utiliser SSL/TLS avec Nginx (profile production)
# 3. Configurer monitoring et alerting
# 4. Backup automatique des volumes
# 5. Load balancer externe (HAProxy/Traefik)
#
# === S√âCURIT√â ===
# - JWT Authentication via API Gateway
# - Rate limiting par utilisateur/IP
# - CORS configur√©
# - Health checks sur tous services
# - Logs structur√©s pour audit
#
# === ARR√äT ET NETTOYAGE ===
# docker-compose down
# docker-compose down -v --rmi all  # Nettoyage complet
