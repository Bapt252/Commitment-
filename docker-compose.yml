# Variables d'environnement communes
x-common-env: &common-redis-env
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_DB: 0
  MINIO_ENDPOINT: storage:9000
  MINIO_ACCESS_KEY: minioadmin
  MINIO_SECRET_KEY: minioadmin

services:
  postgres:
    image: postgres:14
    container_name: nexten-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nexten
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - nexten-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nexten"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:alpine
    container_name: nexten-redis
    volumes:
      - redis-data:/data
    networks:
      - nexten-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  storage:
    image: minio/minio
    container_name: nexten-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - nexten-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nexten-api
    ports:
      - "5050:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      storage:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/nexten
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: storage:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      CV_PARSER_SERVICE_URL: http://cv-parser:5000
      JOB_PARSER_SERVICE_URL: http://job-parser:5000
      MATCHING_SERVICE_URL: http://matching-api:5000
      PORT: 5000
    networks:
      - nexten-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Service API de parsing CV - FastAPI
  cv-parser:
    build:
      context: ./cv-parser-service
      dockerfile: Dockerfile
    container_name: nexten-cv-parser
    command: python main.py
    ports:
      - "5051:5000"
    volumes:
      - ./cv-parser-service/logs:/app/logs
      - ./cv-parser-service/temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
      storage:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      PORT: 5000
      MINIO_BUCKET_NAME: cv-files
      USE_MINIO_FOR_FILES: "true"
      STORE_RESULTS_IN_REDIS: "true"
      REDIS_RESULT_TTL: 3600
      OPENAI: ${OPENAI:-}
      OPENAI_MODEL: gpt-4o-mini
      CIRCUIT_BREAKER_ENABLED: "false"
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      MATCHING_API_URL: http://matching-api:5000
    env_file:
      - .env
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Service Worker de parsing CV - RQ
  cv-parser-worker:
    build:
      context: ./cv-parser-service
      dockerfile: Dockerfile
    command: python worker.py
    volumes:
      - ./cv-parser-service/logs:/app/logs
      - ./cv-parser-service/temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
      storage:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      MINIO_BUCKET_NAME: cv-files
      USE_MINIO_FOR_FILES: "true"
      STORE_RESULTS_IN_REDIS: "true"
      REDIS_RESULT_TTL: 3600
      OPENAI: ${OPENAI:-}
      OPENAI_MODEL: gpt-4o-mini
      CIRCUIT_BREAKER_ENABLED: "false"
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      MATCHING_API_URL: http://matching-api:5000
    env_file:
      - .env
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Service API de parsing de fiches de poste - FastAPI
  job-parser:
    build:
      context: ./job-parser-service
      dockerfile: Dockerfile.simple
    container_name: nexten-job-parser
    command: python main.py
    ports:
      - "5053:5000"
    volumes:
      - ./job-parser-service/logs:/app/logs
      - ./job-parser-service/temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
      storage:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      PORT: 5000
      MINIO_BUCKET_NAME: job-files
      USE_MINIO_FOR_FILES: "true"
      STORE_RESULTS_IN_REDIS: "true"
      REDIS_RESULT_TTL: 3600
      OPENAI: ${OPENAI:-}
      OPENAI_MODEL: gpt-4o-mini
      CIRCUIT_BREAKER_ENABLED: "false"
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      MATCHING_API_URL: http://matching-api:5000
    env_file:
      - .env
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Service Worker de parsing de fiches de poste - RQ
  job-parser-worker:
    build:
      context: ./job-parser-service
      dockerfile: Dockerfile.simple
    command: python worker.py
    volumes:
      - ./job-parser-service/logs:/app/logs
      - ./job-parser-service/temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
      storage:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      MINIO_BUCKET_NAME: job-files
      USE_MINIO_FOR_FILES: "true"
      STORE_RESULTS_IN_REDIS: "true"
      REDIS_RESULT_TTL: 3600
      OPENAI: ${OPENAI:-}
      OPENAI_MODEL: gpt-4o-mini
      CIRCUIT_BREAKER_ENABLED: "false"
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      MATCHING_API_URL: http://matching-api:5000
    env_file:
      - .env
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Service API de matching - FastAPI
  matching-api:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    container_name: nexten-matching-api
    command: python main.py
    ports:
      - "5052:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      storage:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      PORT: 5000
      SERVICE_NAME: matching-api
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/nexten
      MINIO_BUCKET_NAME: matching-results
      REDIS_JOB_TIMEOUT: 3600
      REDIS_JOB_TTL: 86400
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-your-secret-key}
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Worker de matching - Haute priorité
  matching-worker-high:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    command: python worker.py
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      SERVICE_NAME: matching-worker-high
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/nexten
      MINIO_BUCKET_NAME: matching-results
      QUEUE_DEFAULT: matching_high
      REDIS_JOB_TIMEOUT: 3600
      REDIS_JOB_TTL: 86400
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-your-secret-key}
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Worker de matching - Priorité standard
  matching-worker-standard:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    command: python worker.py
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      SERVICE_NAME: matching-worker-standard
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/nexten
      MINIO_BUCKET_NAME: matching-results
      QUEUE_DEFAULT: matching_standard
      REDIS_JOB_TIMEOUT: 3600
      REDIS_JOB_TTL: 86400
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-your-secret-key}
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Worker de matching - Traitement en masse
  matching-worker-bulk:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    command: python worker.py
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *common-redis-env
      DEBUG: "false"
      SERVICE_NAME: matching-worker-bulk
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/nexten
      MINIO_BUCKET_NAME: matching-results
      QUEUE_DEFAULT: matching_bulk
      REDIS_JOB_TIMEOUT: 3600
      REDIS_JOB_TTL: 86400
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-your-secret-key}
      MAX_RETRIES: 3
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Interface pour monitorer Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nexten-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - nexten-network
    depends_on:
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Interface pour monitorer RQ
  rq-dashboard:
    image: eoranged/rq-dashboard
    container_name: nexten-rq-dashboard
    ports:
      - "9181:9181"
    environment:
      - RQ_DASHBOARD_REDIS_URL=redis://redis:6379/0
    networks:
      - nexten-network
    depends_on:
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nexten-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5050
      - NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-}
    depends_on:
      - api
    networks:
      - nexten-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

networks:
  nexten-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  minio-data: