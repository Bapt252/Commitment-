version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: nexten-postgres
    environment:
      POSTGRES_DB: nexten
      POSTGRES_USER: nexten_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: profiles,jobs,matching
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-postgres-databases.sh:/docker-entrypoint-initdb.d/init-multiple-postgres-databases.sh
    ports:
      - "5432:5432"
    networks:
      - nexten-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexten_user -d nexten"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: nexten-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexten-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service backend Flask
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nexten-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://nexten_user:${POSTGRES_PASSWORD}@postgres:5432/nexten
      - REDIS_URL=redis://redis:6379/0
      - STORAGE_URL=http://storage:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - ./backend:/app
    ports:
      - "5000:5000"
    networks:
      - nexten-network
    restart: unless-stopped

  # Service de stockage pour les CV (MinIO - compatible S3)
  storage:
    image: minio/minio
    container_name: nexten-storage
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data
    networks:
      - nexten-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API Gateway - Point d'entrée unique
  gateway:
    build: ./gateway
    ports:
      - "8000:8000"
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=development
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./gateway:/app
    depends_on:
      - api
      - user-service
      - cv-parser-service
      - profile-service
      - matching-service
      - job-service
      - notification-service
    networks:
      - nexten-network

  # Service pour la gestion des utilisateurs
  user-service:
    build: ./user-service
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/users
    volumes:
      - ./user-service:/app
    depends_on:
      - mongodb
    networks:
      - nexten-network

  # Service pour le parsing de CV
  cv-parser-service:
    build: ./cv-parser-service
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MONGODB_URI=mongodb://mongodb:27017/cv_data
      - STORAGE_URL=http://storage:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - ./cv-parser-service:/app
    depends_on:
      - mongodb
      - rabbitmq
      - storage
    networks:
      - nexten-network

  # Service pour la gestion des profils
  profile-service:
    build: ./profile-service
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=development
      - POSTGRES_URI=postgresql://nexten_user:${POSTGRES_PASSWORD}@postgres:5432/profiles
    volumes:
      - ./profile-service:/app
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - nexten-network

  # Service pour le matching
  matching-service:
    build: ./matching-service
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=development
      - POSTGRES_URI=postgresql://nexten_user:${POSTGRES_PASSWORD}@postgres:5432/matching
      - MONGODB_URI=mongodb://mongodb:27017/matching_data
    volumes:
      - ./matching-service:/app
    depends_on:
      - postgres
      - mongodb
      - rabbitmq
    networks:
      - nexten-network

  # Service pour la gestion des offres d'emploi
  job-service:
    build: ./job-service
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=development
      - POSTGRES_URI=postgresql://nexten_user:${POSTGRES_PASSWORD}@postgres:5432/jobs
    volumes:
      - ./job-service:/app
    depends_on:
      - postgres
    networks:
      - nexten-network

  # Service pour les notifications
  notification-service:
    build: ./notification-service
    environment:
      - FLASK_APP=app/__init__.py
      - FLASK_ENV=development
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - ./notification-service:/app
    depends_on:
      - rabbitmq
    networks:
      - nexten-network

  # Frontend Next.js
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
    depends_on:
      - gateway
    networks:
      - nexten-network

  # Base de données MongoDB
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - nexten-network

  # RabbitMQ pour la communication entre services
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - nexten-network

volumes:
  mongodb_data:
  postgres_data:
  rabbitmq_data:
  minio_data:

networks:
  nexten-network:
    driver: bridge
