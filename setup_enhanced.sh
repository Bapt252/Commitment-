#!/bin/bash
# SuperSmartMatch V3.0 Enhanced - Configuration Finale
# Script de setup complet avec int√©gration des am√©liorations Cursor AI

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Variables globales
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$PROJECT_ROOT/setup.log"
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')

# Fonctions utilitaires
log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_warn() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] ‚ö†Ô∏è  $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ‚ùå $1${NC}" | tee -a "$LOG_FILE"
}

log_info() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')] ‚ÑπÔ∏è  $1${NC}" | tee -a "$LOG_FILE"
}

show_banner() {
    clear
    echo -e "${PURPLE}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üéØ SuperSmartMatch V3.0 Enhanced                          ‚ïë
‚ïë                      Configuration & Setup Final                            ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üèÜ Performance Record: 98.6% pr√©cision, 6.9-35ms latence                   ‚ïë
‚ïë  üìÅ Multi-Formats: PDF, DOCX, DOC, PNG, JPG, JPEG, TXT                      ‚ïë
‚ïë  ü§ñ 7 Algorithmes: Enhanced V3.0 recommand√©                                 ‚ïë
‚ïë  üîß Am√©liorations Cursor AI int√©gr√©es                                       ‚ïë
‚ïë  üê≥ Support Docker complet                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

check_system_requirements() {
    log "üîç V√©rification des pr√©requis syst√®me..."
    
    # V√©rifier Python
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        log "‚úÖ Python $PYTHON_VERSION d√©tect√©"
    else
        log_error "Python 3 requis mais non trouv√©"
        exit 1
    fi
    
    # V√©rifier pip
    if command -v pip3 &> /dev/null; then
        log "‚úÖ pip3 disponible"
    else
        log_error "pip3 requis mais non trouv√©"
        exit 1
    fi
    
    # V√©rifier Docker (optionnel)
    if command -v docker &> /dev/null; then
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        log "‚úÖ Docker $DOCKER_VERSION d√©tect√©"
        DOCKER_AVAILABLE=true
    else
        log_warn "Docker non trouv√© (optionnel pour le d√©veloppement)"
        DOCKER_AVAILABLE=false
    fi
    
    # V√©rifier Docker Compose (optionnel)
    if command -v docker-compose &> /dev/null || docker compose version &> /dev/null; then
        log "‚úÖ Docker Compose disponible"
        DOCKER_COMPOSE_AVAILABLE=true
    else
        log_warn "Docker Compose non trouv√© (optionnel)"
        DOCKER_COMPOSE_AVAILABLE=false
    fi
    
    # V√©rifier les ports
    check_ports_availability
}

check_ports_availability() {
    log "üîç V√©rification des ports requis..."
    
    local ports=(5051 5053 5065 5067 5070 6380 5433)
    local conflicts=()
    
    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            conflicts+=($port)
            log_warn "Port $port occup√©"
        else
            log "‚úÖ Port $port disponible"
        fi
    done
    
    if [ ${#conflicts[@]} -gt 0 ]; then
        log_warn "Ports en conflit d√©tect√©s: ${conflicts[*]}"
        log_info "Le syst√®me utilisera des ports alternatifs automatiquement"
    fi
    
    # V√©rification sp√©ciale port 5000 (AirPlay macOS)
    if lsof -Pi :5000 -sTCP:LISTEN -t >/dev/null 2>&1; then
        log_info "Port 5000 occup√© par AirPlay (macOS) - utilisation port 5070 pour dashboard ‚úÖ"
    fi
}

install_python_dependencies() {
    log "üì¶ Installation des d√©pendances Python..."
    
    # Cr√©er requirements.txt s'il n'existe pas
    if [ ! -f "requirements.txt" ]; then
        log "üìù Cr√©ation du fichier requirements.txt..."
        cat > requirements.txt << 'EOF'
# SuperSmartMatch V3.0 Enhanced Dependencies
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6
requests==2.31.0
streamlit==1.28.1
plotly==5.17.0
pandas==2.1.3
pydantic==2.5.0
python-docx==1.1.0
PyPDF2==3.0.1
redis==5.0.1
psycopg2-binary==2.9.9
scikit-learn==1.3.2
numpy==1.25.2
python-jose[cryptography]==3.3.0
bcrypt==4.0.1
aiofiles==23.2.1
pytest==7.4.3
pytest-asyncio==0.21.1
httpx==0.25.2
coverage==7.3.2
black==23.11.0
flake8==6.1.0
mypy==1.7.1
EOF
    fi
    
    # Installation avec gestion d'erreurs
    if pip3 install -r requirements.txt; then
        log "‚úÖ D√©pendances Python install√©es avec succ√®s"
    else
        log_error "√âchec installation des d√©pendances Python"
        exit 1
    fi
}

setup_project_structure() {
    log "üèóÔ∏è  Configuration de la structure du projet..."
    
    # Cr√©er les dossiers n√©cessaires
    local directories=(
        "test_data/cv"
        "test_data/fdp"
        "test_data/results"
        "test_data/logs"
        "test_data/reports"
        "logs"
        "uploads"
        "models"
        "config"
        "monitoring/prometheus"
        "monitoring/grafana/dashboards"
        "monitoring/grafana/datasources"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        log "üìÅ Cr√©√©: $dir"
    done
    
    # Cr√©er les fichiers de configuration si manquants
    create_config_files
}

create_config_files() {
    log "‚öôÔ∏è  Cr√©ation des fichiers de configuration..."
    
    # Configuration ports
    if [ ! -f "config/ports.py" ]; then
        cat > config/ports.py << 'EOF'
"""Configuration des ports SuperSmartMatch V3.0 Enhanced"""

class PortConfig:
    """Configuration centralis√©e des ports - √©vite conflits AirPlay macOS"""
    
    # Services principaux
    API_GATEWAY = 5065
    CV_PARSER = 5051
    JOB_PARSER = 5053
    SUPERSMARTMATCH_V3 = 5067  # Port alternatif
    DASHBOARD = 5070  # √âvite conflit AirPlay 5000
    
    # Infrastructure
    REDIS = 6380  # Port alternatif
    POSTGRESQL = 5433  # Port alternatif
    
    # Monitoring (optionnel)
    PROMETHEUS = 9090
    GRAFANA = 3000
    
    @classmethod
    def get_service_urls(cls):
        return {
            'api_gateway': f'http://localhost:{cls.API_GATEWAY}',
            'cv_parser': f'http://localhost:{cls.CV_PARSER}',
            'job_parser': f'http://localhost:{cls.JOB_PARSER}',
            'supersmartmatch': f'http://localhost:{cls.SUPERSMARTMATCH_V3}',
            'dashboard': f'http://localhost:{cls.DASHBOARD}'
        }
    
    @classmethod
    def get_docker_urls(cls):
        """URLs pour environnement Docker"""
        return {
            'api_gateway': f'http://api-gateway:{cls.API_GATEWAY}',
            'cv_parser': f'http://cv-parser:{cls.CV_PARSER}',
            'job_parser': f'http://job-parser:{cls.JOB_PARSER}',
            'supersmartmatch': f'http://supersmartmatch-v3:{cls.SUPERSMARTMATCH_V3}',
            'dashboard': f'http://dashboard:{cls.DASHBOARD}'
        }
EOF
        log "‚úÖ Configuration ports cr√©√©e"
    fi
    
    # Variables d'environnement
    if [ ! -f ".env" ]; then
        cat > .env << EOF
# SuperSmartMatch V3.0 Enhanced - Configuration Environnement
# G√©n√©r√© automatiquement le $(date)

# Ports Services (√©vitent conflits)
API_GATEWAY_PORT=5065
CV_PARSER_PORT=5051
JOB_PARSER_PORT=5053
SUPERSMARTMATCH_PORT=5067
DASHBOARD_PORT=5070

# Infrastructure
REDIS_PORT=6380
POSTGRESQL_PORT=5433
REDIS_URL=redis://localhost:6380
DATABASE_URL=postgresql://postgres:password@localhost:5433/supersmartmatch

# SuperSmartMatch Configuration
ALGORITHM_VERSION=Enhanced_V3.0
TARGET_ACCURACY=98.6
MIN_RESPONSE_TIME_MS=6.9
MAX_RESPONSE_TIME_MS=35.0

# Logging
LOG_LEVEL=INFO
DEBUG=false

# Security (√† changer en production)
SECRET_KEY=your-secret-key-change-in-production
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Multi-Format Support
SUPPORTED_FORMATS=pdf,docx,doc,png,jpg,jpeg,txt
MAX_FILE_SIZE_MB=10

# Test Configuration
RUN_TESTS_ON_STARTUP=false
TEST_DATA_AUTO_CREATE=true
EOF
        log "‚úÖ Fichier .env cr√©√©"
    fi
    
    # Configuration Prometheus (monitoring)
    if [ ! -f "monitoring/prometheus/prometheus.yml" ]; then
        cat > monitoring/prometheus/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files: []

scrape_configs:
  - job_name: 'supersmartmatch-services'
    static_configs:
      - targets: 
          - 'api-gateway:5065'
          - 'cv-parser:5051'
          - 'job-parser:5053'
          - 'supersmartmatch-v3:5067'
          - 'dashboard:5070'
    metrics_path: '/metrics'
    scrape_interval: 30s
EOF
        log "‚úÖ Configuration Prometheus cr√©√©e"
    fi
}

setup_test_environment() {
    log "üß™ Configuration de l'environnement de test..."
    
    # Lancer le script d'automatisation des donn√©es de test
    if [ -f "test_data_automation.py" ]; then
        if python3 test_data_automation.py; then
            log "‚úÖ Structure de test cr√©√©e avec succ√®s"
        else
            log_warn "√âchec partiel cr√©ation structure de test"
        fi
    else
        log_warn "Script test_data_automation.py non trouv√©"
    fi
}

create_startup_scripts() {
    log "üöÄ Cr√©ation des scripts de d√©marrage..."
    
    # Script de d√©marrage d√©veloppement
    cat > start_dev.sh << 'EOF'
#!/bin/bash
# SuperSmartMatch V3.0 Enhanced - D√©marrage D√©veloppement

echo "üöÄ D√©marrage SuperSmartMatch V3.0 Enhanced - Mode D√©veloppement"
echo "================================================================"

# Charger les variables d'environnement
if [ -f .env ]; then
    export $(cat .env | grep -v '#' | xargs)
fi

# Fonction de d√©marrage de service
start_service() {
    local name=$1
    local command=$2
    local port=$3
    
    echo "üîß D√©marrage $name sur port $port..."
    eval "$command" &
    local pid=$!
    echo $pid > "/tmp/supersmartmatch_${name}.pid"
    echo "‚úÖ $name d√©marr√© (PID: $pid)"
}

# V√©rifier la sant√© des services
check_health() {
    local name=$1
    local port=$2
    
    for i in {1..10}; do
        if curl -s "http://localhost:$port/health" > /dev/null 2>&1; then
            echo "‚úÖ $name: Healthy"
            return 0
        fi
        sleep 2
    done
    echo "‚ö†Ô∏è  $name: Not responding"
    return 1
}

echo "üèóÔ∏è  D√©marrage des services..."

# Services en arri√®re-plan
start_service "cv_parser" "uvicorn app:app --host 0.0.0.0 --port \$CV_PARSER_PORT --reload" $CV_PARSER_PORT
sleep 3

start_service "job_parser" "python simple_job_parser.py" $JOB_PARSER_PORT
sleep 3

start_service "api_gateway" "python api_gateway.py" $API_GATEWAY_PORT
sleep 3

start_service "dashboard" "streamlit run dashboard_v3.py --server.port \$DASHBOARD_PORT --server.headless true" $DASHBOARD_PORT

echo ""
echo "‚è≥ Attente de la disponibilit√© des services..."
sleep 10

echo ""
echo "üè• V√©rification de la sant√© des services..."
check_health "CV Parser" $CV_PARSER_PORT
check_health "Job Parser" $JOB_PARSER_PORT
check_health "API Gateway" $API_GATEWAY_PORT

echo ""
echo "üéØ SuperSmartMatch V3.0 Enhanced - Pr√™t !"
echo "========================================"
echo "üìä Dashboard: http://localhost:$DASHBOARD_PORT"
echo "üåê API Gateway: http://localhost:$API_GATEWAY_PORT"
echo "üìÑ CV Parser: http://localhost:$CV_PARSER_PORT"
echo "üíº Job Parser: http://localhost:$JOB_PARSER_PORT"
echo ""
echo "üß™ Pour lancer les tests:"
echo "python -m unittest test_supersmartmatch_v3_enhanced.py -v"
echo ""
echo "üîß Pour arr√™ter les services:"
echo "./stop_services.sh"
EOF
    chmod +x start_dev.sh
    log "‚úÖ Script start_dev.sh cr√©√©"
    
    # Script d'arr√™t
    cat > stop_services.sh << 'EOF'
#!/bin/bash
# SuperSmartMatch V3.0 Enhanced - Arr√™t des Services

echo "üõë Arr√™t des services SuperSmartMatch V3.0..."

# Fonction d'arr√™t
stop_service() {
    local name=$1
    local pid_file="/tmp/supersmartmatch_${name}.pid"
    
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            echo "‚úÖ $name arr√™t√© (PID: $pid)"
        fi
        rm -f "$pid_file"
    fi
}

# Arr√™ter tous les services
stop_service "cv_parser"
stop_service "job_parser"
stop_service "api_gateway"
stop_service "dashboard"

# Arr√™ter tous les processus uvicorn et streamlit
pkill -f "uvicorn.*505" 2>/dev/null || true
pkill -f "streamlit.*507" 2>/dev/null || true
pkill -f "python.*simple_job_parser" 2>/dev/null || true
pkill -f "python.*api_gateway" 2>/dev/null || true

echo "‚úÖ Tous les services arr√™t√©s"
EOF
    chmod +x stop_services.sh
    log "‚úÖ Script stop_services.sh cr√©√©"
    
    # Script Docker
    if [ "$DOCKER_AVAILABLE" = true ] && [ "$DOCKER_COMPOSE_AVAILABLE" = true ]; then
        cat > start_docker.sh << 'EOF'
#!/bin/bash
# SuperSmartMatch V3.0 Enhanced - D√©marrage Docker

echo "üê≥ D√©marrage SuperSmartMatch V3.0 Enhanced - Mode Docker"
echo "======================================================="

# V√©rifier Docker
if ! command -v docker &> /dev/null || ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker ou Docker Compose non disponible"
    exit 1
fi

# Nettoyer les anciens conteneurs
echo "üßπ Nettoyage des anciens conteneurs..."
docker-compose -f docker-compose.enhanced.yml down --remove-orphans

# Construire et d√©marrer
echo "üèóÔ∏è  Construction et d√©marrage des services..."
docker-compose -f docker-compose.enhanced.yml up --build -d

# Attendre que les services soient pr√™ts
echo "‚è≥ Attente de la disponibilit√© des services..."
sleep 30

# V√©rifier le statut
echo "üìä Statut des services:"
docker-compose -f docker-compose.enhanced.yml ps

echo ""
echo "üéØ SuperSmartMatch V3.0 Enhanced - D√©marr√© avec Docker !"
echo "======================================================"
echo "üìä Dashboard: http://localhost:5070"
echo "üåê API Gateway: http://localhost:5065"
echo "üìä Monitoring: http://localhost:3000 (Grafana, admin/supersmartmatch)"
echo ""
echo "üß™ Pour lancer les tests:"
echo "docker-compose -f docker-compose.enhanced.yml run --rm test-runner"
echo ""
echo "üîß Pour arr√™ter:"
echo "docker-compose -f docker-compose.enhanced.yml down"
EOF
        chmod +x start_docker.sh
        log "‚úÖ Script start_docker.sh cr√©√©"
    fi
}

run_quick_validation() {
    log "‚úÖ Validation rapide de l'installation..."
    
    # Test import des modules Python
    python3 -c "
import sys
try:
    import fastapi, uvicorn, streamlit, requests, pandas, plotly
    print('‚úÖ Modules Python OK')
except ImportError as e:
    print(f'‚ùå Module manquant: {e}')
    sys.exit(1)
" || return 1
    
    # Test de la structure
    local required_files=(
        "test_supersmartmatch_v3_enhanced.py"
        "test_data_automation.py"
        "supersmartmatch_orchestrator.py"
        "docker-compose.enhanced.yml"
        "config/ports.py"
        ".env"
    )
    
    for file in "${required_files[@]}"; do
        if [ -f "$file" ]; then
            log "‚úÖ $file pr√©sent"
        else
            log_warn "$file manquant"
        fi
    done
    
    # Test cr√©ation donn√©es de test
    if python3 -c "
from test_data_automation import TestDataAutomation
automation = TestDataAutomation()
print('‚úÖ Test data automation OK')
" 2>/dev/null; then
        log "‚úÖ Module test data automation fonctionnel"
    else
        log_warn "Probl√®me avec test data automation"
    fi
}

show_final_instructions() {
    clear
    echo -e "${GREEN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë               üéØ SuperSmartMatch V3.0 Enhanced - PR√äT !                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    log "üéâ Configuration termin√©e avec succ√®s !"
    echo ""
    
    echo -e "${CYAN}üìã COMMANDES PRINCIPALES:${NC}"
    echo ""
    echo -e "${YELLOW}üöÄ D√©marrage D√©veloppement:${NC}"
    echo "   ./start_dev.sh"
    echo ""
    
    if [ "$DOCKER_AVAILABLE" = true ]; then
        echo -e "${YELLOW}üê≥ D√©marrage Docker:${NC}"
        echo "   ./start_docker.sh"
        echo ""
    fi
    
    echo -e "${YELLOW}üß™ Tests Complets:${NC}"
    echo "   python supersmartmatch_orchestrator.py"
    echo "   python -m unittest test_supersmartmatch_v3_enhanced.py -v"
    echo ""
    
    echo -e "${YELLOW}üìä URLs Principales:${NC}"
    echo "   ‚Ä¢ Dashboard: http://localhost:5070"
    echo "   ‚Ä¢ API Gateway: http://localhost:5065"
    echo "   ‚Ä¢ CV Parser: http://localhost:5051"
    echo "   ‚Ä¢ Job Parser: http://localhost:5053"
    if [ "$DOCKER_AVAILABLE" = true ]; then
        echo "   ‚Ä¢ Monitoring: http://localhost:3000 (Docker uniquement)"
    fi
    echo ""
    
    echo -e "${YELLOW}üõë Arr√™t des Services:${NC}"
    echo "   ./stop_services.sh"
    echo ""
    
    echo -e "${CYAN}üìÅ STRUCTURE CR√â√âE:${NC}"
    echo "   ‚Ä¢ test_data/ - Donn√©es de test multi-formats"
    echo "   ‚Ä¢ config/ - Configuration des ports et services"
    echo "   ‚Ä¢ logs/ - Logs du syst√®me"
    echo "   ‚Ä¢ monitoring/ - Configuration monitoring (Prometheus/Grafana)"
    echo ""
    
    echo -e "${CYAN}üéØ PERFORMANCES CIBLES:${NC}"
    echo "   ‚Ä¢ Score record: 98.6% (D√©veloppeur ‚Üí Lead)"
    echo "   ‚Ä¢ Temps de r√©ponse: 6.9ms - 35ms"
    echo "   ‚Ä¢ Formats support√©s: PDF, DOCX, DOC, PNG, JPG, JPEG, TXT"
    echo "   ‚Ä¢ 7 algorithmes disponibles, Enhanced V3.0 recommand√©"
    echo ""
    
    echo -e "${GREEN}üèÜ SuperSmartMatch V3.0 Enhanced avec am√©liorations Cursor AI - PR√äT !${NC}"
    echo -e "${GREEN}üìù Logs de setup: $LOG_FILE${NC}"
    echo ""
}

# SCRIPT PRINCIPAL
main() {
    # Initialisation du log
    echo "SuperSmartMatch V3.0 Enhanced Setup - $(date)" > "$LOG_FILE"
    
    show_banner
    
    log "üöÄ D√©marrage du setup SuperSmartMatch V3.0 Enhanced..."
    log "üìù Logs d√©taill√©s: $LOG_FILE"
    
    # √âtapes de configuration
    check_system_requirements
    install_python_dependencies
    setup_project_structure
    setup_test_environment
    create_startup_scripts
    run_quick_validation
    
    # Instructions finales
    show_final_instructions
    
    log "‚úÖ Setup termin√© avec succ√®s !"
    
    # Proposer de lancer imm√©diatement
    echo ""
    read -p "üöÄ Voulez-vous lancer SuperSmartMatch V3.0 maintenant ? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "üéØ Lancement de SuperSmartMatch V3.0..."
        if [ "$DOCKER_AVAILABLE" = true ] && [ "$DOCKER_COMPOSE_AVAILABLE" = true ]; then
            read -p "üê≥ Utiliser Docker ? (y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                ./start_docker.sh
            else
                ./start_dev.sh
            fi
        else
            ./start_dev.sh
        fi
    fi
}

# Gestion d'interruption
trap 'log_error "Setup interrompu"; exit 1' INT TERM

# Point d'entr√©e
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
