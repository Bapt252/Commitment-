#!/usr/bin/env python3
"""
Script de correction sp√©cialis√© pour les endpoints SuperSmartMatch V2
Corrige les URLs des services avec les bons endpoints
"""

import json
import os
import requests
import subprocess

def create_fixed_docker_override():
    """Cr√©e un override Docker avec les bons endpoints"""
    
    override_content = """version: '3.8'

services:
  supersmartmatch-v2-unified:
    environment:
      # URLs des services avec bons endpoints
      - NEXTEN_URL=http://nexten_matcher:80
      - NEXTEN_ENDPOINT=/match
      - SUPERSMARTMATCH_V1_URL=http://ssm_v1:80
      - SUPERSMARTMATCH_V1_ENDPOINT=/match
      - REDIS_URL=redis://redis-cache-v2-local:6379
      - SERVICE_PORT=5070
      - ENVIRONMENT=production
      - LOG_LEVEL=DEBUG
      # Configuration des timeouts
      - NEXTEN_TIMEOUT_MS=5000
      - V1_TIMEOUT_MS=3000
      - CACHE_TTL=300
    networks:
      - default
      - commitment-_nexten_network
      - commitment-_ssm_network
    depends_on:
      - redis-cache-v2-local
      
  ssm_v2:
    environment:
      - NEXTEN_URL=http://nexten_matcher:80
      - NEXTEN_ENDPOINT=/match
      - SUPERSMARTMATCH_V1_URL=http://ssm_v1:80
      - SUPERSMARTMATCH_V1_ENDPOINT=/match
      - REDIS_URL=redis://redis-cache-v2-local:6379
      - LOG_LEVEL=DEBUG
    networks:
      - default
      - commitment-_nexten_network
      - commitment-_ssm_network
    depends_on:
      - redis-cache-v2-local

networks:
  commitment-_nexten_network:
    external: true
  commitment-_ssm_network:
    external: true
"""
    
    with open("docker-compose.endpoint-fix.yml", "w") as f:
        f.write(override_content)
    
    print("‚úÖ Fichier docker-compose.endpoint-fix.yml cr√©√© avec bons endpoints")

def test_correct_endpoints():
    """Test des bons endpoints"""
    
    print("\nüß™ Test des bons endpoints...")
    
    # Test Nexten avec bon endpoint
    nexten_payload = {
        "candidate": {
            "name": "Test Expert",
            "technical_skills": ["Python", "Machine Learning", "Data Science"]
        },
        "offers": [
            {
                "id": "ml_job_001",
                "title": "ML Engineer",
                "required_skills": ["Python", "Machine Learning"]
            }
        ]
    }
    
    try:
        print("   Testing Nexten /match...")
        response = requests.post(
            "http://localhost:5052/match", 
            json=nexten_payload, 
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Nexten r√©pond : Score {result.get('match_score', 'N/A')}")
            print(f"   üìä Algorithme : {result.get('algorithm', 'N/A')}")
            print(f"   ‚è±Ô∏è  Temps : {result.get('processing_time_ms', 'N/A')}ms")
            return True
        else:
            print(f"   ‚ùå Nexten erreur : {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Nexten error : {e}")
        return False

def restart_with_fix():
    """Red√©marre avec la correction des endpoints"""
    
    print("\nüîÑ Red√©marrage avec endpoints corrig√©s...")
    
    try:
        # Arr√™t des services
        subprocess.run([
            "docker-compose", "-f", "docker-compose.supersmartmatch-v2.yml", 
            "down"
        ], check=True, capture_output=True)
        
        print("   ‚è∏Ô∏è  Services arr√™t√©s")
        
        # Red√©marrage avec la correction
        subprocess.run([
            "docker-compose", 
            "-f", "docker-compose.supersmartmatch-v2.yml",
            "-f", "docker-compose.endpoint-fix.yml",
            "up", "-d"
        ], check=True, capture_output=True)
        
        print("   ‚ñ∂Ô∏è  Services red√©marr√©s avec endpoints corrig√©s")
        print("   ‚è≥ Attente stabilisation (15s)...")
        
        import time
        time.sleep(15)
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur red√©marrage : {e}")
        return False

def test_v2_after_fix():
    """Test V2 apr√®s correction"""
    
    print("\nüéØ Test SuperSmartMatch V2 apr√®s correction...")
    
    # Test avec questionnaire complet pour d√©clencher Nexten
    payload = {
        "candidate": {
            "name": "Sarah Martin",
            "technical_skills": ["Python", "Machine Learning", "Data Science", "TensorFlow"],
            "experience_years": 6
        },
        "candidate_questionnaire": {
            "adresse": "Paris 11√®me",
            "salaire_souhaite": 75000,
            "types_contrat": ["CDI"],
            "mode_transport": "metro",
            "priorite": "competences",
            "objectif": "expertise",
            "work_style": "analytical",
            "culture_preferences": "data_driven",
            "remote_preference": "hybrid"
        },
        "offers": [
            {
                "id": "ml_senior_001",
                "title": "Senior ML Engineer",
                "required_skills": ["Python", "Machine Learning", "TensorFlow"],
                "salary_min": 70000,
                "salary_max": 85000
            }
        ],
        "algorithm": "auto"
    }
    
    try:
        response = requests.post(
            "http://localhost:5070/api/v2/match",
            json=payload,
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            algorithm_used = result.get('algorithm_used')
            fallback = result.get('metadata', {}).get('fallback', True)
            
            print(f"   üéØ Algorithme : {algorithm_used}")
            print(f"   üìà Score : {result.get('matches', [{}])[0].get('overall_score', 'N/A')}")
            print(f"   ‚ö° Temps : {result.get('execution_time_ms')}ms")
            print(f"   üîÑ Fallback : {fallback}")
            
            if not fallback and algorithm_used == "nexten_matcher":
                print("   üéâ SUCCESS : Nexten Matcher fonctionne parfaitement !")
                return True
            elif not fallback:
                print(f"   ‚úÖ SUCCESS : Algorithme {algorithm_used} fonctionne !")
                return True
            else:
                print("   ‚ö†Ô∏è  Encore en fallback - Need more investigation")
                return False
        else:
            print(f"   ‚ùå V2 error : {response.status_code}")
            print(f"   Response : {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"   ‚ùå V2 test failed : {e}")
        return False

def main():
    """Script principal de correction des endpoints"""
    print("üéØ CORRECTION ENDPOINTS SUPERSMARTMATCH V2")
    print("=" * 55)
    
    # 1. Test endpoints actuels
    nexten_ok = test_correct_endpoints()
    
    # 2. Cr√©ation de la configuration corrig√©e
    create_fixed_docker_override()
    
    # 3. Red√©marrage avec correction
    if nexten_ok:
        print("\nüí° Nexten endpoint fonctionne - Red√©marrage avec correction...")
        restart_ok = restart_with_fix()
        
        if restart_ok:
            # 4. Test final
            v2_ok = test_v2_after_fix()
            
            if v2_ok:
                print("\nüéâ SUCC√àS COMPLET !")
                print("SuperSmartMatch V2 utilise maintenant les bons endpoints")
            else:
                print("\n‚ö†Ô∏è  Partiellement corrig√© - Besoin d'investigation suppl√©mentaire")
        else:
            print("\n‚ùå Probl√®me lors du red√©marrage")
    else:
        print("\n‚ùå Nexten endpoint ne fonctionne pas")
    
    print("\nüìã COMMANDES MANUELLES :")
    print("# Red√©marrage manuel avec endpoints corrig√©s :")
    print("docker-compose -f docker-compose.supersmartmatch-v2.yml down")
    print("docker-compose -f docker-compose.supersmartmatch-v2.yml -f docker-compose.endpoint-fix.yml up -d")
    print("\n# Test final :")
    print("python debug_supersmartmatch_v2.py")

if __name__ == "__main__":
    main()
