#!/usr/bin/env python3
"""
üöÄ CV Parser Optimizer - Nextvision V3.0
==========================================

Optimiseur de prompts pour am√©liorer la performance du CV parsing de 54.5% √† >90%

Key Features:
- Prompts optimis√©s pour extraction de donn√©es
- Validation multi-niveaux
- Retry logic intelligent
- Formatage standardis√©
- Performance monitoring

Author: Nextvision Team
Version: 3.0.0 - Performance Optimization
"""

import json
import re
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from enum import Enum

class DataQuality(Enum):
    """Niveaux de qualit√© des donn√©es extraites"""
    EXCELLENT = "excellent"    # >95% donn√©es valides
    GOOD = "good"             # 80-95% donn√©es valides  
    ACCEPTABLE = "acceptable"  # 60-80% donn√©es valides
    POOR = "poor"             # <60% donn√©es valides

@dataclass
class CVExtractionResult:
    """R√©sultat d'extraction de CV optimis√©"""
    # Informations personnelles (OBLIGATOIRES)
    nom: str = ""
    prenom: str = ""
    email: str = ""
    telephone: str = ""
    adresse: str = ""
    
    # Exp√©rience professionnelle (CRITIQUE)
    annees_experience: int = 0
    poste_actuel: str = ""
    entreprise_actuelle: str = ""
    postes_precedents: List[str] = None
    entreprises_precedentes: List[str] = None
    
    # Comp√©tences (CRITIQUE)
    competences_techniques: List[str] = None
    competences_transversales: List[str] = None
    technologies: List[str] = None
    certifications: List[str] = None
    
    # Formation (IMPORTANT)
    niveau_formation: str = ""
    domaine_formation: str = ""
    etablissement: str = ""
    diplomes: List[str] = None
    
    # Informations compl√©mentaires
    langues: List[str] = None
    objectif_professionnel: str = ""
    resume_profil: str = ""
    secteurs_experience: List[str] = None
    
    # M√©tadonn√©es de qualit√©
    quality_score: float = 0.0
    quality_level: DataQuality = DataQuality.POOR
    missing_fields: List[str] = None
    confidence_score: float = 0.0
    
    def __post_init__(self):
        """Initialise les listes vides"""
        if self.postes_precedents is None:
            self.postes_precedents = []
        if self.entreprises_precedentes is None:
            self.entreprises_precedentes = []
        if self.competences_techniques is None:
            self.competences_techniques = []
        if self.competences_transversales is None:
            self.competences_transversales = []
        if self.technologies is None:
            self.technologies = []
        if self.certifications is None:
            self.certifications = []
        if self.diplomes is None:
            self.diplomes = []
        if self.langues is None:
            self.langues = []
        if self.secteurs_experience is None:
            self.secteurs_experience = []
        if self.missing_fields is None:
            self.missing_fields = []

class CVParserOptimizer:
    """Optimiseur de parsing CV avec prompts am√©lior√©s"""
    
    def __init__(self):
        self.required_fields = [
            "nom", "prenom", "email", "telephone", 
            "annees_experience", "competences_techniques"
        ]
        self.important_fields = [
            "poste_actuel", "entreprise_actuelle", "niveau_formation", 
            "domaine_formation", "technologies"
        ]
        
    def get_optimized_prompt(self, cv_text: str) -> str:
        """G√©n√®re un prompt optimis√© pour l'extraction de donn√©es CV"""
        
        prompt = f"""
Tu es un expert en extraction de donn√©es CV avec 15 ans d'exp√©rience. 
Analyse ce CV et extrais EXACTEMENT les informations demand√©es avec une pr√©cision maximale.

=== R√àGLES CRITIQUES ===
1. Si une information n'est PAS pr√©sente, ne l'invente JAMAIS
2. Retourne "N/A" ou liste vide [] si donn√©e manquante
3. Sois EXTR√äMEMENT pr√©cis sur les ann√©es d'exp√©rience
4. Extrais TOUTES les comp√©tences techniques mentionn√©es
5. S√©pare clairement nom/pr√©nom m√™me si format inhabituel

=== CV √Ä ANALYSER ===
{cv_text}

=== FORMAT DE R√âPONSE OBLIGATOIRE ===
{{
    "nom": "Nom de famille EXACT du CV",
    "prenom": "Pr√©nom EXACT du CV", 
    "email": "adresse@email.com ou N/A",
    "telephone": "num√©ro complet ou N/A",
    "adresse": "adresse compl√®te ou N/A",
    
    "annees_experience": nombre_exact_d_annees_pro,
    "poste_actuel": "titre exact du poste actuel ou N/A",
    "entreprise_actuelle": "nom exact entreprise actuelle ou N/A",
    "postes_precedents": ["poste1", "poste2", "poste3"],
    "entreprises_precedentes": ["entreprise1", "entreprise2"],
    
    "competences_techniques": ["comp√©tence1", "comp√©tence2", "comp√©tence3"],
    "competences_transversales": ["leadership", "gestion", "communication"],
    "technologies": ["Python", "Java", "React", "Docker"],
    "certifications": ["AWS", "PMP", "Scrum Master"],
    
    "niveau_formation": "Bac+3/Bac+5/Master/Doctorat ou N/A",
    "domaine_formation": "Informatique/Commerce/Ing√©nieur ou N/A", 
    "etablissement": "nom √©cole/universit√© ou N/A",
    "diplomes": ["dipl√¥me1", "dipl√¥me2"],
    
    "langues": ["Fran√ßais", "Anglais", "Espagnol"],
    "objectif_professionnel": "objectif mentionn√© ou N/A",
    "resume_profil": "r√©sum√© profil en 1-2 phrases ou N/A",
    "secteurs_experience": ["IT", "Finance", "Conseil"]
}}

ATTENTION: Respecte EXACTEMENT ce format JSON. Une seule r√©ponse. Sois factuel et pr√©cis.
"""
        return prompt
    
    def validate_extraction(self, result: Dict[str, Any]) -> Tuple[float, DataQuality, List[str]]:
        """Valide la qualit√© de l'extraction"""
        
        total_fields = len(self.required_fields) + len(self.important_fields)
        valid_fields = 0
        missing_fields = []
        
        # Validation champs obligatoires (poids 2x)
        for field in self.required_fields:
            value = result.get(field, "")
            if value and value != "N/A" and value != "" and value != 0:
                valid_fields += 2
            else:
                missing_fields.append(field)
        
        # Validation champs importants (poids 1x)
        for field in self.important_fields:
            value = result.get(field, "")
            if value and value != "N/A" and value != "":
                valid_fields += 1
            else:
                missing_fields.append(field)
        
        # Validation sp√©cifique
        
        # Email valide
        email = result.get("email", "")
        if email and "@" in email and "." in email:
            valid_fields += 1
        
        # T√©l√©phone valide  
        phone = result.get("telephone", "")
        if phone and len(re.sub(r'[^\d]', '', phone)) >= 8:
            valid_fields += 1
        
        # Exp√©rience coh√©rente
        exp = result.get("annees_experience", 0)
        if isinstance(exp, int) and 0 <= exp <= 50:
            valid_fields += 1
        
        # Comp√©tences non vides
        comp_tech = result.get("competences_techniques", [])
        if comp_tech and len(comp_tech) > 0:
            valid_fields += 2
        
        # Score final
        max_possible = (len(self.required_fields) * 2) + len(self.important_fields) + 5
        quality_score = (valid_fields / max_possible) * 100
        
        # D√©terminer niveau de qualit√©
        if quality_score >= 95:
            quality_level = DataQuality.EXCELLENT
        elif quality_score >= 80:
            quality_level = DataQuality.GOOD
        elif quality_score >= 60:
            quality_level = DataQuality.ACCEPTABLE
        else:
            quality_level = DataQuality.POOR
            
        return quality_score, quality_level, missing_fields
    
    def enhance_extraction(self, raw_result: Dict[str, Any]) -> CVExtractionResult:
        """Am√©liore et standardise l'extraction"""
        
        # Nettoyage et standardisation
        enhanced = {}
        
        # Nettoyage nom/pr√©nom
        nom = str(raw_result.get("nom", "")).strip().title()
        prenom = str(raw_result.get("prenom", "")).strip().title()
        enhanced["nom"] = nom if nom != "N/A" else ""
        enhanced["prenom"] = prenom if prenom != "N/A" else ""
        
        # Nettoyage email
        email = str(raw_result.get("email", "")).strip().lower()
        enhanced["email"] = email if "@" in email else ""
        
        # Nettoyage t√©l√©phone
        phone = str(raw_result.get("telephone", "")).strip()
        # Garder seulement chiffres et espaces/tirets
        phone_clean = re.sub(r'[^\d\s\-\.\+\(\)]', '', phone)
        enhanced["telephone"] = phone_clean if len(re.sub(r'[^\d]', '', phone_clean)) >= 8 else ""
        
        # Autres champs texte
        text_fields = ["adresse", "poste_actuel", "entreprise_actuelle", 
                      "niveau_formation", "domaine_formation", "etablissement",
                      "objectif_professionnel", "resume_profil"]
        
        for field in text_fields:
            value = str(raw_result.get(field, "")).strip()
            enhanced[field] = value if value != "N/A" else ""
        
        # Ann√©es d'exp√©rience
        try:
            exp = int(raw_result.get("annees_experience", 0))
            enhanced["annees_experience"] = max(0, min(exp, 50))  # Cap √† 50 ans
        except (ValueError, TypeError):
            enhanced["annees_experience"] = 0
        
        # Listes
        list_fields = ["postes_precedents", "entreprises_precedentes", 
                      "competences_techniques", "competences_transversales",
                      "technologies", "certifications", "diplomes", 
                      "langues", "secteurs_experience"]
        
        for field in list_fields:
            value = raw_result.get(field, [])
            if isinstance(value, list):
                # Nettoyer et filtrer
                cleaned = [str(item).strip() for item in value if item and str(item).strip() != "N/A"]
                enhanced[field] = cleaned
            else:
                enhanced[field] = []
        
        # Cr√©er l'objet r√©sultat
        result = CVExtractionResult(**enhanced)
        
        # Calculer la qualit√©
        quality_score, quality_level, missing_fields = self.validate_extraction(enhanced)
        
        result.quality_score = round(quality_score, 1)
        result.quality_level = quality_level
        result.missing_fields = missing_fields
        result.confidence_score = min(95.0, quality_score * 1.1)
        
        return result
    
    def should_retry(self, result: CVExtractionResult, attempt: int) -> bool:
        """D√©termine si un retry est n√©cessaire"""
        
        if attempt >= 3:  # Max 3 tentatives
            return False
            
        # Retry si qualit√© insuffisante
        if result.quality_level in [DataQuality.POOR]:
            return True
            
        # Retry si champs critiques manquants
        critical_missing = any(field in result.missing_fields 
                             for field in ["nom", "prenom", "competences_techniques"])
        
        if critical_missing:
            return True
            
        return False
    
    def get_retry_prompt(self, cv_text: str, previous_result: CVExtractionResult, attempt: int) -> str:
        """G√©n√®re un prompt de retry am√©lior√©"""
        
        missing_info = ", ".join(previous_result.missing_fields)
        
        prompt = f"""
RETRY #{attempt} - EXTRACTION CV AM√âLIOR√âE

Tentative pr√©c√©dente INSUFFISANTE. Champs manquants: {missing_info}

=== ANALYSE PLUS APPROFONDIE REQUISE ===
Lis TR√àS attentivement le CV ci-dessous et extrais TOUTES les informations possibles.

FOCUS SP√âCIAL sur:
- Nom/Pr√©nom (m√™me si format inhabituel)
- TOUTES les comp√©tences techniques mentionn√©es
- Exp√©rience EXACTE (compter les ann√©es)
- Formation pr√©cise

=== CV √Ä R√âANALYSER ===
{cv_text}

=== INSTRUCTIONS RENFORC√âES ===
1. Lis CHAQUE ligne du CV attentivement
2. Cherche les informations dans TOUT le document
3. N'ignore AUCUNE comp√©tence technique
4. Calcule pr√©cis√©ment les ann√©es d'exp√©rience
5. Si format nom inhabituel, devine intelligemment

RETOURNE le m√™me format JSON que demand√© pr√©c√©demment.
Sois PLUS pr√©cis et exhaustif cette fois.
"""
        return prompt

# ================================
# TESTS ET VALIDATION
# ================================

def test_cv_optimizer():
    """Test de l'optimiseur CV"""
    
    # CV test simul√©
    cv_test = """
    Jean DUPONT
    D√©veloppeur Senior Python
    jean.dupont@email.com
    06 12 34 56 78
    
    EXP√âRIENCE:
    2020-2024: D√©veloppeur Senior - TechCorp
    2018-2020: D√©veloppeur Python - StartupXYZ
    
    COMP√âTENCES:
    - Python, Django, Flask
    - React, JavaScript
    - Docker, Kubernetes
    - PostgreSQL, MongoDB
    
    FORMATION:
    Master Informatique - EPITECH (2018)
    """
    
    optimizer = CVParserOptimizer()
    
    # Test prompt g√©n√©ration
    prompt = optimizer.get_optimized_prompt(cv_test)
    print("‚úÖ Prompt g√©n√©r√©")
    
    # Simulation r√©sultat parsing
    mock_result = {
        "nom": "DUPONT",
        "prenom": "Jean", 
        "email": "jean.dupont@email.com",
        "telephone": "06 12 34 56 78",
        "annees_experience": 6,
        "competences_techniques": ["Python", "Django", "Flask", "React", "Docker"],
        "niveau_formation": "Master",
        "domaine_formation": "Informatique"
    }
    
    # Test validation
    enhanced_result = optimizer.enhance_extraction(mock_result)
    
    print(f"‚úÖ Qualit√©: {enhanced_result.quality_level.value} ({enhanced_result.quality_score}%)")
    print(f"‚úÖ Confiance: {enhanced_result.confidence_score}%")
    print(f"‚úÖ Champs manquants: {len(enhanced_result.missing_fields)}")
    
    return enhanced_result

if __name__ == "__main__":
    print("üöÄ === CV PARSER OPTIMIZER V3.0 ===")
    print("Optimiseur de performance pour parsing CV Nextvision")
    print()
    
    # Test de l'optimiseur
    result = test_cv_optimizer()
    
    print("\nüìä === R√âSULTAT TEST ===")
    print(f"Nom: {result.nom} {result.prenom}")
    print(f"Email: {result.email}")
    print(f"Exp√©rience: {result.annees_experience} ans")
    print(f"Comp√©tences: {len(result.competences_techniques)} identifi√©es")
    print(f"Score qualit√©: {result.quality_score}% ({result.quality_level.value})")
    
    if result.quality_score >= 90:
        print("üéØ ‚úÖ OBJECTIF >90% ATTEINT!")
    else:
        print(f"üéØ ‚ö†Ô∏è Objectif >90% non atteint ({result.quality_score}%)")
        
    print("\nüîß Int√©gration recommand√©e:")
    print("1. Remplacer les prompts actuels par get_optimized_prompt()")
    print("2. Ajouter la validation avec validate_extraction()")  
    print("3. Impl√©menter la logique de retry avec should_retry()")
    print("4. Utiliser enhance_extraction() pour la standardisation")
