#!/usr/bin/env python3
"""
üîÑ Test Int√©gration R√©elle - Parser Optimis√© avec Syst√®me Existant
==================================================================

Test du parser CV optimis√© int√©gr√© avec l'architecture Commitment- existante
"""

import json
import time
from pathlib import Path
from enhanced_cv_parser import EnhancedCVParser, enhanced_analyze_with_gpt

# Couleurs
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def test_enhanced_parser_integration():
    """Test du parser am√©lior√© avec int√©gration r√©elle"""
    
    print(f"{Colors.BOLD}{Colors.BLUE}üîÑ === TEST INT√âGRATION PARSER OPTIMIS√â ==={Colors.END}")
    print("Test avec parser am√©lior√© + syst√®me Commitment- existant")
    print()
    
    # Initialiser le parser am√©lior√©
    try:
        parser = EnhancedCVParser()
        print(f"{Colors.GREEN}‚úÖ Parser am√©lior√© initialis√©{Colors.END}")
    except Exception as e:
        print(f"{Colors.RED}‚ùå Erreur initialisation: {e}{Colors.END}")
        return
    
    # CVs de test avec contenu r√©aliste
    test_cvs = [
        {
            "name": "CV Tech Senior",
            "content": """
            Mohamed OUADHANE
            D√©veloppeur Full-Stack Senior
            mohamed.ouadhane@email.com
            +33 6 12 34 56 78
            Paris, France
            
            EXP√âRIENCE PROFESSIONNELLE:
            2022-2024: Lead Developer Full-Stack - TechStartup (2 ans)
            ‚Ä¢ D√©veloppement d'applications React/Node.js
            ‚Ä¢ Architecture microservices avec Docker
            ‚Ä¢ Gestion √©quipe de 4 d√©veloppeurs
            
            2020-2022: D√©veloppeur Backend Senior - DigitalCorp (2 ans)  
            ‚Ä¢ APIs REST avec Django/FastAPI
            ‚Ä¢ Bases de donn√©es PostgreSQL, MongoDB
            ‚Ä¢ DevOps avec AWS, CI/CD
            
            2018-2020: D√©veloppeur Full-Stack - WebAgency (2 ans)
            ‚Ä¢ D√©veloppement sites e-commerce
            ‚Ä¢ React, Vue.js, Node.js
            ‚Ä¢ Int√©gration syst√®mes de paiement
            
            COMP√âTENCES TECHNIQUES:
            - Langages: JavaScript, TypeScript, Python, Java
            - Frontend: React, Vue.js, Angular, HTML5, CSS3
            - Backend: Node.js, Django, FastAPI, Spring Boot
            - Bases de donn√©es: PostgreSQL, MongoDB, Redis, MySQL
            - DevOps: Docker, Kubernetes, AWS, GCP, CI/CD
            - Outils: Git, Jira, Figma, Postman
            
            FORMATION:
            Master Informatique - Universit√© Paris-Saclay (2018)
            Licence Informatique - Universit√© Paris-Saclay (2016)
            
            LANGUES:
            - Fran√ßais: Natif
            - Anglais: Courant (C1)
            - Arabe: Bilingue
            
            CERTIFICATIONS:
            - AWS Solutions Architect Associate (2023)
            - Certified Kubernetes Administrator (2022)
            """
        },
        {
            "name": "CV Data Science",
            "content": """
            AGBASSE Teddy
            Data Scientist & Machine Learning Engineer
            teddy.agbasse@gmail.com
            06 98 76 54 32
            Lyon, France
            
            EXP√âRIENCE:
            2021-2024: Senior Data Scientist - AI Company (3 ans)
            ‚Ä¢ Mod√®les ML pour recommandation produits
            ‚Ä¢ Pipeline MLOps avec Kubeflow
            ‚Ä¢ Analyse pr√©dictive chiffre d'affaires
            
            2019-2021: Data Analyst - Analytics Firm (2 ans)
            ‚Ä¢ Dashboards BI avec Tableau
            ‚Ä¢ Analyses statistiques business
            ‚Ä¢ Mod√®les de scoring client
            
            COMP√âTENCES:
            - Python: pandas, numpy, scikit-learn, matplotlib
            - Machine Learning: TensorFlow, PyTorch, XGBoost
            - Big Data: Apache Spark, Hadoop, Kafka
            - Bases de donn√©es: SQL, NoSQL, ClickHouse
            - Cloud: AWS, GCP, Azure ML Studio
            - Visualisation: Tableau, Power BI, Plotly
            
            FORMATION:
            Master Data Science - √âcole Centrale Lyon (2019)
            √âcole d'Ing√©nieur sp√©cialit√© Math√©matiques Appliqu√©es
            """
        },
        {
            "name": "CV Incomplet", 
            "content": """
            MARTIN Jean
            Consultant IT
            jean.martin@email.com
            
            EXP√âRIENCE:
            2019-2024: Consultant - IT Consulting
            
            COMP√âTENCES:
            - Java, Spring
            - Oracle, MySQL
            """
        }
    ]
    
    results = []
    total_start = time.time()
    
    print(f"{Colors.BLUE}üß™ Test de {len(test_cvs)} CVs avec parser optimis√©...{Colors.END}")
    
    for i, test_cv in enumerate(test_cvs, 1):
        print(f"   {i}/{len(test_cvs)} - {test_cv['name']}", end=" ")
        
        start_time = time.time()
        
        try:
            # Utiliser le parser am√©lior√©
            result = parser.analyze_with_gpt(test_cv["content"])
            processing_time = time.time() - start_time
            
            # Analyser le r√©sultat
            success = result.get("success", False)
            quality_score = result.get("quality_score", 0)
            
            test_result = {
                "name": test_cv["name"],
                "success": success,
                "processing_time": processing_time,
                "quality_score": quality_score,
                "quality_level": result.get("quality_level", "unknown"),
                "missing_fields": result.get("missing_fields", []),
                "api_compatible": "data" in result,
                "data_fields": len(result.get("data", {}))
            }
            
            results.append(test_result)
            
            if success and quality_score >= 90:
                status = f"{Colors.GREEN}‚úÖ {quality_score:.1f}%{Colors.END}"
            elif success and quality_score >= 70:
                status = f"{Colors.YELLOW}‚ö†Ô∏è {quality_score:.1f}%{Colors.END}"
            else:
                status = f"{Colors.RED}‚ùå {quality_score:.1f}%{Colors.END}"
            
            print(f"{status} ({processing_time:.3f}s)")
            
            # Afficher quelques donn√©es extraites
            if result.get("data"):
                data = result["data"]
                print(f"     üìù Nom: {data.get('prenom', '')} {data.get('nom', '')}")
                print(f"     üíº Poste: {data.get('poste_actuel', 'N/A')}")
                print(f"     üìß Email: {data.get('email', 'N/A')}")
                print(f"     üîß Comp√©tences: {len(data.get('competences_techniques', []))} identifi√©es")
                print(f"     üìö Formation: {data.get('niveau_formation', 'N/A')} {data.get('domaine_formation', '')}")
                
        except Exception as e:
            test_result = {
                "name": test_cv["name"],
                "success": False,
                "error": str(e),
                "processing_time": time.time() - start_time
            }
            results.append(test_result)
            print(f"{Colors.RED}‚ùå ERREUR: {str(e)[:50]}...{Colors.END}")
    
    total_time = time.time() - total_start
    
    # Analyser les r√©sultats
    print(f"\n{Colors.BOLD}üìä === ANALYSE INT√âGRATION R√âELLE ==={Colors.END}")
    
    successful_tests = [r for r in results if r["success"]]
    
    if successful_tests:
        qualities = [r["quality_score"] for r in successful_tests]
        avg_quality = sum(qualities) / len(qualities)
        
        excellent_count = sum(1 for q in qualities if q >= 95)
        good_count = sum(1 for q in qualities if q >= 80)
        success_rate = (good_count / len(results)) * 100
        
        print(f"‚è±Ô∏è Temps total: {total_time:.2f}s")
        print(f"üìÑ CVs test√©s: {len(results)}")
        print(f"‚úÖ Parsing r√©ussi: {len(successful_tests)}")
        print(f"üìä Qualit√© moyenne: {avg_quality:.1f}%")
        print(f"üåü Excellente (>95%): {excellent_count}")
        print(f"‚úÖ Bonne (>80%): {good_count}")
        print(f"üéØ Taux de succ√®s: {success_rate:.1f}%")
        
        # V√©rifier la compatibilit√© API
        api_compatible = all(r.get("api_compatible", False) for r in successful_tests)
        print(f"üîó Compatible API existante: {'‚úÖ' if api_compatible else '‚ùå'}")
        
        # Comparaison avec baseline
        baseline = 54.5  # Ton taux actuel
        improvement = success_rate - baseline
        
        print(f"\nüìà COMPARAISON vs BASELINE:")
        print(f"   Baseline actuelle: {baseline}%")
        print(f"   Parser optimis√©: {success_rate:.1f}%")
        print(f"   Am√©lioration: {'+' if improvement > 0 else ''}{improvement:.1f} points")
        
        if success_rate >= 90:
            print(f"\n{Colors.GREEN}üéâ OBJECTIF >90% ATTEINT! ({success_rate:.1f}%){Colors.END}")
            print(f"{Colors.GREEN}üöÄ Pr√™t pour int√©gration en production{Colors.END}")
        elif success_rate > baseline:
            print(f"\n{Colors.YELLOW}üëç AM√âLIORATION SIGNIFICATIVE (+{improvement:.1f}%){Colors.END}")
            print(f"{Colors.YELLOW}üìà Continuer l'optimisation pour atteindre 90%{Colors.END}")
        else:
            print(f"\n{Colors.RED}‚ö†Ô∏è Besoin d'optimisation suppl√©mentaire{Colors.END}")
        
        # D√©tails des probl√®mes
        problematic_cvs = [r for r in results if not r["success"] or r.get("quality_score", 0) < 80]
        if problematic_cvs:
            print(f"\n{Colors.BOLD}üîç === CVs √Ä AM√âLIORER ==={Colors.END}")
            for cv in problematic_cvs:
                print(f"‚ùå {cv['name']}: {cv.get('quality_score', 0):.1f}%")
                if cv.get('missing_fields'):
                    print(f"   Champs manquants: {', '.join(cv['missing_fields'][:3])}")
                if cv.get('error'):
                    print(f"   Erreur: {cv['error'][:50]}...")
    
    # Instructions d'int√©gration
    print(f"\n{Colors.BOLD}üîß === INT√âGRATION PRODUCTION ==={Colors.END}")
    print("Pour int√©grer dans ton syst√®me Commitment- :")
    print("1. Backup du parser actuel")
    print("2. Dans gpt_parser.py, remplacer :")
    print("   from parse_fdp_gpt import analyze_with_gpt")
    print("   par:")
    print("   from enhanced_cv_parser import enhanced_analyze_with_gpt as analyze_with_gpt")
    print("3. Red√©marrer le service")
    print("4. Tester avec ton frontend existant")
    print("5. Mesurer l'am√©lioration sur tes 69 CVs r√©els")

if __name__ == "__main__":
    test_enhanced_parser_integration()
