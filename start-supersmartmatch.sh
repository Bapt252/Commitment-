#!/bin/bash

# Script de d√©marrage optimis√© pour SuperSmartMatch avec infrastructure existante
# Compatible avec PostgreSQL + Redis + MinIO existants

set -e

echo "üöÄ Configuration SuperSmartMatch v2.1 - Pond√©ration Dynamique"
echo "==============================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rification des pr√©requis
echo ""
print_info "V√©rification des pr√©requis..."

if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
    exit 1
fi

print_status "Docker et Docker Compose sont install√©s"

# V√©rification de la structure des dossiers
echo ""
print_info "V√©rification de la structure des dossiers..."

if [ ! -d "super-smart-match" ]; then
    print_error "Le dossier super-smart-match n'existe pas"
    exit 1
fi

if [ ! -f "super-smart-match/app.py" ]; then
    print_error "Le fichier super-smart-match/app.py n'existe pas"
    exit 1
fi

if [ ! -f "super-smart-match/Dockerfile" ]; then
    print_error "Le fichier super-smart-match/Dockerfile n'existe pas"
    exit 1
fi

print_status "Structure des dossiers SuperSmartMatch OK"

# V√©rification et cr√©ation du fichier .env
echo ""
print_info "Configuration des variables d'environnement..."

if [ ! -f ".env" ]; then
    print_warning "Fichier .env non trouv√©, cr√©ation depuis .env.example"
    
    if [ -f ".env.example" ]; then
        cp .env.example .env
        print_status "Fichier .env cr√©√© depuis .env.example"
    else
        print_error "Fichier .env.example non trouv√©"
        exit 1
    fi
else
    print_status "Fichier .env existant"
fi

# V√©rification des variables critiques
echo ""
print_info "V√©rification des variables critiques..."

if ! grep -q "OPENAI=" .env || grep -q "OPENAI=your_openai_api_key_here" .env; then
    print_warning "Cl√© API OpenAI non configur√©e"
    echo "‚ö†Ô∏è  Veuillez configurer votre cl√© API OpenAI dans le fichier .env"
    echo "   OPENAI=your_actual_openai_api_key_here"
    echo ""
    read -p "Voulez-vous continuer sans cl√© OpenAI ? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Configuration interrompue. Configurez votre cl√© OpenAI et relancez le script."
        exit 1
    fi
else
    print_status "Cl√© API OpenAI configur√©e"
fi

if ! grep -q "SECRET_KEY=" .env || grep -q "SECRET_KEY=your-super-secret-key" .env; then
    print_warning "Cl√© secr√®te SuperSmartMatch non configur√©e - g√©n√©ration automatique"
    SECRET_KEY=$(openssl rand -hex 32 2>/dev/null || echo "super-secret-key-$(date +%s)")
    sed -i.bak "s/SECRET_KEY=.*/SECRET_KEY=${SECRET_KEY}/" .env
    print_status "Cl√© secr√®te g√©n√©r√©e automatiquement"
fi

# V√©rification de l'√©tat des services Docker existants
echo ""
print_info "V√©rification de l'infrastructure existante..."

if docker ps --format "table {{.Names}}" | grep -q "nexten-postgres"; then
    print_status "PostgreSQL (nexten-postgres) est en cours d'ex√©cution"
    POSTGRES_RUNNING=true
else
    print_warning "PostgreSQL (nexten-postgres) n'est pas en cours d'ex√©cution"
    POSTGRES_RUNNING=false
fi

if docker ps --format "table {{.Names}}" | grep -q "nexten-redis"; then
    print_status "Redis (nexten-redis) est en cours d'ex√©cution"
    REDIS_RUNNING=true
else
    print_warning "Redis (nexten-redis) n'est pas en cours d'ex√©cution"
    REDIS_RUNNING=false
fi

# Choix du mode de d√©marrage
echo ""
print_info "Choix du mode de d√©marrage..."
echo "1. D√©marrer uniquement SuperSmartMatch (infrastructure existante requise)"
echo "2. D√©marrer toute l'infrastructure (recommand√© pour un nouveau d√©ploiement)"
echo "3. Red√©marrer SuperSmartMatch seulement"
echo ""
read -p "Choisissez une option (1-3): " choice

case $choice in
    1)
        if [ "$POSTGRES_RUNNING" = false ] || [ "$REDIS_RUNNING" = false ]; then
            print_error "Infrastructure non disponible. Utilisez l'option 2 pour d√©marrer toute l'infrastructure."
            exit 1
        fi
        
        print_info "D√©marrage de SuperSmartMatch uniquement..."
        docker-compose up -d supersmartmatch-service
        ;;
    2)
        print_info "D√©marrage de toute l'infrastructure Nexten..."
        docker-compose up -d
        ;;
    3)
        print_info "Red√©marrage de SuperSmartMatch..."
        docker-compose restart supersmartmatch-service
        ;;
    *)
        print_error "Option invalide"
        exit 1
        ;;
esac

# Attendre que SuperSmartMatch soit pr√™t
echo ""
print_info "Attente du d√©marrage de SuperSmartMatch..."

max_attempts=30
attempt=0

while [ $attempt -lt $max_attempts ]; do
    if curl -s -f http://localhost:5062/api/v1/health > /dev/null 2>&1; then
        print_status "SuperSmartMatch est op√©rationnel!"
        break
    fi
    
    echo -n "."
    sleep 2
    attempt=$((attempt + 1))
done

if [ $attempt -eq $max_attempts ]; then
    print_error "SuperSmartMatch n'a pas d√©marr√© dans les temps (60 secondes)"
    echo ""
    print_info "V√©rification des logs..."
    docker-compose logs --tail=20 supersmartmatch-service
    exit 1
fi

# Tests de connectivit√©
echo ""
print_info "Tests de connectivit√©..."

# Test API Health
if curl -s -f http://localhost:5062/api/v1/health > /dev/null; then
    print_status "API Health: OK"
else
    print_warning "API Health: √âCHEC"
fi

# Test des algorithmes
if curl -s -f http://localhost:5062/api/algorithms > /dev/null; then
    print_status "API Algorithms: OK"
else
    print_warning "API Algorithms: √âCHEC"
fi

# Test des donn√©es de test
if curl -s -f http://localhost:5062/api/test-data > /dev/null; then
    print_status "API Test Data: OK"
else
    print_warning "API Test Data: √âCHEC"
fi

# Affichage du statut final
echo ""
echo "üéâ SuperSmartMatch v2.1 est configur√© et op√©rationnel!"
echo "==============================================="
echo ""
print_info "URLs d'acc√®s:"
echo "   ‚Ä¢ SuperSmartMatch API: http://localhost:5062"
echo "   ‚Ä¢ Health Check: http://localhost:5062/api/v1/health"
echo "   ‚Ä¢ Documentation: http://localhost:5062/api/algorithms"
echo "   ‚Ä¢ Donn√©es de test: http://localhost:5062/api/test-data"
echo ""
print_info "Infrastructure Nexten:"
echo "   ‚Ä¢ API Principale: http://localhost:5050"
echo "   ‚Ä¢ Frontend: http://localhost:3000"
echo "   ‚Ä¢ MinIO Console: http://localhost:9001"
echo "   ‚Ä¢ Redis Commander: http://localhost:8081"
echo "   ‚Ä¢ RQ Dashboard: http://localhost:9181"
echo ""
print_info "Nouvelles fonctionnalit√©s v2.1:"
echo "   üéõÔ∏è Pond√©ration dynamique bas√©e sur priorit√©s candidat"
echo "   üìà 4 leviers: √âvolution, R√©mun√©ration, Proximit√©, Flexibilit√©"
echo "   üîÑ Nouveau crit√®re flexibilit√© (t√©l√©travail, horaires, RTT)"
echo "   üß† Raisonnement intelligent et analyse des risques"
echo "   üìä Analytics et monitoring avanc√©s"
echo "   üîÑ Matching bidirectionnel (candidat ‚Üî entreprise)"
echo ""
print_info "Endpoints v2.1:"
echo "   ‚Ä¢ POST /api/candidate/<id>/questionnaire - Priorit√©s candidat"
echo "   ‚Ä¢ POST /api/analytics/weighting-impact - Comparaison impact"
echo "   ‚Ä¢ GET  /api/demo/candidate-profiles - Profils d√©mo"
echo "   ‚Ä¢ POST /api/match - Matching candidat ‚Üí jobs"
echo "   ‚Ä¢ POST /api/match-candidates - Matching entreprise ‚Üí candidats"
echo ""
print_status "Configuration termin√©e avec succ√®s!"

# Affichage des logs en temps r√©el (optionnel)
echo ""
read -p "Voulez-vous afficher les logs de SuperSmartMatch en temps r√©el ? (y/N): " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "Affichage des logs SuperSmartMatch (Ctrl+C pour arr√™ter)..."
    docker-compose logs -f supersmartmatch-service
fi
