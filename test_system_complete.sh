#!/bin/bash

# üß™ Script de test CV Parser V2 + Enhanced API V2.1
# Test complet du syst√®me apr√®s r√©solution

echo "üß™ === TEST COMPLET SYST√àME V2.1 ENHANCED ==="
echo "Validation du CV Parser V2 et Enhanced API V2.1"
echo ""

# Fonction de logging
log() {
    echo "[$(date '+%H:%M:%S')] $1"
}

# Test fonction avec retry
test_endpoint() {
    local url=$1
    local name=$2
    local max_retries=3
    
    for i in $(seq 1 $max_retries); do
        if curl -s -f "$url" > /dev/null; then
            echo "‚úÖ $name: OK"
            return 0
        else
            if [ $i -eq $max_retries ]; then
                echo "‚ùå $name: √âCHEC apr√®s $max_retries tentatives"
                return 1
            else
                echo "‚è≥ $name: Tentative $i/$max_retries..."
                sleep 2
            fi
        fi
    done
}

# 1. Tests de connectivit√© des services
echo "üîó === TESTS DE CONNECTIVIT√â ==="
echo ""

test_endpoint "http://localhost:5051/health" "CV Parser V2 (5051)"
CV_STATUS=$?

test_endpoint "http://localhost:5053/health" "Job Parser V2 (5053)"
JOB_STATUS=$?

test_endpoint "http://localhost:5055/health" "Enhanced API V2.1 (5055)"
API_STATUS=$?

echo ""

# 2. Test d√©taill√© du CV Parser
if [ $CV_STATUS -eq 0 ]; then
    echo "üîç === TEST D√âTAILL√â CV PARSER V2 ==="
    echo ""
    
    log "Test health check d√©taill√©..."
    HEALTH_RESPONSE=$(curl -s http://localhost:5051/health)
    echo "R√©ponse: $HEALTH_RESPONSE"
    
    # V√©rifier la pr√©sence des parsers
    echo "$HEALTH_RESPONSE" | grep -q "fix_pdf_extraction.*true" && echo "‚úÖ fix-pdf-extraction.js: Disponible" || echo "‚ùå fix-pdf-extraction.js: Manquant"
    echo "$HEALTH_RESPONSE" | grep -q "enhanced_mission_parser.*true" && echo "‚úÖ enhanced-mission-parser.js: Disponible" || echo "‚ùå enhanced-mission-parser.js: Manquant"
    echo ""
fi

# 3. Test du cas Hugo Salvat (validation V2.1)
if [ $API_STATUS -eq 0 ]; then
    echo "üë®‚Äçüíº === TEST CAS HUGO SALVAT (VALIDATION V2.1) ==="
    echo ""
    
    log "Test du cas critique Hugo Salvat..."
    HUGO_RESPONSE=$(curl -s http://localhost:5055/api/test/hugo-salvat)
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ API Enhanced r√©pond"
        
        # Extraire le score
        SCORE=$(echo "$HUGO_RESPONSE" | grep -o '"total_score":[0-9]*' | grep -o '[0-9]*')
        
        if [ ! -z "$SCORE" ]; then
            echo "üìä Score Hugo Salvat: $SCORE%"
            
            if [ "$SCORE" -lt 30 ]; then
                echo "‚úÖ SUCC√àS V2.1: Score < 30% (attendu pour √©viter faux positif)"
            else
                echo "‚ö†Ô∏è  ATTENTION: Score √©lev√© ($SCORE%) - v√©rifier la logique V2.1"
            fi
        else
            echo "‚ùå Impossible d'extraire le score"
        fi
        
        # V√©rifier les alertes
        echo "$HUGO_RESPONSE" | grep -q "domain_incompatibility" && echo "‚úÖ Alerte d'incompatibilit√© d√©tect√©e" || echo "‚ùå Alerte d'incompatibilit√© manquante"
        
    else
        echo "‚ùå √âchec test Hugo Salvat"
    fi
    echo ""
fi

# 4. Test avec fichiers r√©els (si disponibles)
echo "üìÑ === TEST FICHIERS R√âELS ==="
echo ""

BATU_CV="$HOME/Desktop/BATU Sam.pdf"
IT_JOB="$HOME/Desktop/IT .pdf"  # Attention √† l'espace avant .pdf

if [ -f "$BATU_CV" ]; then
    echo "‚úÖ CV BATU Sam trouv√©: $BATU_CV"
    
    if [ $CV_STATUS -eq 0 ]; then
        log "Test parsing CV BATU Sam..."
        
        # Test du CV Parser
        CV_RESULT=$(curl -s -X POST -F "file=@$BATU_CV" http://localhost:5051/api/parse-cv/)
        
        if echo "$CV_RESULT" | grep -q '"status":"success"'; then
            echo "‚úÖ CV BATU Sam pars√© avec succ√®s"
            
            # Extraire quelques infos
            echo "$CV_RESULT" | grep -q '"name"' && echo "  ‚úÖ Nom d√©tect√©"
            echo "$CV_RESULT" | grep -q '"professional_experience"' && echo "  ‚úÖ Exp√©riences d√©tect√©es"
            echo "$CV_RESULT" | grep -q '"skills"' && echo "  ‚úÖ Comp√©tences d√©tect√©es"
            
        else
            echo "‚ùå √âchec parsing CV BATU Sam"
            echo "Erreur: $(echo "$CV_RESULT" | grep -o '"error":"[^"]*"')"
        fi
    fi
else
    echo "‚ö†Ô∏è  CV BATU Sam non trouv√©: $BATU_CV"
fi

if [ -f "$IT_JOB" ]; then
    echo "‚úÖ Job IT trouv√©: $IT_JOB"
    
    if [ $JOB_STATUS -eq 0 ]; then
        log "Test parsing Job IT..."
        
        # Test du Job Parser  
        JOB_RESULT=$(curl -s -X POST -F "file=@$IT_JOB" http://localhost:5053/api/parse-job/)
        
        if echo "$JOB_RESULT" | grep -q '"status":"success"'; then
            echo "‚úÖ Job IT pars√© avec succ√®s"
            
            # Extraire quelques infos
            echo "$JOB_RESULT" | grep -q '"title"' && echo "  ‚úÖ Titre d√©tect√©"
            echo "$JOB_RESULT" | grep -q '"required_skills"' && echo "  ‚úÖ Comp√©tences requises d√©tect√©es"
            echo "$JOB_RESULT" | grep -q '"missions"' && echo "  ‚úÖ Missions d√©tect√©es"
            
        else
            echo "‚ùå √âchec parsing Job IT"
            echo "Erreur: $(echo "$JOB_RESULT" | grep -o '"error":"[^"]*"')"
        fi
    fi
else
    echo "‚ö†Ô∏è  Job IT non trouv√©: $IT_JOB"
fi

# 5. Test matching complet (si les deux fichiers sont disponibles)
if [ -f "$BATU_CV" ] && [ -f "$IT_JOB" ] && [ $API_STATUS -eq 0 ]; then
    echo ""
    echo "üéØ === TEST MATCHING COMPLET BATU vs IT ==="
    echo ""
    
    log "Test matching Enhanced V2.1..."
    
    # Test via l'API Enhanced avec fichiers
    MATCHING_RESULT=$(curl -s -X POST \
        -F "cv_file=@$BATU_CV" \
        -F "job_file=@$IT_JOB" \
        http://localhost:5055/api/matching/files)
    
    if echo "$MATCHING_RESULT" | grep -q '"status":"success"'; then
        echo "‚úÖ Matching Enhanced V2.1 r√©ussi"
        
        # Extraire le score
        MATCH_SCORE=$(echo "$MATCHING_RESULT" | grep -o '"total_score":[0-9]*' | grep -o '[0-9]*')
        
        if [ ! -z "$MATCH_SCORE" ]; then
            echo "üìä Score Matching BATU vs IT: $MATCH_SCORE%"
            
            if [ "$MATCH_SCORE" -gt 70 ]; then
                echo "‚úÖ EXCELLENT: Score > 70%"
            elif [ "$MATCH_SCORE" -gt 50 ]; then
                echo "‚úÖ BON: Score > 50%"
            elif [ "$MATCH_SCORE" -gt 30 ]; then
                echo "‚ö†Ô∏è  MOYEN: Score > 30%"
            else
                echo "‚ùå FAIBLE: Score < 30%"
            fi
        fi
        
        # V√©rifier les alertes
        ALERTS=$(echo "$MATCHING_RESULT" | grep -o '"alerts":\[[^]]*\]')
        if [ ! -z "$ALERTS" ]; then
            echo "üö® Alertes d√©tect√©es: $ALERTS"
        else
            echo "‚úÖ Aucune alerte"
        fi
        
    else
        echo "‚ùå √âchec matching Enhanced"
        echo "Erreur: $(echo "$MATCHING_RESULT" | grep -o '"error":"[^"]*"')"
    fi
fi

echo ""
echo "üìä === R√âSUM√â DES TESTS ==="
echo ""

# Statut global
ALL_OK=true

if [ $CV_STATUS -ne 0 ]; then
    echo "‚ùå CV Parser V2 (5051): NON FONCTIONNEL"
    ALL_OK=false
else
    echo "‚úÖ CV Parser V2 (5051): FONCTIONNEL"
fi

if [ $JOB_STATUS -ne 0 ]; then
    echo "‚ùå Job Parser V2 (5053): NON FONCTIONNEL"
    ALL_OK=false
else
    echo "‚úÖ Job Parser V2 (5053): FONCTIONNEL"
fi

if [ $API_STATUS -ne 0 ]; then
    echo "‚ùå Enhanced API V2.1 (5055): NON FONCTIONNEL"
    ALL_OK=false
else
    echo "‚úÖ Enhanced API V2.1 (5055): FONCTIONNEL"
fi

echo ""

if [ "$ALL_OK" = true ]; then
    echo "üéâ === SUCC√àS COMPLET ==="
    echo "‚úÖ Tous les services sont op√©rationnels"
    echo "‚úÖ CV Parser V2 r√©solu et fonctionnel"
    echo "‚úÖ Syst√®me V2.1 Enhanced pr√™t pour les tests en production"
    echo ""
    echo "üöÄ PROCHAINES √âTAPES:"
    echo "1. Testez en lot avec: python test_matching_system.py --cvs-folder ~/Desktop/CV\\ TEST/ --jobs-folder ~/Desktop/FDP\\ TEST/"
    echo "2. Lancez les tests comparatifs pour valider les am√©liorations V2.1"
    echo "3. Documentez les r√©sultats pour validation finale"
else
    echo "‚ö†Ô∏è  === PROBL√àMES D√âTECT√âS ==="
    echo "Certains services ne r√©pondent pas correctement"
    echo "Consultez les logs et relancez les scripts de r√©paration"
fi

echo ""
log "Test complet termin√©"
