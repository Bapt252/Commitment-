#!/usr/bin/env python3
"""
üß™ SuperSmartMatch V2 - Script de Validation d'Int√©gration

Tests end-to-end pour valider :
- D√©ploiement et sant√© de tous les services
- Int√©gration Nexten Matcher et SuperSmartMatch V1
- S√©lection intelligente d'algorithmes
- Performance et r√©silience
- APIs V2 et compatibilit√© V1
"""

import asyncio
import aiohttp
import json
import time
import sys
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

class TestResult(Enum):
    """R√©sultats possibles des tests"""
    PASS = "‚úÖ PASS"
    FAIL = "‚ùå FAIL"
    SKIP = "‚è≠Ô∏è SKIP"
    WARNING = "‚ö†Ô∏è WARNING"

@dataclass
class TestCase:
    """Cas de test avec m√©tadonn√©es"""
    name: str
    description: str
    result: TestResult = TestResult.SKIP
    execution_time_ms: float = 0.0
    details: str = ""
    error: Optional[str] = None

class SuperSmartMatchV2Validator:
    """Validateur d'int√©gration SuperSmartMatch V2"""
    
    def __init__(self, base_url: str = "http://localhost:5070"):
        self.base_url = base_url
        self.nexten_url = "http://localhost:5052"
        self.v1_url = "http://localhost:5062"
        self.results: List[TestCase] = []
        
    async def run_all_tests(self) -> Dict[str, Any]:
        """Ex√©cute tous les tests de validation"""
        
        print("üöÄ SuperSmartMatch V2 - Validation d'Int√©gration")
        print("=" * 60)
        
        # Tests de base
        await self._test_service_health()
        await self._test_external_services_health()
        
        # Tests API
        await self._test_api_v2_endpoints()
        await self._test_api_v1_compatibility()
        
        # Tests s√©lection d'algorithmes
        await self._test_algorithm_selection()
        
        # Tests d'int√©gration
        await self._test_nexten_integration()
        await self._test_v1_integration()
        
        # Tests de performance
        await self._test_performance()
        
        # Tests de r√©silience
        await self._test_circuit_breakers()
        
        # G√©n√©ration du rapport
        return self._generate_report()
    
    async def _test_service_health(self):
        """Test sant√© du service principal V2"""
        test = TestCase(
            name="Service Health Check",
            description="V√©rification sant√© SuperSmartMatch V2"
        )
        
        start_time = time.time()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/health") as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        if data.get("status") == "healthy":
                            test.result = TestResult.PASS
                            test.details = f"Version: {data.get('version', 'unknown')}"
                        else:
                            test.result = TestResult.FAIL
                            test.details = f"Status unhealthy: {data.get('status')}"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_external_services_health(self):
        """Test sant√© des services externes"""
        services = [
            ("Nexten Matcher", self.nexten_url),
            ("SuperSmartMatch V1", self.v1_url)
        ]
        
        for service_name, url in services:
            test = TestCase(
                name=f"{service_name} Health",
                description=f"V√©rification sant√© {service_name}"
            )
            
            start_time = time.time()
            
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"{url}/health") as response:
                        test.execution_time_ms = (time.time() - start_time) * 1000
                        
                        if response.status == 200:
                            test.result = TestResult.PASS
                            test.details = "Service disponible"
                        else:
                            test.result = TestResult.WARNING
                            test.details = f"HTTP {response.status} - Service d√©grad√©"
                            
            except Exception as e:
                test.result = TestResult.WARNING
                test.error = f"Service indisponible: {str(e)}"
                test.execution_time_ms = (time.time() - start_time) * 1000
            
            self.results.append(test)
            self._print_test_result(test)
    
    async def _test_api_v2_endpoints(self):
        """Test des endpoints API V2"""
        test = TestCase(
            name="API V2 Endpoints",
            description="Test endpoints API SuperSmartMatch V2"
        )
        
        start_time = time.time()
        
        # Donn√©es de test
        test_data = {
            "candidate": {
                "name": "Test User",
                "technical_skills": ["Python", "Machine Learning"],
                "experiences": [
                    {"duration_months": 24, "title": "Developer"}
                ]
            },
            "offers": [
                {
                    "id": "test_job_1",
                    "title": "Python Developer",
                    "required_skills": ["Python", "Django"]
                },
                {
                    "id": "test_job_2", 
                    "title": "ML Engineer",
                    "required_skills": ["Python", "Machine Learning", "TensorFlow"]
                }
            ],
            "algorithm": "auto"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/api/v2/match",
                    json=test_data,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        if (data.get("success") and 
                            "matches" in data and 
                            len(data["matches"]) > 0):
                            test.result = TestResult.PASS
                            test.details = f"Matches trouv√©s: {len(data['matches'])}, Algorithme: {data.get('algorithm_used')}"
                        else:
                            test.result = TestResult.FAIL
                            test.details = "R√©ponse invalide ou aucun match"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_api_v1_compatibility(self):
        """Test compatibilit√© API V1"""
        test = TestCase(
            name="API V1 Compatibility",
            description="Test compatibilit√© backward avec API V1"
        )
        
        start_time = time.time()
        
        # Format V1 legacy
        v1_data = {
            "cv_data": {
                "name": "Legacy User",
                "technical_skills": ["JavaScript", "React"]
            },
            "job_data": [
                {
                    "id": "legacy_job_1",
                    "title": "Frontend Developer",
                    "required_skills": ["JavaScript", "React", "CSS"]
                }
            ],
            "algorithm": "smart"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/match",
                    json=v1_data,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        if ("matches" in data and 
                            len(data["matches"]) > 0 and
                            "algorithm_used" in data):
                            test.result = TestResult.PASS
                            test.details = f"Compatibilit√© V1 maintenue, Version: {data.get('version', 'unknown')}"
                        else:
                            test.result = TestResult.FAIL
                            test.details = "Format de r√©ponse incompatible"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_algorithm_selection(self):
        """Test s√©lection intelligente d'algorithmes"""
        
        # Test 1: S√©lection Nexten pour questionnaires complets
        await self._test_nexten_selection()
        
        # Test 2: S√©lection Smart pour g√©olocalisation
        await self._test_smart_selection()
        
        # Test 3: S√©lection Enhanced pour s√©niors
        await self._test_enhanced_selection()
    
    async def _test_nexten_selection(self):
        """Test s√©lection Nexten pour questionnaires complets"""
        test = TestCase(
            name="Nexten Algorithm Selection",
            description="Test s√©lection Nexten pour questionnaires complets"
        )
        
        start_time = time.time()
        
        # Donn√©es avec questionnaire complet
        data_with_questionnaire = {
            "candidate": {
                "name": "Senior ML Engineer",
                "technical_skills": ["Python", "TensorFlow", "PyTorch"],
                "experiences": [{"duration_months": 48}]
            },
            "candidate_questionnaire": {
                "work_style": "collaborative",
                "culture_preferences": "innovation_focused",
                "remote_preference": "hybrid",
                "team_size_preference": "small",
                "management_style": "agile",
                "career_goals": "technical_leadership"
            },
            "offers": [
                {
                    "id": "ml_job_1",
                    "title": "Senior ML Engineer",
                    "required_skills": ["Python", "Machine Learning"]
                }
            ],
            "algorithm": "auto"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/api/v2/match",
                    json=data_with_questionnaire
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        algorithm_used = data.get("algorithm_used", "")
                        
                        if "nexten" in algorithm_used.lower():
                            test.result = TestResult.PASS
                            test.details = f"Nexten s√©lectionn√© correctement: {algorithm_used}"
                        else:
                            test.result = TestResult.WARNING
                            test.details = f"Algorithme s√©lectionn√©: {algorithm_used} (Nexten attendu)"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_smart_selection(self):
        """Test s√©lection Smart pour g√©olocalisation"""
        test = TestCase(
            name="Smart Algorithm Selection",
            description="Test s√©lection Smart pour contraintes g√©ographiques"
        )
        
        start_time = time.time()
        
        # Donn√©es avec contraintes g√©ographiques
        geo_data = {
            "candidate": {
                "name": "Mobile Developer",
                "localisation": "Paris",
                "technical_skills": ["Swift", "iOS"],
                "mobility": True
            },
            "offers": [
                {
                    "id": "ios_job_paris",
                    "title": "iOS Developer",
                    "localisation": "Lyon",
                    "required_skills": ["Swift", "iOS"]
                }
            ],
            "algorithm": "auto"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/api/v2/match",
                    json=geo_data
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        selection_reason = data.get("selection_reason", "").lower()
                        
                        if ("g√©ographique" in selection_reason or 
                            "smart" in data.get("algorithm_used", "").lower()):
                            test.result = TestResult.PASS
                            test.details = f"S√©lection g√©ographique d√©tect√©e: {data.get('algorithm_used')}"
                        else:
                            test.result = TestResult.WARNING
                            test.details = f"Raison s√©lection: {data.get('selection_reason')}"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_enhanced_selection(self):
        """Test s√©lection Enhanced pour s√©niors"""
        test = TestCase(
            name="Enhanced Algorithm Selection",
            description="Test s√©lection Enhanced pour profils s√©niors"
        )
        
        start_time = time.time()
        
        # Profil s√©nior avec 10+ ans d'exp√©rience
        senior_data = {
            "candidate": {
                "name": "Senior Tech Lead",
                "technical_skills": ["Java", "Architecture", "Leadership"],
                "experiences": [
                    {"duration_months": 36, "title": "Senior Developer"},
                    {"duration_months": 48, "title": "Tech Lead"},
                    {"duration_months": 24, "title": "Architect"}
                ]  # Total: 9 ans
            },
            "offers": [
                {
                    "id": "lead_job_1",
                    "title": "Technical Director",
                    "required_skills": ["Java", "Leadership"]
                }
            ],
            "algorithm": "auto"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/api/v2/match",
                    json=senior_data
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        context = data.get("metadata", {}).get("context_analysis", {})
                        
                        if context.get("is_senior_profile") or context.get("experience_years", 0) >= 7:
                            test.result = TestResult.PASS
                            test.details = f"Profil s√©nior d√©tect√©: {context.get('experience_years')} ans"
                        else:
                            test.result = TestResult.WARNING
                            test.details = f"Exp√©rience d√©tect√©e: {context.get('experience_years', 'unknown')} ans"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_nexten_integration(self):
        """Test int√©gration avec Nexten Matcher"""
        test = TestCase(
            name="Nexten Integration",
            description="Test int√©gration directe avec service Nexten"
        )
        
        start_time = time.time()
        
        # Force l'utilisation de Nexten
        nexten_data = {
            "candidate": {
                "name": "ML Specialist",
                "technical_skills": ["Python", "TensorFlow", "Deep Learning"]
            },
            "offers": [
                {"id": "ml_advanced", "title": "AI Research Engineer"}
            ],
            "algorithm": "nexten"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/api/v2/match",
                    json=nexten_data
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get("algorithm_used") == "nexten":
                            test.result = TestResult.PASS
                            test.details = "Int√©gration Nexten r√©ussie"
                        elif data.get("metadata", {}).get("fallback_used"):
                            test.result = TestResult.WARNING
                            test.details = f"Fallback utilis√© vers: {data.get('algorithm_used')}"
                        else:
                            test.result = TestResult.FAIL
                            test.details = f"Algorithme inattendu: {data.get('algorithm_used')}"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_v1_integration(self):
        """Test int√©gration avec SuperSmartMatch V1"""
        test = TestCase(
            name="V1 Integration",
            description="Test int√©gration avec service SuperSmartMatch V1"
        )
        
        start_time = time.time()
        
        # Force l'utilisation d'un algorithme V1
        v1_data = {
            "candidate": {
                "name": "Frontend Expert",
                "technical_skills": ["React", "TypeScript", "GraphQL"]
            },
            "offers": [
                {"id": "frontend_job", "title": "React Developer"}
            ],
            "algorithm": "smart"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/api/v2/match",
                    json=v1_data
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get("algorithm_used") == "smart":
                            test.result = TestResult.PASS
                            test.details = "Int√©gration V1 r√©ussie"
                        elif data.get("metadata", {}).get("fallback_used"):
                            test.result = TestResult.WARNING
                            test.details = f"Fallback utilis√©: {data.get('algorithm_used')}"
                        else:
                            test.result = TestResult.WARNING
                            test.details = f"Algorithme redirig√©: {data.get('algorithm_used')}"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_performance(self):
        """Test de performance"""
        test = TestCase(
            name="Performance Test",
            description="Test temps de r√©ponse sous charge"
        )
        
        # Donn√©es de test plus larges
        perf_data = {
            "candidate": {
                "name": "Performance Test User",
                "technical_skills": ["Python", "Java", "Go", "Rust", "C++"]
            },
            "offers": [
                {"id": f"perf_job_{i}", "title": f"Job {i}", "required_skills": ["Python"]}
                for i in range(20)  # 20 offres pour tester
            ],
            "algorithm": "basic"  # Utiliser basic pour test rapide
        }
        
        start_time = time.time()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/api/v2/match",
                    json=perf_data
                ) as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        if test.execution_time_ms < 1000:  # < 1 seconde
                            test.result = TestResult.PASS
                            test.details = f"Performance acceptable: {test.execution_time_ms:.0f}ms"
                        elif test.execution_time_ms < 5000:  # < 5 secondes
                            test.result = TestResult.WARNING
                            test.details = f"Performance d√©grad√©e: {test.execution_time_ms:.0f}ms"
                        else:
                            test.result = TestResult.FAIL
                            test.details = f"Performance inacceptable: {test.execution_time_ms:.0f}ms"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    async def _test_circuit_breakers(self):
        """Test des circuit breakers"""
        test = TestCase(
            name="Circuit Breakers",
            description="Test r√©silience et fallbacks"
        )
        
        start_time = time.time()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/metrics") as response:
                    test.execution_time_ms = (time.time() - start_time) * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        circuit_breakers = data.get("circuit_breaker_status", {})
                        
                        if circuit_breakers:
                            test.result = TestResult.PASS
                            test.details = f"Circuit breakers op√©rationnels: {list(circuit_breakers.keys())}"
                        else:
                            test.result = TestResult.WARNING
                            test.details = "Pas d'informations sur les circuit breakers"
                    else:
                        test.result = TestResult.FAIL
                        test.error = f"HTTP {response.status}"
                        
        except Exception as e:
            test.result = TestResult.FAIL
            test.error = str(e)
            test.execution_time_ms = (time.time() - start_time) * 1000
        
        self.results.append(test)
        self._print_test_result(test)
    
    def _print_test_result(self, test: TestCase):
        """Affiche le r√©sultat d'un test"""
        status_icon = test.result.value
        print(f"{status_icon} {test.name:<30} ({test.execution_time_ms:6.1f}ms) - {test.details}")
        
        if test.error:
            print(f"    üí• Erreur: {test.error}")
    
    def _generate_report(self) -> Dict[str, Any]:
        """G√©n√®re le rapport final"""
        
        passed = len([t for t in self.results if t.result == TestResult.PASS])
        failed = len([t for t in self.results if t.result == TestResult.FAIL])
        warnings = len([t for t in self.results if t.result == TestResult.WARNING])
        total = len(self.results)
        
        success_rate = (passed / total * 100) if total > 0 else 0
        avg_time = sum(t.execution_time_ms for t in self.results) / total if total > 0 else 0
        
        print("\n" + "=" * 60)
        print("üìä RAPPORT DE VALIDATION SUPERSMARTMATCH V2")
        print("=" * 60)
        print(f"‚úÖ Tests r√©ussis:    {passed:2d}/{total}")
        print(f"‚ùå Tests √©chou√©s:    {failed:2d}/{total}")
        print(f"‚ö†Ô∏è  Avertissements:  {warnings:2d}/{total}")
        print(f"üìà Taux de succ√®s:   {success_rate:5.1f}%")
        print(f"‚ö° Temps moyen:      {avg_time:5.1f}ms")
        
        # D√©termination du statut global
        if failed == 0 and warnings <= 1:
            global_status = "üéâ EXCELLENT - Validation compl√®te r√©ussie"
        elif failed == 0:
            global_status = "‚úÖ BON - Validation r√©ussie avec avertissements mineurs"
        elif failed <= 2:
            global_status = "‚ö†Ô∏è D√âGRAD√â - Probl√®mes d√©tect√©s n√©cessitant attention"
        else:
            global_status = "‚ùå CRITIQUE - √âchecs majeurs d√©tect√©s"
        
        print(f"\nüèÜ STATUS GLOBAL: {global_status}")
        
        if failed > 0:
            print("\nüí° ACTIONS RECOMMAND√âES:")
            for test in self.results:
                if test.result == TestResult.FAIL:
                    print(f"   - Corriger: {test.name} - {test.error or test.details}")
        
        return {
            "total_tests": total,
            "passed": passed,
            "failed": failed,
            "warnings": warnings,
            "success_rate": success_rate,
            "avg_execution_time_ms": avg_time,
            "global_status": global_status,
            "tests": [
                {
                    "name": t.name,
                    "result": t.result.name,
                    "execution_time_ms": t.execution_time_ms,
                    "details": t.details,
                    "error": t.error
                }
                for t in self.results
            ]
        }

async def main():
    """Point d'entr√©e principal"""
    
    # Configuration
    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:5070"
    
    print(f"üéØ Validation SuperSmartMatch V2 - {base_url}")
    print(f"‚è∞ D√©marrage: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Ex√©cution des tests
    validator = SuperSmartMatchV2Validator(base_url)
    report = await validator.run_all_tests()
    
    # Sauvegarde du rapport
    with open("supersmartmatch-v2-validation-report.json", "w") as f:
        json.dump(report, f, indent=2, default=str)
    
    print(f"\nüìÑ Rapport d√©taill√© sauvegard√©: supersmartmatch-v2-validation-report.json")
    
    # Code de sortie bas√© sur les r√©sultats
    exit_code = 0 if report["failed"] == 0 else 1
    sys.exit(exit_code)

if __name__ == "__main__":
    asyncio.run(main())
