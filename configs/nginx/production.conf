# Nginx Production Configuration for SuperSmartMatch V2 Migration
# Supports progressive traffic routing and feature flags

user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format with detailed metrics
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time ut="$upstream_response_time" '
                       'upstream="$upstream_addr" version="$upstream_version" '
                       'connection=$connection_requests';

    log_format json escape=json '{'
        '"timestamp":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_addr":"$upstream_addr",'
        '"user_agent":"$http_user_agent",'
        '"referer":"$http_referer",'
        '"x_forwarded_for":"$http_x_forwarded_for"'
    '}';

    access_log /var/log/nginx/access.log detailed;
    access_log /var/log/nginx/access_json.log json;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    client_max_body_size 10M;
    client_header_timeout 60s;
    client_body_timeout 60s;
    send_timeout 60s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=matching:10m rate=200r/m;
    limit_req_status 429;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 20;

    # Security headers map
    map $sent_http_content_type $security_headers {
        "~*text/html" "X-Frame-Options: DENY; X-Content-Type-Options: nosniff; X-XSS-Protection: 1; mode=block";
        default "X-Content-Type-Options: nosniff";
    }

    # Feature flag routing
    map $http_x_feature_flag $upstream_version {
        "v2_enabled" "v2";
        "beta_user" "v2";
        default "v1";
    }

    # User segment routing based on headers
    map $http_x_user_segment $user_upstream {
        "enterprise" "v1";  # Enterprise users stay on V1 initially
        "beta" "v2";        # Beta users get V2
        "api_partner" "weighted";  # API partners get weighted distribution
        default "weighted";
    }

    # Upstream definitions
    upstream supersmartmatch_v1 {
        server supersmartmatch-v1:5062 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream nexten {
        server nexten:5052 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream supersmartmatch_v2 {
        server supersmartmatch-v2:5070 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Weighted upstream for progressive rollout
    upstream supersmartmatch_weighted {
        server supersmartmatch-v1:5062 weight=90 max_fails=3 fail_timeout=30s;
        server supersmartmatch-v2:5070 weight=10 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Health check server
    server {
        listen 9113;
        server_name _;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;  # Allow monitoring network
            deny all;
        }

        location /health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main server block
    server {
        listen 80 default_server;
        server_name _;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Global health check
        location /health {
            access_log off;
            return 200 "SuperSmartMatch LoadBalancer OK\n";
            add_header Content-Type text/plain;
            add_header X-Load-Balancer-Status "healthy";
        }

        # API v1 endpoints (always V1)
        location /api/v1/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://supersmartmatch_v1;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Response headers
            add_header X-Service-Version "v1" always;
            add_header X-Response-Time $request_time always;
        }

        # API v2 endpoints (always V2)
        location /api/v2/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://supersmartmatch_v2;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Response headers
            add_header X-Service-Version "v2" always;
            add_header X-Response-Time $request_time always;
        }

        # Nexten ML endpoints
        location /api/nexten/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://nexten;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Longer timeouts for ML processing
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            add_header X-Service-Version "nexten" always;
        }

        # Main matching endpoint with intelligent routing
        location /api/match {
            limit_req zone=matching burst=50 nodelay;
            
            # Route based on feature flags and user segments
            set $target_upstream "";
            
            # Check feature flag first
            if ($http_x_feature_flag = "v2_enabled") {
                set $target_upstream "v2";
            }
            
            # Check user segment
            if ($http_x_user_segment = "enterprise") {
                set $target_upstream "v1";
            }
            
            if ($http_x_user_segment = "beta") {
                set $target_upstream "v2";
            }
            
            # Default to weighted distribution
            if ($target_upstream = "") {
                set $target_upstream "weighted";
            }
            
            # Proxy to appropriate upstream
            if ($target_upstream = "v1") {
                proxy_pass http://supersmartmatch_v1;
                add_header X-Service-Version "v1" always;
            }
            
            if ($target_upstream = "v2") {
                proxy_pass http://supersmartmatch_v2;
                add_header X-Service-Version "v2" always;
            }
            
            if ($target_upstream = "weighted") {
                proxy_pass http://supersmartmatch_weighted;
                add_header X-Service-Version "weighted" always;
            }
            
            # Common proxy settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Response headers
            add_header X-Response-Time $request_time always;
            add_header X-Upstream-Addr $upstream_addr always;
        }

        # Authentication endpoints (rate limited)
        location /api/auth/ {
            limit_req zone=auth burst=5 nodelay;
            
            proxy_pass http://supersmartmatch_v1;  # Auth stays on V1 for now
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header X-Service-Version "v1-auth" always;
        }

        # Static assets and documentation
        location /docs/ {
            proxy_pass http://supersmartmatch_v1;
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }

        # API status and metrics
        location /api/status {
            access_log off;
            proxy_pass http://supersmartmatch_v1/status;
            add_header X-Service-Version "v1" always;
        }

        # Fallback for unmatched API routes
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://supersmartmatch_weighted;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header X-Service-Version "fallback" always;
        }

        # Default location (return 404 for non-API requests)
        location / {
            return 404 '{"error": "Not Found", "message": "Use /api/* endpoints"}';
            add_header Content-Type application/json;
        }

        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "status": 404}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "status": 500}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server (when SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     server_name api.supersmartmatch.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Include all the location blocks from the HTTP server above
    # }
}