# üöÄ PROMPT 2: Docker Compose Ultra v2.0 - Parsers temps r√©el
# SuperSmartMatch V2 - Architecture microservices avec parsers ultra-optimis√©s

version: '3.8'

services:
  # ===========================================
  # API GATEWAY - Port 5050 (Inchang√©)
  # ===========================================
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: supersmartmatch_api_gateway
    ports:
      - "5050:5050"
    environment:
      - NODE_ENV=production
      - PORT=5050
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=24h
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW=900000
      # Routes vers parsers ULTRA
      - CV_PARSER_URL=http://cv-parser-ultra:5051
      - JOB_PARSER_URL=http://job-parser-ultra:5053
      - MATCHING_SERVICE_URL=http://matching-service:5052
      - USER_SERVICE_URL=http://user-service:5054
      - NOTIFICATION_SERVICE_URL=http://notification-service:5055
      - ANALYTICS_SERVICE_URL=http://analytics-service:5056
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
    volumes:
      - ./logs/api-gateway:/var/log/app
    networks:
      - microservices_network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # ===========================================
  # CV PARSER ULTRA v2.0 - Port 5051 ‚ö°
  # ===========================================
  cv-parser-ultra:
    build:
      context: ./services/cv-parser-ultra
      dockerfile: Dockerfile
    container_name: supersmartmatch_cv_parser_ultra
    ports:
      - "5051:5051"
    environment:
      - NODE_ENV=production
      - PORT=5051
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4
      - REDIS_URL=redis://redis:6379/0
      - CACHE_TTL=86400
      - MAX_FILE_SIZE=10485760
      - SUPPORTED_FORMATS=.pdf,.docx,.doc,.jpg,.jpeg,.png
      - WEBSOCKET_HEARTBEAT_INTERVAL=30
      - PARSING_TIMEOUT=300
      - TESSERACT_CONFIG=--oem 3 --psm 6
      - LOG_LEVEL=info
      - PROMETHEUS_ENABLED=true
    volumes:
      - ./logs/cv-parser-ultra:/var/log/app
      - ./temp/cv-uploads-ultra:/tmp/uploads
    networks:
      - microservices_network
    restart: unless-stopped
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ===========================================
  # JOB PARSER ULTRA v2.0 - Port 5053 üéØ
  # ===========================================
  job-parser-ultra:
    build:
      context: ./services/job-parser-ultra
      dockerfile: Dockerfile
    container_name: supersmartmatch_job_parser_ultra
    ports:
      - "5053:5053"
    environment:
      - NODE_ENV=production
      - PORT=5053
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4
      - REDIS_URL=redis://redis:6379/1
      - CACHE_TTL=86400
      - MAX_FILE_SIZE=5242880
      - SUPPORTED_FORMATS=.pdf,.docx,.doc,.html,.txt
      - WEBSOCKET_HEARTBEAT_INTERVAL=30
      - PARSING_TIMEOUT=180
      - LOG_LEVEL=info
      - PROMETHEUS_ENABLED=true
    volumes:
      - ./logs/job-parser-ultra:/var/log/app
      - ./temp/job-uploads-ultra:/tmp/uploads
    networks:
      - microservices_network
    restart: unless-stopped
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5053/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.3'

  # ===========================================
  # MATCHING SERVICE - Port 5052 (Inchang√© mais optimis√©)
  # ===========================================
  matching-service:
    build:
      context: ./services/matching
      dockerfile: Dockerfile
    container_name: supersmartmatch_matching
    ports:
      - "5052:5052"
    environment:
      - NODE_ENV=production
      - PORT=5052
      - POSTGRES_URL=postgresql://ssm_user:${POSTGRES_PASSWORD}@postgres:5432/matching_db
      - REDIS_URL=redis://redis:6379/2
      - ALGORITHM_VERSION=v2_optimized
      - ENABLE_ML_ENHANCEMENT=true
      - SCORE_THRESHOLD=0.75
      - MAX_CONCURRENT_MATCHES=100
      - CACHE_TTL=3600
      - LOG_LEVEL=info
      - ENABLE_ANALYTICS_TRACKING=true
      # Int√©gration avec parsers ultra
      - CV_PARSER_ULTRA_URL=http://cv-parser-ultra:5051
      - JOB_PARSER_ULTRA_URL=http://job-parser-ultra:5053
    volumes:
      - ./logs/matching:/var/log/app
      - ./models:/var/models
    networks:
      - microservices_network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - cv-parser-ultra
      - job-parser-ultra
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5052/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ===========================================
  # USER SERVICE - Port 5054 (Inchang√©)
  # ===========================================
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: supersmartmatch_user
    ports:
      - "5054:5054"
    environment:
      - NODE_ENV=production
      - PORT=5054
      - POSTGRES_URL=postgresql://ssm_user:${POSTGRES_PASSWORD}@postgres:5432/user_db
      - REDIS_URL=redis://redis:6379/3
      - JWT_SECRET=${JWT_SECRET}
      - BCRYPT_ROUNDS=12
      - SESSION_TTL=86400
      - ENABLE_EMAIL_VERIFICATION=true
      - ENABLE_2FA=false
      - PASSWORD_MIN_LENGTH=8
      - LOG_LEVEL=info
    volumes:
      - ./logs/user:/var/log/app
    networks:
      - microservices_network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5054/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # ===========================================
  # NOTIFICATION SERVICE - Port 5055 (WebSocket enhanced)
  # ===========================================
  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: supersmartmatch_notification
    ports:
      - "5055:5055"
    environment:
      - NODE_ENV=production
      - PORT=5055
      - POSTGRES_URL=postgresql://ssm_user:${POSTGRES_PASSWORD}@postgres:5432/notification_db
      - REDIS_URL=redis://redis:6379/4
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - ENABLE_WEBSOCKETS=true
      - ENABLE_PUSH_NOTIFICATIONS=true
      - NOTIFICATION_QUEUE_SIZE=10000
      - BATCH_SIZE=100
      - LOG_LEVEL=info
      # Int√©gration avec parsers ultra pour notifications temps r√©el
      - CV_PARSER_WEBHOOK_URL=http://cv-parser-ultra:5051/webhooks
      - JOB_PARSER_WEBHOOK_URL=http://job-parser-ultra:5053/webhooks
    volumes:
      - ./logs/notification:/var/log/app
    networks:
      - microservices_network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5055/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # ===========================================
  # ANALYTICS SERVICE - Port 5056 (Enhanced with Ultra metrics)
  # ===========================================
  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: supersmartmatch_analytics
    ports:
      - "5056:5056"
    environment:
      - NODE_ENV=production
      - PORT=5056
      - POSTGRES_URL=postgresql://ssm_user:${POSTGRES_PASSWORD}@postgres:5432/analytics_db
      - REDIS_URL=redis://redis:6379/5
      - ENABLE_REALTIME_METRICS=true
      - DATA_RETENTION_DAYS=365
      - AGGREGATION_INTERVAL=300
      - ENABLE_PROMETHEUS_METRICS=true
      - LOG_LEVEL=info
      # M√©triques des parsers ultra
      - TRACK_ULTRA_PARSING=true
      - PARSING_METRICS_ENDPOINT=http://prometheus:9090
    volumes:
      - ./logs/analytics:/var/log/app
    networks:
      - microservices_network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5056/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.3'

  # ===========================================
  # DATABASE - PostgreSQL (Enhanced)
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: supersmartmatch_postgres
    environment:
      - POSTGRES_USER=ssm_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=supersmartmatch
      # Bases sp√©cifiques pour parsers ultra
      - POSTGRES_MULTIPLE_DATABASES=cv_parser_ultra_db,job_parser_ultra_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
      # Scripts d'initialisation pour ultra
      - ./database/ultra-init:/docker-entrypoint-initdb.d/ultra
    networks:
      - microservices_network
    restart: unless-stopped
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=300
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c work_mem=8MB
      -c maintenance_work_mem=128MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ssm_user -d supersmartmatch"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1.5G
          cpus: '0.5'

  # ===========================================
  # CACHE - Redis (Enhanced with multiple DBs)
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: supersmartmatch_redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --databases 16
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - microservices_network
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.2'

  # ===========================================
  # OBJECT STORAGE - MinIO (Inchang√©)
  # ===========================================
  minio:
    image: minio/minio:latest
    container_name: supersmartmatch_minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    volumes:
      - minio_data:/data
    networks:
      - microservices_network
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.1'

  # ===========================================
  # REVERSE PROXY & LOAD BALANCER - Nginx (Enhanced)
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: supersmartmatch_nginx
    volumes:
      - ./nginx/nginx-ultra.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - microservices_network
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Load balancer metrics
    depends_on:
      - api-gateway
      - cv-parser-ultra
      - job-parser-ultra
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # ===========================================
  # MONITORING - Prometheus (Enhanced with Ultra metrics)
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: supersmartmatch_prometheus
    volumes:
      - ./monitoring/prometheus/prometheus-ultra.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - ./monitoring/prometheus/ultra-rules:/etc/prometheus/ultra-rules:ro
      - prometheus_data:/prometheus
    networks:
      - microservices_network
    restart: unless-stopped
    ports:
      - "9091:9090"  # Port modifi√© selon votre config
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.3'

  # ===========================================
  # MONITORING - Grafana (Enhanced with Ultra dashboards)
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    container_name: supersmartmatch_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/ultra-dashboards:/etc/grafana/provisioning/ultra-dashboards:ro
      - grafana_data:/var/lib/grafana
    networks:
      - microservices_network
    restart: unless-stopped
    ports:
      - "3001:3000"  # Port modifi√© selon votre config
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'

# ===========================================
# NETWORKS
# ===========================================
networks:
  microservices_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
