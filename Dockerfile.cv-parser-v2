# SuperSmartMatch V2 - CV Parser Enrichi
# ========================================
#
# Image Docker optimis√©e pour CV Parser V2 avec extraction missions d√©taill√©es
# - Base Python 3.11 avec Node.js 18
# - Enhanced mission parser int√©gr√©
# - OCR et parsing multi-formats
# - Cache Redis int√©gr√©
# - Monitoring et health checks
#
# Version: 2.0.0
# Author: Baptiste Coma
# Created: June 2025

FROM python:3.11-slim

# M√©tadonn√©es
LABEL maintainer="Baptiste Coma <baptiste.coma@gmail.com>"
LABEL version="2.0.0"
LABEL description="SuperSmartMatch V2 - CV Parser with Enhanced Mission Extraction"
LABEL service="cv-parser-v2"

# Variables d'environnement
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive \
    NODE_VERSION=18.17.0 \
    APP_ENV=production \
    PARSER_VERSION=2.0.0

# Installation des d√©pendances syst√®me
RUN apt-get update && apt-get install -y \
    # Outils de base
    curl \
    wget \
    git \
    build-essential \
    # Node.js et npm
    nodejs \
    npm \
    # OCR et traitement d'images
    tesseract-ocr \
    tesseract-ocr-fra \
    poppler-utils \
    imagemagick \
    # Traitement PDF
    ghostscript \
    # Nettoyage
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Mise √† jour npm et installation yarn
RUN npm install -g npm@latest yarn

# Cr√©ation utilisateur non-root
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Cr√©ation des r√©pertoires
WORKDIR /app
RUN mkdir -p /app/logs /app/uploads /app/cache /app/temp && \
    chown -R appuser:appuser /app

# Copie des fichiers requirements
COPY cv-parser-v2/requirements.txt /app/
COPY cv-parser-v2/package.json /app/
COPY cv-parser-v2/yarn.lock /app/

# Installation d√©pendances Python
RUN pip install --upgrade pip && \
    pip install -r requirements.txt

# Installation d√©pendances Node.js
RUN yarn install --production --frozen-lockfile

# Copie du code source
COPY cv-parser-v2/ /app/
COPY enhanced-mission-parser.js /app/
COPY fix-pdf-extraction.js /app/

# Configuration des permissions
RUN chown -R appuser:appuser /app && \
    chmod +x /app/*.py /app/*.js

# Installation des binaires sp√©cialis√©s
RUN pip install --no-cache-dir \
    # PDF processing
    pdfplumber==0.9.0 \
    PyPDF2==3.0.1 \
    pymupdf==1.23.0 \
    # OCR et vision
    pytesseract==0.3.10 \
    opencv-python-headless==4.8.0.74 \
    pillow==10.0.0 \
    # NLP et parsing
    spacy==3.6.1 \
    nltk==3.8.1 \
    # API et web
    fastapi==0.103.0 \
    uvicorn==0.23.2 \
    python-multipart==0.0.6 \
    # Cache et database
    redis==4.6.0 \
    # Monitoring
    prometheus-client==0.17.1 \
    # Utilities
    python-json-logger==2.0.7

# Installation mod√®les spaCy
RUN python -m spacy download fr_core_news_sm && \
    python -m spacy download en_core_web_sm

# Configuration NLTK
RUN python -c "import nltk; nltk.download('punkt'); nltk.download('stopwords'); nltk.download('averaged_perceptron_tagger')"

# Configuration ImageMagick (politique s√©curit√© PDF)
RUN sed -i 's/rights="none" pattern="PDF"/rights="read" pattern="PDF"/' /etc/ImageMagick-6/policy.xml

# Script de sant√©
COPY <<EOF /app/healthcheck.py
#!/usr/bin/env python3
import sys
import requests
import json
from datetime import datetime

def health_check():
    try:
        # Test API health endpoint
        response = requests.get('http://localhost:5051/health', timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check passed: {data}")
            return 0
        else:
            print(f"‚ùå Health check failed: HTTP {response.status_code}")
            return 1
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(health_check())
EOF

RUN chmod +x /app/healthcheck.py

# Script d'entrypoint
COPY <<EOF /app/entrypoint.sh
#!/bin/bash
set -e

echo "üöÄ Starting SuperSmartMatch V2 - CV Parser"
echo "Version: ${PARSER_VERSION}"
echo "Environment: ${APP_ENV}"
echo "Timestamp: $(date)"

# V√©rification des d√©pendances
echo "üìã Checking dependencies..."
python -c "import cv2, pytesseract, redis, fastapi; print('‚úÖ Python dependencies OK')"
node -e "console.log('‚úÖ Node.js dependencies OK')"

# Initialisation des r√©pertoires
mkdir -p /app/logs /app/uploads /app/cache /app/temp
chmod 755 /app/logs /app/uploads /app/cache /app/temp

# D√©marrage du serveur
echo "üåê Starting CV Parser V2 server on port 5051..."
exec python app.py
EOF

RUN chmod +x /app/entrypoint.sh

# Configuration logging
RUN mkdir -p /app/logs && \
    touch /app/logs/cv-parser.log /app/logs/mission-extraction.log /app/logs/error.log

# Changement vers utilisateur non-root
USER appuser

# Exposition du port
EXPOSE 5051

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python /app/healthcheck.py

# Point d'entr√©e
ENTRYPOINT ["/app/entrypoint.sh"]

# M√©triques Docker
LABEL metrics.port="5051" \
      metrics.path="/metrics" \
      logs.path="/app/logs" \
      config.path="/app/config"

# Build arguments pour optimisation
ARG BUILD_DATE
ARG GIT_COMMIT
ARG VERSION=2.0.0

LABEL build-date=$BUILD_DATE \
      git-commit=$GIT_COMMIT \
      version=$VERSION

# Optimisations finales
RUN find /app -name "*.pyc" -delete && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Volume pour persistence
VOLUME ["/app/logs", "/app/uploads", "/app/cache"]

# Signal handling
STOPSIGNAL SIGTERM

# Documentation
COPY <<EOF /app/README_DOCKER.md
# CV Parser V2 Docker Image

## Features
- Python 3.11 + Node.js 18
- Enhanced mission extraction
- OCR support (Tesseract)
- Multi-format parsing (PDF, DOCX, images)
- Redis cache integration
- Prometheus metrics
- Health checks

## Usage
\`\`\`bash
docker run -p 5051:5051 cv-parser-v2
\`\`\`

## API Endpoints
- GET /health - Health check
- POST /api/parse-cv/ - Parse CV with mission extraction
- GET /metrics - Prometheus metrics

## Environment Variables
- PARSER_VERSION=2.0.0
- REDIS_URL=redis://localhost:6379
- LOG_LEVEL=info
- MISSION_EXTRACTION=enabled

## Volumes
- /app/logs - Log files
- /app/uploads - Uploaded files
- /app/cache - Cache directory
EOF
