#!/usr/bin/env python3
"""
üßπ SCRIPT DE NETTOYAGE COMMITMENT - ARCHITECTURE BACKEND
======================================================

Script de nettoyage automatis√© pour √©liminer les fichiers redondants
tout en pr√©servant les fonctionnalit√©s essentielles.

‚ö†Ô∏è  PRIORIT√â ABSOLUE: Pr√©server le syst√®me de parsing CV (valid√© excellent)
üéØ OBJECTIF: Passer de 7+ algorithmes √† 2, de 6+ APIs √† 3

D√©velopp√© selon les sp√©cifications du document d'analyse.
"""

import os
import shutil
import json
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Set

class CommitmentCleanup:
    def __init__(self, repo_path: str = "."):
        self.repo_path = Path(repo_path)
        self.backup_dir = self.repo_path / f"backup_cleanup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.log_file = self.repo_path / "cleanup_log.json"
        self.log_data = {
            "timestamp": datetime.now().isoformat(),
            "files_deleted": [],
            "files_preserved": [],
            "backup_location": str(self.backup_dir),
            "errors": []
        }
        
        # üîí FICHIERS CRITIQUES √Ä NE JAMAIS TOUCHER (adapt√©s √† la structure r√©elle)
        self.critical_files = {
            "backend/job_parser_service.py",
            "backend/job_parser_api.py"
        }
        
        # üìÑ FICHIERS CRITIQUES OPTIONNELS (v√©rifi√©s mais pas bloquants)
        self.optional_critical_files = {
            "templates/candidate-upload.html",
            "static/js/gpt-parser-client.js"
        }
        
        # ‚≠ê FICHIERS √Ä CONSERVER (algorithmes principaux)
        self.keep_files = {
            "backend/super_smart_match_v3.py",
            "backend/unified_matching_service.py"
        }
        
        # ‚ùå ALGORITHMES REDONDANTS √Ä SUPPRIMER  
        self.algorithms_to_delete = {
            "backend/super_smart_match.py",  # 0 bytes - vide
            "backend/super_smart_match_v2.py",  # obsol√®te
            "backend/super_smart_match_v2_nexten_integration.py",  # obsol√®te
            "matching_service_v1.py",  # obsol√®te
            "matching_service_v2.py"   # obsol√®te
        }
        
        # ‚ùå APIs REDONDANTES √Ä SUPPRIMER
        self.apis_to_delete = {
            "api-matching-advanced.py",
            "api-matching-enhanced-v2.py", 
            "api-matching-enhanced-v2-no-cors.py"
            # Note: api-matching-enhanced-v2.1-fixed.py analys√© s√©par√©ment
        }
        
        # ‚ùå FICHIERS VIDES √Ä SUPPRIMER
        self.empty_files_to_delete = {
            "backend/health_app.py"  # 0 bytes confirm√©
        }

    def create_backup(self):
        """Cr√©er une sauvegarde compl√®te avant nettoyage"""
        print(f"üîÑ Cr√©ation de la sauvegarde dans {self.backup_dir}")
        try:
            self.backup_dir.mkdir(exist_ok=True)
            
            # Sauvegarder tous les fichiers √† supprimer
            all_files_to_delete = (
                self.algorithms_to_delete | 
                self.apis_to_delete | 
                self.empty_files_to_delete
            )
            
            for file_path in all_files_to_delete:
                full_path = self.repo_path / file_path
                if full_path.exists():
                    backup_path = self.backup_dir / file_path
                    backup_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copy2(full_path, backup_path)
                    print(f"  ‚úÖ Sauvegard√©: {file_path}")
                    
            print(f"‚úÖ Sauvegarde cr√©√©e avec succ√®s")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la sauvegarde: {e}"
            print(error_msg)
            self.log_data["errors"].append(error_msg)
            return False

    def verify_critical_files(self) -> bool:
        """V√©rifier que tous les fichiers critiques sont pr√©sents"""
        print("üîç V√©rification des fichiers critiques...")
        missing_critical = []
        missing_optional = []
        
        # V√©rifier les fichiers critiques obligatoires
        for critical_file in self.critical_files:
            full_path = self.repo_path / critical_file
            if not full_path.exists():
                missing_critical.append(critical_file)
        
        # V√©rifier les fichiers optionnels (informatif seulement)
        for optional_file in self.optional_critical_files:
            full_path = self.repo_path / optional_file
            if not full_path.exists():
                missing_optional.append(optional_file)
            else:
                print(f"  ‚úÖ Fichier optionnel pr√©sent: {optional_file}")
                
        if missing_critical:
            print("‚ùå ARR√äT: Fichiers critiques manquants:")
            for file in missing_critical:
                print(f"  ‚ö†Ô∏è  {file}")
            return False
            
        if missing_optional:
            print("‚ö†Ô∏è  Fichiers optionnels manquants (non bloquant):")
            for file in missing_optional:
                print(f"  üìù {file}")
            
        print("‚úÖ Tous les fichiers critiques obligatoires sont pr√©sents")
        return True

    def analyze_dependencies(self, file_path: str) -> Dict[str, List[str]]:
        """Analyser les d√©pendances d'un fichier de mani√®re d√©taill√©e"""
        dependencies = {
            "imports": [],
            "relative_imports": [],
            "local_references": []
        }
        
        try:
            full_path = self.repo_path / file_path
            if full_path.exists() and full_path.suffix == '.py':
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # Rechercher diff√©rents types d'imports
                import re
                
                # Imports absolus
                abs_imports = re.findall(r'import\s+(\w+)', content)
                dependencies["imports"].extend(abs_imports)
                
                # Imports relatifs
                rel_imports = re.findall(r'from\s+\..*?import\s+(\w+)', content)
                dependencies["relative_imports"].extend(rel_imports)
                
                # R√©f√©rences locales √† d'autres fichiers du projet
                local_refs = re.findall(r'super_smart_match|matching_service|api[-_]matching', content)
                dependencies["local_references"].extend(local_refs)
                
        except Exception as e:
            self.log_data["errors"].append(f"Erreur analyse d√©pendances {file_path}: {e}")
            
        return dependencies

    def fix_dependencies_before_deletion(self):
        """Analyser et corriger les d√©pendances avant suppression"""
        print("\nüîß Analyse et correction des d√©pendances...")
        
        # V√©rifier si super_smart_match_v3 d√©pend de v2
        v3_path = self.repo_path / "backend/super_smart_match_v3.py"
        if v3_path.exists():
            try:
                with open(v3_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Chercher des imports de v2
                if 'super_smart_match_v2' in content:
                    print("  ‚ö†Ô∏è  super_smart_match_v3 d√©pend de v2 - Correction n√©cessaire")
                    
                    # Cr√©er une version corrig√©e
                    corrected_content = content.replace(
                        'from super_smart_match_v2',
                        '# from super_smart_match_v2  # Removed dependency'
                    ).replace(
                        'import super_smart_match_v2',
                        '# import super_smart_match_v2  # Removed dependency'
                    )
                    
                    # Sauvegarder la version corrig√©e
                    backup_v3 = v3_path.with_suffix('.py.backup')
                    shutil.copy2(v3_path, backup_v3)
                    
                    with open(v3_path, 'w', encoding='utf-8') as f:
                        f.write(corrected_content)
                    
                    print(f"  ‚úÖ D√©pendances corrig√©es dans super_smart_match_v3.py")
                    print(f"  üìÅ Backup cr√©√©: {backup_v3}")
                else:
                    print("  ‚úÖ super_smart_match_v3 n'a pas de d√©pendances probl√©matiques")
                    
            except Exception as e:
                print(f"  ‚ùå Erreur lors de la correction des d√©pendances: {e}")

    def delete_redundant_files(self):
        """Supprimer les fichiers redondants identifi√©s"""
        print("\nüóëÔ∏è  D√©but de la suppression des fichiers redondants...")
        
        all_files_to_delete = (
            self.algorithms_to_delete | 
            self.apis_to_delete | 
            self.empty_files_to_delete
        )
        
        deleted_count = 0
        for file_path in all_files_to_delete:
            full_path = self.repo_path / file_path
            
            if not full_path.exists():
                print(f"  ‚ö†Ô∏è  Fichier d√©j√† absent: {file_path}")
                continue
                
            try:
                # Analyser les d√©pendances avant suppression
                deps = self.analyze_dependencies(file_path)
                if deps["local_references"]:
                    print(f"  üìã R√©f√©rences locales d√©tect√©es dans {file_path}: {len(deps['local_references'])}")
                
                # Obtenir la taille avant suppression
                file_size = full_path.stat().st_size
                
                # Supprimer le fichier
                full_path.unlink()
                deleted_count += 1
                
                print(f"  ‚úÖ Supprim√©: {file_path} ({file_size} bytes)")
                self.log_data["files_deleted"].append({
                    "path": file_path,
                    "size_bytes": file_size,
                    "dependencies": deps
                })
                
            except Exception as e:
                error_msg = f"‚ùå Erreur suppression {file_path}: {e}"
                print(error_msg)
                self.log_data["errors"].append(error_msg)
        
        print(f"\n‚úÖ Suppression termin√©e: {deleted_count} fichiers supprim√©s")

    def verify_main_api(self):
        """V√©rifier et analyser l'API principale actuelle"""
        print("\nüîç Analyse de l'API principale...")
        
        main_api_candidates = [
            "api-matching-enhanced-v2.1-fixed.py",
            "backend/api.py"
        ]
        
        for api_file in main_api_candidates:
            full_path = self.repo_path / api_file
            if full_path.exists():
                try:
                    size = full_path.stat().st_size
                    print(f"  üìÑ {api_file}: {size} bytes")
                    
                    # V√©rifier si c'est l'API principale utilis√©e
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if 'super_smart_match_v3' in content:
                            print(f"  ‚≠ê {api_file} utilise super_smart_match_v3 (√Ä CONSERVER)")
                            self.log_data["files_preserved"].append(api_file)
                        elif 'unified_matching_service' in content:
                            print(f"  ‚≠ê {api_file} utilise unified_matching_service (√Ä CONSERVER)")
                            self.log_data["files_preserved"].append(api_file)
                            
                except Exception as e:
                    print(f"  ‚ùå Erreur analyse {api_file}: {e}")

    def clean_empty_directories(self):
        """Nettoyer les r√©pertoires vides apr√®s suppression"""
        print("\nüßπ Nettoyage des r√©pertoires vides...")
        
        dirs_to_check = [
            self.repo_path / "backend",
            self.repo_path / "api"
        ]
        
        for dir_path in dirs_to_check:
            if dir_path.exists():
                try:
                    # Tentative de suppression des r√©pertoires vides
                    for root, dirs, files in os.walk(dir_path, topdown=False):
                        for d in dirs:
                            dir_to_remove = Path(root) / d
                            if dir_to_remove.is_dir() and not any(dir_to_remove.iterdir()):
                                dir_to_remove.rmdir()
                                print(f"  üóëÔ∏è  R√©pertoire vide supprim√©: {dir_to_remove}")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  Erreur nettoyage r√©pertoires: {e}")

    def generate_cleanup_report(self):
        """G√©n√©rer un rapport d√©taill√© du nettoyage"""
        print("\nüìä G√©n√©ration du rapport de nettoyage...")
        
        # Calculer les statistiques
        total_deleted = len(self.log_data["files_deleted"])
        total_preserved = len(self.log_data["files_preserved"])
        
        # Ajouter les statistiques au log
        self.log_data["statistics"] = {
            "files_deleted": total_deleted,
            "files_preserved": total_preserved,
            "algorithms_before": 7,
            "algorithms_after": 2,
            "apis_before": 6,
            "apis_after": 3,
            "critical_files_preserved": len(self.critical_files)
        }
        
        # Sauvegarder le log
        try:
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(self.log_data, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Rapport sauvegard√©: {self.log_file}")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde rapport: {e}")

    def run_cleanup(self):
        """Ex√©cuter le processus complet de nettoyage"""
        print("üöÄ D√âBUT DU NETTOYAGE COMMITMENT")
        print("=" * 50)
        
        # √âtape 1: V√©rifications pr√©liminaires
        if not self.verify_critical_files():
            print("‚ùå ARR√äT: Fichiers critiques manquants")
            return False
            
        # √âtape 2: Cr√©ation de la sauvegarde
        if not self.create_backup():
            print("‚ùå ARR√äT: Impossible de cr√©er la sauvegarde")
            return False
            
        # √âtape 3: Analyse de l'API principale
        self.verify_main_api()
        
        # √âtape 4: Correction des d√©pendances
        self.fix_dependencies_before_deletion()
        
        # √âtape 5: Suppression des fichiers redondants
        self.delete_redundant_files()
        
        # √âtape 6: Nettoyage des r√©pertoires vides
        self.clean_empty_directories()
        
        # √âtape 7: G√©n√©ration du rapport
        self.generate_cleanup_report()
        
        print("\n" + "=" * 50)
        print("‚úÖ NETTOYAGE TERMIN√â AVEC SUCC√àS")
        print(f"üìÅ Sauvegarde: {self.backup_dir}")
        print(f"üìä Rapport: {self.log_file}")
        print("\nüéØ ARCHITECTURE SIMPLIFI√âE:")
        print("  ‚Ä¢ 2 algorithmes au lieu de 7+")
        print("  ‚Ä¢ 3 APIs au lieu de 6+") 
        print("  ‚Ä¢ Syst√®me de parsing CV pr√©serv√© int√©gralement")
        print("  ‚Ä¢ D√©pendances circulaires corrig√©es")
        
        return True

def main():
    """Point d'entr√©e principal"""
    print("üéØ COMMITMENT - SCRIPT DE NETTOYAGE BACKEND")
    print("Nettoyage des redondances architecturales")
    print("‚ö†Ô∏è  ATTENTION: Ce script va supprimer des fichiers!")
    
    # Demander confirmation
    response = input("\nContinuer le nettoyage? (y/N): ").strip().lower()
    if response != 'y':
        print("‚ùå Nettoyage annul√© par l'utilisateur")
        return
    
    # Ex√©cuter le nettoyage
    cleanup = CommitmentCleanup()
    success = cleanup.run_cleanup()
    
    if success:
        print("\nüéâ Nettoyage r√©ussi! Votre architecture est maintenant simplifi√©e.")
        print("üîç V√©rifiez que les pages frontend fonctionnent toujours:")
        print("   - https://bapt252.github.io/Commitment-/templates/candidate-upload.html")
        print("   - https://bapt252.github.io/Commitment-/templates/candidate-matching-improved.html")
        print("\nüß™ Lancez maintenant la validation:")
        print("   python3 commitment_test.py")
    else:
        print("\n‚ùå Nettoyage √©chou√©. V√©rifiez les logs pour plus d'informations.")
        sys.exit(1)

if __name__ == "__main__":
    main()
