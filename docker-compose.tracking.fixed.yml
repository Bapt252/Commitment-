services:
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=commitment
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - commitment-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - commitment-network

  tracking-api:
    build:
      context: .
      dockerfile: tracking/Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=commitment
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - CONSENT_VERSION=1.0
      - LOG_LEVEL=INFO
    ports:
      - "5055:5000"
    volumes:
      - ./tracking:/app/tracking
      - ./api:/app/api
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - commitment-network
  
  tracking-processor:
    build:
      context: .
      dockerfile: tracking/Dockerfile.processor
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=commitment
      - REDIS_URL=redis://redis:6379
      - ML_SERVICE_URL=http://ml-engine:5000
      - PROCESSING_INTERVAL=30
      - LOG_LEVEL=INFO
    volumes:
      - ./tracking:/app/tracking
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - commitment-network
  
  prometheus:
    image: prom/prometheus:v2.40.0
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - commitment-network
  
  grafana:
    image: grafana/grafana:9.2.0
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-postgresql-datasource
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - commitment-network

volumes:
  postgres_data:
  redis-data:
  prometheus_data:
  grafana_data:

networks:
  commitment-network:
    driver: bridge
