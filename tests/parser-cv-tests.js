/**
 * Tests pour le Parser CV Optimis√© Commitment
 * Fichier de validation et exemples d'utilisation
 */

// Donn√©es de test : CV de Sabine Rivi√®re (Executive Assistant)
const testCVSabine = `
Sabine Rivi√®re
Executive Assistant

E-mail: sabine.riviere04@gmail.com
T√©l√©phone: +33665733921

Exp√©rience

06/2024 - 01/2025
Executive Assistant : Direction Financi√®re Audit / Fiscalit√© / Tr√©sorerie
Maison Christian Dior Couture : Int√©rim 8 mois, Paris 08

06/2023 - 05/2024
EXECUTIVE ASSISTANT : Direction Fonds de Fonds COMEX / CODIR / CMG
BPI FRANCE, Paris

08/2019 - 05/2023
EXECUTIVE ASSISTANT/ ASSISTANTE PERSONNELLE de la CEO
Les Secrets de Loly, Paris

Comp√©tences
Tenue d'agendas
Suivi budg√©taire
Pr√©paration de rapports
Autonomie
Sens de la communication
Excellente organisation du travail

Informatique
Microsoft
Concur
Coupa
SAP
Pennylane
Google / Outlook

Langues
French - A1
Anglais - A1

Formation
- 01/2006 DIPL√îME D'√âTUDES SUP√âRIEURES ESVE, Paris
- 01/2014 Business & Economics, BA Birkbeck University, London
`;

// Donn√©es de test : CV D√©veloppeur
const testCVDeveloper = `
Jean Dupont
D√©veloppeur Full Stack Senior

Email: jean.dupont@email.com
Tel: 01 23 45 67 89

EXPERIENCE PROFESSIONNELLE

2022 - Pr√©sent
D√©veloppeur Full Stack Senior
TechCorp Solutions, Paris
- D√©veloppement d'applications React/Node.js
- Architecture microservices avec Docker
- Gestion d'√©quipe de 5 d√©veloppeurs

2020 - 2022
D√©veloppeur Front-End
WebAgency Digital, Lyon
- Cr√©ation d'interfaces React et Vue.js
- Int√©gration APIs REST
- Optimisation performance web

COMPETENCES TECHNIQUES
JavaScript, TypeScript, React, Vue.js, Node.js, Express
Python, Django, Flask
HTML5, CSS3, SASS, Bootstrap
MySQL, PostgreSQL, MongoDB
Git, Docker, Kubernetes, AWS
Agile, Scrum, DevOps

LOGICIELS
Visual Studio Code, WebStorm, Docker Desktop
Figma, Adobe Photoshop, Postman
Jira, Confluence, Slack

LANGUES
Fran√ßais - Natif
Anglais - Courant (C1)
Espagnol - Interm√©diaire (B2)

FORMATION
2019 - Master Informatique, Universit√© Lyon 1
2017 - Licence Informatique, Universit√© Lyon 1
`;

/**
 * Classe de test pour valider le parser optimis√©
 */
class CommitmentParserTests {
    constructor() {
        this.tests = [];
        this.results = [];
    }

    /**
     * Lance tous les tests
     */
    async runAllTests() {
        console.log('üß™ D√©marrage des tests du parser CV optimis√© Commitment...');
        
        // V√©rifier que les composants sont charg√©s
        this.testComponentsLoaded();
        
        // Tests avec CV Executive Assistant
        await this.testSabineCV();
        
        // Tests avec CV D√©veloppeur
        await this.testDeveloperCV();
        
        // Tests de performance
        this.testPerformance();
        
        // Tests d'int√©gration
        this.testIntegration();
        
        // Rapport final
        this.generateReport();
    }

    /**
     * Test de chargement des composants
     */
    testComponentsLoaded() {
        console.log('üîç Test: Chargement des composants...');
        
        const tests = [
            { name: 'EnhancedCVParser', exists: typeof window.EnhancedCVParser !== 'undefined' },
            { name: 'CommitmentOptimizedPrompt', exists: typeof window.CommitmentOptimizedPrompt !== 'undefined' },
            { name: 'commitmentEnhancedParser', exists: typeof window.commitmentEnhancedParser !== 'undefined' },
            { name: 'testCommitmentParser', exists: typeof window.testCommitmentParser === 'function' },
            { name: 'compareCommitmentParsers', exists: typeof window.compareCommitmentParsers === 'function' }
        ];
        
        tests.forEach(test => {
            if (test.exists) {
                console.log(`‚úÖ ${test.name} charg√©`);
                this.addResult('components', test.name, true);
            } else {
                console.log(`‚ùå ${test.name} manquant`);
                this.addResult('components', test.name, false);
            }
        });
    }

    /**
     * Test avec le CV de Sabine Rivi√®re
     */
    async testSabineCV() {
        console.log('üß™ Test: CV Executive Assistant (Sabine Rivi√®re)...');
        
        if (typeof window.commitmentEnhancedParser === 'undefined') {
            console.log('‚ùå Parser non disponible');
            return;
        }
        
        try {
            const result = window.commitmentEnhancedParser.parseCV(testCVSabine);
            
            // Validation des r√©sultats
            const validations = [
                { 
                    name: 'Nom d√©tect√©', 
                    test: result.data.personal_info.name === 'Sabine Rivi√®re' 
                },
                { 
                    name: 'Email d√©tect√©', 
                    test: result.data.personal_info.email === 'sabine.riviere04@gmail.com' 
                },
                { 
                    name: 'T√©l√©phone d√©tect√©', 
                    test: result.data.personal_info.phone === '+33665733921' 
                },
                { 
                    name: 'Poste actuel', 
                    test: result.data.current_position === 'Executive Assistant' 
                },
                { 
                    name: 'Comp√©tences multiples', 
                    test: result.data.skills.length >= 5 
                },
                { 
                    name: 'Logiciels d√©tect√©s', 
                    test: result.data.software.length >= 5 
                },
                { 
                    name: 'Langues avec niveaux', 
                    test: result.data.languages.length >= 2 && 
                          result.data.languages.every(lang => lang.level !== '√Ä √©valuer')
                },
                { 
                    name: 'Exp√©riences avec dates', 
                    test: result.data.work_experience.length >= 3 &&
                          result.data.work_experience.every(exp => 
                            exp.start_date !== '√Ä d√©finir' && exp.end_date !== '√Ä d√©finir')
                },
                { 
                    name: 'Formation d√©tect√©e', 
                    test: result.data.education && result.data.education.length >= 2
                }
            ];
            
            validations.forEach(validation => {
                if (validation.test) {
                    console.log(`‚úÖ ${validation.name}`);
                    this.addResult('sabine_cv', validation.name, true);
                } else {
                    console.log(`‚ùå ${validation.name}`);
                    this.addResult('sabine_cv', validation.name, false);
                }
            });
            
            // Log des donn√©es extraites pour debug
            console.log('üìä Donn√©es extraites Sabine:', {
                skills_count: result.data.skills.length,
                software_count: result.data.software.length,
                languages_count: result.data.languages.length,
                experience_count: result.data.work_experience.length,
                education_count: result.data.education?.length || 0
            });
            
        } catch (error) {
            console.log('‚ùå Erreur test Sabine CV:', error);
            this.addResult('sabine_cv', 'parsing_error', false, error.message);
        }
    }

    /**
     * Test avec un CV de d√©veloppeur
     */
    async testDeveloperCV() {
        console.log('üß™ Test: CV D√©veloppeur...');
        
        if (typeof window.commitmentEnhancedParser === 'undefined') {
            console.log('‚ùå Parser non disponible');
            return;
        }
        
        try {
            const result = window.commitmentEnhancedParser.parseCV(testCVDeveloper);
            
            const validations = [
                { 
                    name: 'Nom d√©veloppeur d√©tect√©', 
                    test: result.data.personal_info.name === 'Jean Dupont' 
                },
                { 
                    name: 'Comp√©tences techniques', 
                    test: result.data.skills.some(skill => 
                        skill.toLowerCase().includes('javascript') || 
                        skill.toLowerCase().includes('react') ||
                        skill.toLowerCase().includes('node'))
                },
                { 
                    name: 'Logiciels dev d√©tect√©s', 
                    test: result.data.software.some(software => 
                        software.toLowerCase().includes('visual studio') ||
                        software.toLowerCase().includes('docker') ||
                        software.toLowerCase().includes('figma'))
                },
                { 
                    name: 'Langues multiples', 
                    test: result.data.languages.length >= 2
                },
                { 
                    name: 'Exp√©riences d√©veloppeur', 
                    test: result.data.work_experience.some(exp => 
                        exp.title.toLowerCase().includes('d√©veloppeur'))
                }
            ];
            
            validations.forEach(validation => {
                if (validation.test) {
                    console.log(`‚úÖ ${validation.name}`);
                    this.addResult('developer_cv', validation.name, true);
                } else {
                    console.log(`‚ùå ${validation.name}`);
                    this.addResult('developer_cv', validation.name, false);
                }
            });
            
        } catch (error) {
            console.log('‚ùå Erreur test Developer CV:', error);
            this.addResult('developer_cv', 'parsing_error', false, error.message);
        }
    }

    /**
     * Tests de performance
     */
    testPerformance() {
        console.log('üß™ Test: Performance...');
        
        if (typeof window.commitmentEnhancedParser === 'undefined') {
            console.log('‚ùå Parser non disponible');
            return;
        }
        
        // Test de vitesse
        const startTime = performance.now();
        
        try {
            const result = window.commitmentEnhancedParser.parseCV(testCVSabine);
            const endTime = performance.now();
            const duration = endTime - startTime;
            
            console.log(`‚è±Ô∏è Temps de parsing: ${duration.toFixed(2)}ms`);
            
            const performanceTests = [
                { 
                    name: 'Parsing rapide (< 100ms)', 
                    test: duration < 100 
                },
                { 
                    name: 'Donn√©es coh√©rentes', 
                    test: result && result.data && result.source 
                },
                { 
                    name: 'Statistiques pr√©sentes', 
                    test: result.parsing_stats && result.parsing_stats.content_length > 0
                }
            ];
            
            performanceTests.forEach(test => {
                if (test.test) {
                    console.log(`‚úÖ ${test.name}`);
                    this.addResult('performance', test.name, true);
                } else {
                    console.log(`‚ùå ${test.name}`);
                    this.addResult('performance', test.name, false);
                }
            });
            
        } catch (error) {
            console.log('‚ùå Erreur test performance:', error);
            this.addResult('performance', 'performance_error', false, error.message);
        }
    }

    /**
     * Tests d'int√©gration
     */
    testIntegration() {
        console.log('üß™ Test: Int√©gration...');
        
        const integrationTests = [
            { 
                name: 'Instance globale disponible', 
                test: typeof window.commitmentEnhancedParser === 'object' 
            },
            { 
                name: 'Fonctions de test disponibles', 
                test: typeof window.testCommitmentParser === 'function' &&
                      typeof window.compareCommitmentParsers === 'function'
            },
            { 
                name: 'Auto-installation r√©ussie', 
                test: typeof window.autoInstallCommitmentParser === 'function'
            },
            { 
                name: 'Prompts optimis√©s charg√©s', 
                test: typeof window.CommitmentOptimizedPrompt !== 'undefined'
            }
        ];
        
        integrationTests.forEach(test => {
            if (test.test) {
                console.log(`‚úÖ ${test.name}`);
                this.addResult('integration', test.name, true);
            } else {
                console.log(`‚ùå ${test.name}`);
                this.addResult('integration', test.name, false);
            }
        });
    }

    /**
     * Ajoute un r√©sultat de test
     */
    addResult(category, testName, passed, error = null) {
        this.results.push({
            category,
            testName,
            passed,
            error,
            timestamp: new Date().toISOString()
        });
    }

    /**
     * G√©n√®re le rapport final
     */
    generateReport() {
        console.log('\nüìä RAPPORT DE TESTS - Parser CV Optimis√© Commitment\n');
        
        const categories = [...new Set(this.results.map(r => r.category))];
        let totalPassed = 0;
        let totalTests = 0;
        
        categories.forEach(category => {
            const categoryResults = this.results.filter(r => r.category === category);
            const passed = categoryResults.filter(r => r.passed).length;
            const total = categoryResults.length;
            
            console.log(`üìÅ ${category.toUpperCase()}: ${passed}/${total} tests r√©ussis`);
            
            categoryResults.forEach(result => {
                const icon = result.passed ? '‚úÖ' : '‚ùå';
                console.log(`  ${icon} ${result.testName}`);
                if (result.error) {
                    console.log(`    Erreur: ${result.error}`);
                }
            });
            
            console.log('');
            totalPassed += passed;
            totalTests += total;
        });
        
        const successRate = ((totalPassed / totalTests) * 100).toFixed(1);
        
        console.log(`üéØ R√âSULTAT GLOBAL: ${totalPassed}/${totalTests} (${successRate}%)`);
        
        if (successRate >= 90) {
            console.log('üéâ EXCELLENT! Le parser optimis√© fonctionne parfaitement.');
        } else if (successRate >= 75) {
            console.log('‚úÖ BON! Le parser optimis√© fonctionne bien avec quelques am√©liorations possibles.');
        } else {
            console.log('‚ö†Ô∏è ATTENTION! Le parser optimis√© n√©cessite des corrections.');
        }
        
        // Stockage des r√©sultats pour analyse
        window.commitmentTestResults = {
            totalTests,
            totalPassed,
            successRate: parseFloat(successRate),
            details: this.results,
            timestamp: new Date().toISOString()
        };
        
        console.log('\nüíæ R√©sultats stock√©s dans window.commitmentTestResults');
    }
}

/**
 * Fonction de test rapide pour la console
 */
function runCommitmentParserTests() {
    const tester = new CommitmentParserTests();
    return tester.runAllTests();
}

/**
 * Test sp√©cifique pour un CV custom
 */
function testCustomCV(cvContent) {
    if (typeof window.commitmentEnhancedParser === 'undefined') {
        console.log('‚ùå Parser optimis√© non disponible');
        return null;
    }
    
    try {
        console.log('üß™ Test CV personnalis√©...');
        const result = window.commitmentEnhancedParser.parseCV(cvContent);
        
        console.log('üìä R√©sultats:', {
            nom: result.data.personal_info.name,
            email: result.data.personal_info.email,
            t√©l√©phone: result.data.personal_info.phone,
            poste: result.data.current_position,
            comp√©tences: result.data.skills.length,
            logiciels: result.data.software.length,
            langues: result.data.languages.length,
            exp√©riences: result.data.work_experience.length,
            formations: result.data.education?.length || 0
        });
        
        return result;
    } catch (error) {
        console.log('‚ùå Erreur test CV personnalis√©:', error);
        return null;
    }
}

// Export pour utilisation
if (typeof window !== 'undefined') {
    window.runCommitmentParserTests = runCommitmentParserTests;
    window.testCustomCV = testCustomCV;
    window.CommitmentParserTests = CommitmentParserTests;
}

console.log('üß™ Fichier de tests Commitment charg√©!');
console.log('üìû Utilisation: runCommitmentParserTests() ou testCustomCV(cvContent)');
