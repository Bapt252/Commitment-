# SuperSmartMatch V2 - Complete Deployment Configuration
# Orchestrates all services: V2 (5070), V1 (5062), Nexten (5052), Redis

version: '3.8'

services:
  # =================== SUPERSMARTMATCH V2 - MAIN SERVICE ===================
  supersmartmatch-v2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supersmartmatch-v2
    ports:
      - "5070:5070"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - NEXTEN_MATCHER_URL=http://nexten-matcher:5052
      - V1_ALGORITHMS_URL=http://supersmartmatch-v1:5062
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - supersmartmatch-v1
      - nexten-matcher
    networks:
      - supersmartmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5070/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/var/log/supersmartmatch-v2
    labels:
      - "com.supersmartmatch.service=v2"
      - "com.supersmartmatch.version=2.0.0"

  # =================== SUPERSMARTMATCH V1 - LEGACY SERVICE ===================
  supersmartmatch-v1:
    image: supersmartmatch:v1
    container_name: supersmartmatch-v1
    ports:
      - "5062:5062"
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      - redis
    networks:
      - supersmartmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5062/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.supersmartmatch.service=v1"
      - "com.supersmartmatch.version=1.0.0"

  # =================== NEXTEN MATCHER - ML SERVICE ===================
  nexten-matcher:
    image: nexten-matcher:latest
    container_name: nexten-matcher
    ports:
      - "5052:5052"
    environment:
      - PYTHON_ENV=production
      - MODEL_PATH=/app/models
      - CACHE_ENABLED=true
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      - redis
    networks:
      - supersmartmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5052/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    volumes:
      - nexten-models:/app/models
      - ./logs:/var/log/nexten-matcher
    labels:
      - "com.supersmartmatch.service=nexten"
      - "com.supersmartmatch.version=1.0.0"

  # =================== REDIS - CACHING & SESSION STORE ===================
  redis:
    image: redis:7-alpine
    container_name: supersmartmatch-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - supersmartmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - redis-data:/data
    labels:
      - "com.supersmartmatch.service=redis"

  # =================== NGINX - LOAD BALANCER & REVERSE PROXY ===================
  nginx:
    image: nginx:alpine
    container_name: supersmartmatch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - supersmartmatch-v2
      - supersmartmatch-v1
      - nexten-matcher
    networks:
      - supersmartmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.supersmartmatch.service=nginx"

  # =================== MONITORING - PROMETHEUS & GRAFANA ===================
  prometheus:
    image: prom/prometheus:latest
    container_name: supersmartmatch-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - supersmartmatch-network
    restart: unless-stopped
    labels:
      - "com.supersmartmatch.service=prometheus"

  grafana:
    image: grafana/grafana:latest
    container_name: supersmartmatch-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=supersmartmatch2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - supersmartmatch-network
    restart: unless-stopped
    labels:
      - "com.supersmartmatch.service=grafana"

# =================== NETWORKS ===================
networks:
  supersmartmatch-network:
    driver: bridge
    name: supersmartmatch-network

# =================== VOLUMES ===================
volumes:
  redis-data:
    driver: local
    name: supersmartmatch-redis-data
  
  nexten-models:
    driver: local
    name: nexten-models
  
  prometheus-data:
    driver: local
    name: prometheus-data
  
  grafana-data:
    driver: local
    name: grafana-data

# =================== DEVELOPMENT OVERRIDE ===================
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# For development with hot reload and debug mode
