# Intégration SuperSmartMatch dans docker-compose principal
# Ajoutez ces services à votre docker-compose.yml existant

version: '3.8'

services:
  # SuperSmartMatch - Service unifié de matching intelligent
  supersmartmatch:
    build:
      context: ./super-smart-match-service
      dockerfile: Dockerfile
    container_name: nexten-supersmartmatch
    ports:
      - "5070:5070"
    environment:
      - ENVIRONMENT=production
      - PORT=5070
      - HOST=0.0.0.0
      # Redis pour le cache
      - REDIS_URL=redis://nexten-redis:6379/3
      # Configuration des algorithmes
      - ALGORITHM_TIMEOUT=30
      - CACHE_TTL=300
      - MAX_CACHE_SIZE=1000
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/supersmartmatch.log
    volumes:
      # Logs persistants
      - ./super-smart-match-service/logs:/app/logs
      # Accès aux algorithmes du projet parent
      - ./matching_engine.py:/app/matching_engine.py:ro
      - ./enhanced_matching_engine.py:/app/enhanced_matching_engine.py:ro
      - ./my_matching_engine.py:/app/my_matching_engine.py:ro
      # Configuration personnalisée (optionnelle)
      - ./super-smart-match-service/config:/app/config:ro
    networks:
      - nexten-network
    depends_on:
      - nexten-redis
      - nexten-postgres
      # Services optionnels (si vous voulez les garder)
      - matching-service
      - cv-parser-service
      - job-parser-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5070/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supersmartmatch.rule=Host(`supersmartmatch.nexten.local`)"
      - "traefik.http.services.supersmartmatch.loadbalancer.server.port=5070"
      - "com.nexten.service=supersmartmatch"
      - "com.nexten.version=1.0.0"
      - "com.nexten.description=Service unifié de matching intelligent"

  # Services existants à conserver (optionnel)
  # Vous pouvez les garder pour la migration progressive
  
  matching-service:
    # ... votre configuration existante ...
    labels:
      - "com.nexten.legacy=true"
      - "com.nexten.replacement=supersmartmatch"
    profiles:
      - legacy  # Démarrage optionnel avec --profile legacy
  
  cv-parser-service:
    # ... votre configuration existante ...
    labels:
      - "com.nexten.legacy=true"
    profiles:
      - legacy
  
  job-parser-service:
    # ... votre configuration existante ...
    labels:
      - "com.nexten.legacy=true"
    profiles:
      - legacy
  
  personalization-service:
    # ... votre configuration existante ...
    labels:
      - "com.nexten.legacy=true"
    profiles:
      - legacy

  # Nginx reverse proxy pour l'API (optionnel)
  nginx-api:
    image: nginx:alpine
    container_name: nexten-nginx-api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/api.conf:/etc/nginx/conf.d/api.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - nexten-network
    depends_on:
      - supersmartmatch
      - frontend
    restart: unless-stopped
    profiles:
      - production
      - nginx

# Configuration réseau existante (à conserver)
networks:
  nexten-network:
    driver: bridge
    labels:
      - "com.nexten.network=main"

# Volumes pour la persistance
volumes:
  supersmartmatch_logs:
    driver: local
    labels:
      - "com.nexten.volume=supersmartmatch-logs"
  
  supersmartmatch_cache:
    driver: local
    labels:
      - "com.nexten.volume=supersmartmatch-cache"
