/**
 * NEXTEN V2.0 - WORK ENVIRONMENT MATCHER
 * Critère #6 (8% du score) - Environnement travail détaillé
 * Algorithme intelligent de matching environnement de travail vs préférences candidat
 */

class WorkEnvironmentMatcher {
    constructor() {
        this.weight = 0.08; // 8% du score total Nexten V2.0
        this.name = 'workEnvironment';
        
        // Dimensions de l'environnement de travail
        this.environmentDimensions = {\n            location_mode: {\n                remote_100: {\n                    label: '100% télétravail',\n                    flexibility: 'maximum',\n                    collaboration: 'digital_only',\n                    autonomy: 'very_high',\n                    social_interaction: 'low',\n                    work_life_balance: 'very_high'\n                },\n                hybrid_4_1: {\n                    label: 'Hybride 4j télétravail / 1j bureau',\n                    flexibility: 'very_high',\n                    collaboration: 'mixed_digital_primary',\n                    autonomy: 'high',\n                    social_interaction: 'low_medium',\n                    work_life_balance: 'high'\n                },\n                hybrid_3_2: {\n                    label: 'Hybride 3j télétravail / 2j bureau',\n                    flexibility: 'high',\n                    collaboration: 'balanced',\n                    autonomy: 'medium_high',\n                    social_interaction: 'medium',\n                    work_life_balance: 'high'\n                },\n                hybrid_2_3: {\n                    label: 'Hybride 2j télétravail / 3j bureau',\n                    flexibility: 'medium',\n                    collaboration: 'physical_primary',\n                    autonomy: 'medium',\n                    social_interaction: 'medium_high',\n                    work_life_balance: 'medium'\n                },\n                hybrid_1_4: {\n                    label: 'Hybride 1j télétravail / 4j bureau',\n                    flexibility: 'low_medium',\n                    collaboration: 'physical_dominant',\n                    autonomy: 'medium_low',\n                    social_interaction: 'high',\n                    work_life_balance: 'medium'\n                },\n                on_site_100: {\n                    label: '100% présentiel',\n                    flexibility: 'low',\n                    collaboration: 'physical_only',\n                    autonomy: 'low_medium',\n                    social_interaction: 'very_high',\n                    work_life_balance: 'low_medium'\n                }\n            },\n            office_type: {\n                open_space: {\n                    label: 'Open space',\n                    privacy: 'low',\n                    collaboration: 'very_high',\n                    concentration: 'low',\n                    flexibility: 'high',\n                    social_energy: 'very_high',\n                    noise_level: 'high'\n                },\n                bureau_partage: {\n                    label: 'Bureau partagé (2-4 personnes)',\n                    privacy: 'medium',\n                    collaboration: 'high',\n                    concentration: 'medium',\n                    flexibility: 'medium',\n                    social_energy: 'high',\n                    noise_level: 'medium'\n                },\n                bureau_individuel: {\n                    label: 'Bureau individuel',\n                    privacy: 'high',\n                    collaboration: 'medium',\n                    concentration: 'high',\n                    flexibility: 'low',\n                    social_energy: 'medium',\n                    noise_level: 'low'\n                },\n                coworking: {\n                    label: 'Espace de coworking',\n                    privacy: 'low_medium',\n                    collaboration: 'very_high',\n                    concentration: 'medium',\n                    flexibility: 'very_high',\n                    social_energy: 'very_high',\n                    noise_level: 'medium_high'\n                },\n                mobile_flexible: {\n                    label: 'Postes flexibles/nomades',\n                    privacy: 'variable',\n                    collaboration: 'high',\n                    concentration: 'variable',\n                    flexibility: 'maximum',\n                    social_energy: 'high',\n                    noise_level: 'variable'\n                }\n            },\n            atmosphere: {\n                startup: {\n                    label: 'Ambiance startup',\n                    formality: 'very_low',\n                    innovation: 'very_high',\n                    pace: 'very_fast',\n                    hierarchy: 'flat',\n                    dress_code: 'casual',\n                    energy: 'very_high'\n                },\n                corporate: {\n                    label: 'Ambiance corporate',\n                    formality: 'high',\n                    innovation: 'medium',\n                    pace: 'structured',\n                    hierarchy: 'defined',\n                    dress_code: 'business',\n                    energy: 'professional'\n                },\n                creative: {\n                    label: 'Ambiance créative',\n                    formality: 'low',\n                    innovation: 'very_high',\n                    pace: 'flexible',\n                    hierarchy: 'flat',\n                    dress_code: 'creative',\n                    energy: 'high'\n                },\n                technical: {\n                    label: 'Ambiance technique',\n                    formality: 'medium',\n                    innovation: 'high',\n                    pace: 'focused',\n                    hierarchy: 'merit_based',\n                    dress_code: 'casual_business',\n                    energy: 'concentrated'\n                },\n                familial: {\n                    label: 'Ambiance familiale',\n                    formality: 'low',\n                    innovation: 'medium',\n                    pace: 'balanced',\n                    hierarchy: 'informal',\n                    dress_code: 'casual',\n                    energy: 'warm'\n                }\n            },\n            schedule_flexibility: {\n                fixed: {\n                    label: 'Horaires fixes',\n                    autonomy: 'low',\n                    work_life_balance: 'medium',\n                    predictability: 'very_high',\n                    collaboration_ease: 'high'\n                },\n                flexible_core: {\n                    label: 'Horaires flexibles avec plages fixes',\n                    autonomy: 'medium_high',\n                    work_life_balance: 'high',\n                    predictability: 'high',\n                    collaboration_ease: 'medium_high'\n                },\n                flexible_full: {\n                    label: 'Horaires totalement flexibles',\n                    autonomy: 'very_high',\n                    work_life_balance: 'very_high',\n                    predictability: 'medium',\n                    collaboration_ease: 'medium'\n                },\n                forfait_jours: {\n                    label: 'Forfait jours',\n                    autonomy: 'high',\n                    work_life_balance: 'variable',\n                    predictability: 'low',\n                    collaboration_ease: 'medium'\n                }\n            }\n        };\n\n        // Profils candidats selon préférences environnement\n        this.candidateEnvironmentProfiles = {\n            digital_nomad: {\n                location_preferences: ['remote_100', 'hybrid_4_1'],\n                office_preferences: ['coworking', 'mobile_flexible'],\n                atmosphere_preferences: ['startup', 'creative'],\n                flexibility_needs: 'very_high'\n            },\n            equilibre_seeker: {\n                location_preferences: ['hybrid_3_2', 'hybrid_2_3'],\n                office_preferences: ['bureau_partage', 'bureau_individuel'],\n                atmosphere_preferences: ['familial', 'corporate'],\n                flexibility_needs: 'high'\n            },\n            collaboration_lover: {\n                location_preferences: ['hybrid_2_3', 'on_site_100'],\n                office_preferences: ['open_space', 'bureau_partage'],\n                atmosphere_preferences: ['startup', 'creative'],\n                flexibility_needs: 'medium'\n            },\n            focus_oriented: {\n                location_preferences: ['remote_100', 'hybrid_4_1', 'bureau_individuel'],\n                office_preferences: ['bureau_individuel'],\n                atmosphere_preferences: ['technical', 'corporate'],\n                flexibility_needs: 'high'\n            },\n            traditional: {\n                location_preferences: ['on_site_100', 'hybrid_1_4'],\n                office_preferences: ['bureau_individuel', 'bureau_partage'],\n                atmosphere_preferences: ['corporate', 'familial'],\n                flexibility_needs: 'low'\n            }\n        };\n\n        // Secteurs et leurs environnements typiques\n        this.sectorEnvironmentProfiles = {\n            tech: {\n                typical_location: ['remote_100', 'hybrid_4_1', 'hybrid_3_2'],\n                typical_office: ['open_space', 'coworking'],\n                typical_atmosphere: ['startup', 'technical'],\n                flexibility_standard: 'very_high'\n            },\n            luxe: {\n                typical_location: ['on_site_100', 'hybrid_1_4'],\n                typical_office: ['bureau_individuel', 'bureau_partage'],\n                typical_atmosphere: ['corporate', 'creative'],\n                flexibility_standard: 'low'\n            },\n            mode: {\n                typical_location: ['hybrid_3_2', 'hybrid_2_3'],\n                typical_office: ['open_space', 'coworking'],\n                typical_atmosphere: ['creative', 'startup'],\n                flexibility_standard: 'high'\n            },\n            finance: {\n                typical_location: ['on_site_100', 'hybrid_2_3'],\n                typical_office: ['bureau_individuel'],\n                typical_atmosphere: ['corporate'],\n                flexibility_standard: 'low_medium'\n            },\n            cosmetique: {\n                typical_location: ['hybrid_2_3', 'on_site_100'],\n                typical_office: ['bureau_partage', 'open_space'],\n                typical_atmosphere: ['creative', 'corporate'],\n                flexibility_standard: 'medium'\n            }\n        };\n\n        // Cache des analyses d'environnement\n        this.environmentCache = new Map();\n        \n        // Métriques de performance\n        this.metrics = {\n            totalAnalyses: 0,\n            averageAnalysisTime: 0,\n            cacheHitRate: 0\n        };\n\n        console.log('🏠 WorkEnvironmentMatcher initialisé - Critère #6 (8%)');\n    }\n\n    /**\n     * CALCUL PRINCIPAL DU SCORE D'ENVIRONNEMENT DE TRAVAIL\n     * Analyse intelligente préférences candidat vs environnement offert\n     */\n    async calculateWorkEnvironmentScore(candidateData, jobData, companyData = {}) {\n        const startTime = performance.now();\n        \n        try {\n            // Cache check\n            const cacheKey = this.generateEnvironmentCacheKey(candidateData, jobData, companyData);\n            const cached = this.environmentCache.get(cacheKey);\n            if (cached && this.isCacheValid(cached)) {\n                this.updateMetrics(performance.now() - startTime, true);\n                return cached.result;\n            }\n\n            // Extraction des préférences candidat\n            const candidatePreferences = this.extractCandidateEnvironmentPreferences(candidateData);\n            \n            // Analyse de l'environnement offert\n            const offeredEnvironment = this.analyzeOfferedEnvironment(jobData, companyData);\n            \n            if (!this.validateEnvironmentData(candidatePreferences, offeredEnvironment)) {\n                return this.getFallbackScore('Données environnement travail insuffisantes');\n            }\n\n            // Calcul matching par dimension\n            const dimensionScores = this.calculateDimensionMatching(candidatePreferences, offeredEnvironment);\n            \n            // Analyse de compatibilité globale\n            const overallCompatibility = this.calculateOverallCompatibility(candidatePreferences, offeredEnvironment);\n            \n            // Ajustement sectoriel\n            const sectorAlignment = this.calculateSectorEnvironmentAlignment(candidatePreferences, offeredEnvironment, jobData);\n            \n            // Analyse des synergies environnementales\n            const synergyAnalysis = this.analyzeEnvironmentSynergies(dimensionScores);\n            \n            // Score composite final\n            const finalScore = this.computeFinalEnvironmentScore({\n                dimensions: dimensionScores,\n                compatibility: overallCompatibility,\n                sectorFit: sectorAlignment,\n                synergies: synergyAnalysis\n            });\n\n            const result = {\n                finalScore: Math.min(finalScore, 1.0),\n                environmentAnalysis: {\n                    candidate_preferences: candidatePreferences,\n                    offered_environment: offeredEnvironment,\n                    dimension_scores: dimensionScores,\n                    overall_compatibility: overallCompatibility\n                },\n                insights: {\n                    environment_strengths: this.identifyEnvironmentStrengths(candidatePreferences, offeredEnvironment),\n                    potential_adaptations: this.identifyPotentialAdaptations(candidatePreferences, offeredEnvironment),\n                    recommendations: this.generateEnvironmentRecommendations(candidatePreferences, offeredEnvironment, finalScore)\n                },\n                performance: {\n                    analysisTime: performance.now() - startTime,\n                    dataQuality: this.assessEnvironmentDataQuality(candidatePreferences, offeredEnvironment),\n                    confidence: this.calculateEnvironmentConfidence(candidatePreferences, offeredEnvironment)\n                }\n            };\n\n            // Mise en cache\n            this.environmentCache.set(cacheKey, {\n                result: result,\n                timestamp: Date.now()\n            });\n\n            this.updateMetrics(performance.now() - startTime, false);\n            return result;\n\n        } catch (error) {\n            console.error('❌ Erreur WorkEnvironmentMatcher:', error);\n            return this.getFallbackScore(`Erreur analyse: ${error.message}`);\n        }\n    }\n\n    /**\n     * EXTRACTION DES PRÉFÉRENCES CANDIDAT\n     * Analyse des préférences d'environnement déclarées et inférées\n     */\n    extractCandidateEnvironmentPreferences(candidateData) {\n        const preferences = {\n            location_mode: null,\n            office_type: null,\n            atmosphere: null,\n            schedule_flexibility: null,\n            profile_type: null,\n            explicit_preferences: {},\n            inferred_preferences: {}\n        };\n\n        // Préférences explicites du questionnaire\n        if (candidateData.environnement_prefere || candidateData.work_environment_preference) {\n            const envPref = candidateData.environnement_prefere || candidateData.work_environment_preference;\n            preferences.explicit_preferences = this.parseEnvironmentPreferences(envPref);\n        }\n\n        // Préférences télétravail spécifiques\n        if (candidateData.teletravail_preference || candidateData.remote_work_preference) {\n            preferences.location_mode = this.parseRemoteWorkPreference(\n                candidateData.teletravail_preference || candidateData.remote_work_preference\n            );\n        }\n\n        // Inférence du profil candidat\n        preferences.profile_type = this.inferCandidateEnvironmentProfile(candidateData);\n        \n        // Préférences inférées du profil\n        if (preferences.profile_type) {\n            preferences.inferred_preferences = this.candidateEnvironmentProfiles[preferences.profile_type];\n        }\n        \n        // Consolidation des préférences\n        return this.consolidateEnvironmentPreferences(preferences);\n    }\n\n    /**\n     * ANALYSE DE L'ENVIRONNEMENT OFFERT\n     * Extraction des caractéristiques d'environnement de l'offre\n     */\n    analyzeOfferedEnvironment(jobData, companyData) {\n        const environment = {\n            location_mode: null,\n            office_type: null,\n            atmosphere: null,\n            schedule_flexibility: null,\n            explicit_features: {},\n            inferred_features: {}\n        };\n\n        // Analyse des données explicites\n        environment.explicit_features = this.extractExplicitEnvironmentFeatures(jobData, companyData);\n        \n        // Inférence basée sur la description et le secteur\n        environment.inferred_features = this.inferEnvironmentFeatures(jobData, companyData);\n        \n        // Détermination des dimensions principales\n        environment.location_mode = this.determineLocationMode(environment);\n        environment.office_type = this.determineOfficeType(environment);\n        environment.atmosphere = this.determineAtmosphere(environment);\n        environment.schedule_flexibility = this.determineScheduleFlexibility(environment);\n\n        return environment;\n    }\n\n    /**\n     * CALCUL MATCHING PAR DIMENSION\n     * Score de compatibilité pour chaque dimension d'environnement\n     */\n    calculateDimensionMatching(candidatePreferences, offeredEnvironment) {\n        const scores = {\n            location_mode: 0,\n            office_type: 0,\n            atmosphere: 0,\n            schedule_flexibility: 0\n        };\n\n        // Matching mode de travail (télétravail/présentiel)\n        scores.location_mode = this.matchLocationMode(\n            candidatePreferences.location_mode, \n            offeredEnvironment.location_mode\n        );\n\n        // Matching type de bureau\n        scores.office_type = this.matchOfficeType(\n            candidatePreferences.office_type, \n            offeredEnvironment.office_type\n        );\n\n        // Matching ambiance/atmosphère\n        scores.atmosphere = this.matchAtmosphere(\n            candidatePreferences.atmosphere, \n            offeredEnvironment.atmosphere\n        );\n\n        // Matching flexibilité horaires\n        scores.schedule_flexibility = this.matchScheduleFlexibility(\n            candidatePreferences.schedule_flexibility, \n            offeredEnvironment.schedule_flexibility\n        );\n\n        return scores;\n    }\n\n    /**\n     * MATCHING MODE DE TRAVAIL\n     * Compatibilité télétravail/présentiel\n     */\n    matchLocationMode(candidatePreference, offeredMode) {\n        if (!candidatePreference || !offeredMode) {\n            return 0.6; // Score neutre si données manquantes\n        }\n\n        // Match parfait\n        if (candidatePreference === offeredMode) {\n            return 1.0;\n        }\n\n        // Matrice de compatibilité mode de travail\n        const compatibilityMatrix = {\n            remote_100: {\n                remote_100: 1.0,\n                hybrid_4_1: 0.8,\n                hybrid_3_2: 0.6,\n                hybrid_2_3: 0.4,\n                hybrid_1_4: 0.2,\n                on_site_100: 0.1\n            },\n            hybrid_4_1: {\n                remote_100: 0.9,\n                hybrid_4_1: 1.0,\n                hybrid_3_2: 0.9,\n                hybrid_2_3: 0.7,\n                hybrid_1_4: 0.5,\n                on_site_100: 0.3\n            },\n            hybrid_3_2: {\n                remote_100: 0.7,\n                hybrid_4_1: 0.9,\n                hybrid_3_2: 1.0,\n                hybrid_2_3: 0.9,\n                hybrid_1_4: 0.7,\n                on_site_100: 0.5\n            },\n            hybrid_2_3: {\n                remote_100: 0.5,\n                hybrid_4_1: 0.7,\n                hybrid_3_2: 0.9,\n                hybrid_2_3: 1.0,\n                hybrid_1_4: 0.9,\n                on_site_100: 0.7\n            },\n            hybrid_1_4: {\n                remote_100: 0.3,\n                hybrid_4_1: 0.5,\n                hybrid_3_2: 0.7,\n                hybrid_2_3: 0.9,\n                hybrid_1_4: 1.0,\n                on_site_100: 0.9\n            },\n            on_site_100: {\n                remote_100: 0.1,\n                hybrid_4_1: 0.3,\n                hybrid_3_2: 0.5,\n                hybrid_2_3: 0.7,\n                hybrid_1_4: 0.9,\n                on_site_100: 1.0\n            }\n        };\n\n        return compatibilityMatrix[candidatePreference]?.[offeredMode] || 0.5;\n    }\n\n    /**\n     * CALCUL COMPATIBILITÉ GLOBALE\n     * Score synthétique de l'adéquation environnementale\n     */\n    calculateOverallCompatibility(candidatePreferences, offeredEnvironment) {\n        let compatibilityScore = 0.5;\n        let factorsCount = 0;\n\n        // Analyse des synergies entre dimensions\n        const locationFlexibility = this.getLocationFlexibility(offeredEnvironment.location_mode);\n        const officeCollaboration = this.getOfficeCollaboration(offeredEnvironment.office_type);\n        const atmosphereInnovation = this.getAtmosphereInnovation(offeredEnvironment.atmosphere);\n\n        // Profil candidat vs caractéristiques environnement\n        if (candidatePreferences.profile_type) {\n            const profileNeeds = this.candidateEnvironmentProfiles[candidatePreferences.profile_type];\n            \n            // Vérification adéquation flexibilité\n            if (this.isFlexibilityCompatible(profileNeeds.flexibility_needs, locationFlexibility)) {\n                compatibilityScore += 0.15;\n            }\n            \n            factorsCount++;\n        }\n\n        return Math.min(compatibilityScore, 1.0);\n    }\n\n    /**\n     * SCORE COMPOSITE FINAL ENVIRONNEMENT\n     * Combinaison pondérée des différents éléments\n     */\n    computeFinalEnvironmentScore(components) {\n        const dimensionAverage = (\n            components.dimensions.location_mode * 0.35 +     // 35% - Mode de travail (télétravail/présentiel)\n            components.dimensions.office_type * 0.25 +       // 25% - Type de bureau\n            components.dimensions.atmosphere * 0.25 +        // 25% - Ambiance/atmosphère\n            components.dimensions.schedule_flexibility * 0.15 // 15% - Flexibilité horaires\n        );\n\n        return (\n            dimensionAverage * 0.60 +                       // 60% - Scores par dimension\n            components.compatibility * 0.25 +               // 25% - Compatibilité globale\n            components.sectorFit * 0.10 +                   // 10% - Alignement sectoriel\n            components.synergies * 0.05                     // 5% - Synergies environnementales\n        );\n    }\n\n    /**\n     * UTILITAIRES DE PARSING ET INFÉRENCE\n     */\n    parseRemoteWorkPreference(preference) {\n        if (!preference) return null;\n        \n        const normalized = preference.toString().toLowerCase();\n        \n        if (normalized.includes('100') || normalized.includes('full') || normalized.includes('complet')) {\n            return 'remote_100';\n        }\n        if (normalized.includes('4') && normalized.includes('1')) return 'hybrid_4_1';\n        if (normalized.includes('3') && normalized.includes('2')) return 'hybrid_3_2';\n        if (normalized.includes('2') && normalized.includes('3')) return 'hybrid_2_3';\n        if (normalized.includes('1') && normalized.includes('4')) return 'hybrid_1_4';\n        if (normalized.includes('aucun') || normalized.includes('presentiel') || normalized.includes('bureau')) {\n            return 'on_site_100';\n        }\n        \n        return 'hybrid_3_2'; // Défaut hybride équilibré\n    }\n\n    inferCandidateEnvironmentProfile(candidateData) {\n        // Inférence basée sur motivations et préférences\n        const motivations = candidateData.motivations || [];\n        const age = candidateData.age || 30;\n        const experience = candidateData.experience_years || 3;\n        \n        if (motivations.includes('autonomie') || motivations.includes('flexibilite')) {\n            return 'digital_nomad';\n        }\n        if (motivations.includes('equilibre_vie') || motivations.includes('famille')) {\n            return 'equilibre_seeker';\n        }\n        if (motivations.includes('collaboration') || motivations.includes('equipe')) {\n            return 'collaboration_lover';\n        }\n        if (motivations.includes('concentration') || motivations.includes('productivite')) {\n            return 'focus_oriented';\n        }\n        if (age > 45 || experience > 15) {\n            return 'traditional';\n        }\n        \n        return 'equilibre_seeker'; // Profil par défaut\n    }\n\n    // Méthodes placeholder et utilitaires\n    parseEnvironmentPreferences(envPref) { return {}; }\n    consolidateEnvironmentPreferences(preferences) { return preferences; }\n    extractExplicitEnvironmentFeatures(jobData, companyData) { return {}; }\n    inferEnvironmentFeatures(jobData, companyData) { return {}; }\n    determineLocationMode(environment) { return 'hybrid_3_2'; }\n    determineOfficeType(environment) { return 'open_space'; }\n    determineAtmosphere(environment) { return 'startup'; }\n    determineScheduleFlexibility(environment) { return 'flexible_core'; }\n    matchOfficeType(candidatePreference, offeredType) { return 0.7; }\n    matchAtmosphere(candidatePreference, offeredAtmosphere) { return 0.7; }\n    matchScheduleFlexibility(candidatePreference, offeredFlexibility) { return 0.7; }\n    calculateSectorEnvironmentAlignment(candidatePreferences, offeredEnvironment, jobData) { return 0.8; }\n    analyzeEnvironmentSynergies(dimensionScores) { return 0.7; }\n    getLocationFlexibility(locationMode) { return 'high'; }\n    getOfficeCollaboration(officeType) { return 'high'; }\n    getAtmosphereInnovation(atmosphere) { return 'high'; }\n    isFlexibilityCompatible(needed, offered) { return true; }\n    identifyEnvironmentStrengths(candidatePreferences, offeredEnvironment) { return []; }\n    identifyPotentialAdaptations(candidatePreferences, offeredEnvironment) { return []; }\n    generateEnvironmentRecommendations(candidatePreferences, offeredEnvironment, finalScore) { return []; }\n    assessEnvironmentDataQuality(candidatePreferences, offeredEnvironment) { return 0.8; }\n    calculateEnvironmentConfidence(candidatePreferences, offeredEnvironment) { return 0.85; }\n\n    generateEnvironmentCacheKey(candidateData, jobData, companyData) {\n        const key = JSON.stringify({\n            env_pref: candidateData.environnement_prefere,\n            remote_pref: candidateData.teletravail_preference,\n            job_mode: jobData.mode_travail,\n            company_culture: companyData.culture\n        });\n        return btoa(key).substring(0, 20);\n    }\n\n    isCacheValid(cached) {\n        return (Date.now() - cached.timestamp) < 900000; // 15 minutes\n    }\n\n    validateEnvironmentData(candidatePreferences, offeredEnvironment) {\n        return candidatePreferences.profile_type || offeredEnvironment.location_mode;\n    }\n\n    getFallbackScore(reason) {\n        return {\n            finalScore: 0.5,\n            error: reason,\n            fallback: true,\n            timestamp: new Date().toISOString()\n        };\n    }\n\n    updateMetrics(analysisTime, wasCacheHit) {\n        this.metrics.totalAnalyses++;\n        this.metrics.averageAnalysisTime = \n            (this.metrics.averageAnalysisTime * (this.metrics.totalAnalyses - 1) + analysisTime) \n            / this.metrics.totalAnalyses;\n            \n        if (wasCacheHit) {\n            this.metrics.cacheHitRate = \n                (this.metrics.cacheHitRate * (this.metrics.totalAnalyses - 1) + 1) \n                / this.metrics.totalAnalyses;\n        }\n    }\n}\n\n// Export pour intégration\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = WorkEnvironmentMatcher;\n}\n\nif (typeof window !== 'undefined') {\n    window.WorkEnvironmentMatcher = WorkEnvironmentMatcher;\n    console.log('🏠 WorkEnvironmentMatcher disponible - Critère #6 (8%)');\n}