/**
 * NEXTEN V2.0 - COMPANY SIZE MATCHER
 * Crit√®re #5 (8% du score) - Taille structure vs pr√©f√©rences candidat
 * Algorithme intelligent de matching de la taille d'entreprise et culture associ√©e
 */

class CompanySizeMatcher {
    constructor() {
        this.weight = 0.08; // 8% du score total Nexten V2.0
        this.name = 'companySize';
        
        // Cat√©gories de taille d'entreprise avec caract√©ristiques
        this.sizeCategories = {\n            startup: {\n                employees: { min: 1, max: 50 },\n                labels: ['startup', 'jeune pousse', 'scale-up', 'tpe'],\n                culture: {\n                    agility: 'very_high',\n                    autonomy: 'very_high',\n                    processes: 'minimal',\n                    hierarchy: 'flat',\n                    innovation: 'very_high',\n                    stability: 'low',\n                    career_path: 'undefined',\n                    learning_curve: 'steep'\n                },\n                advantages: ['flexibilite', 'autonomie', 'innovation', 'polyvalence', 'impact_direct'],\n                challenges: ['instabilite', 'manque_ressources', 'processus_flous', 'charge_travail']\n            },\n            pme: {\n                employees: { min: 51, max: 500 },\n                labels: ['pme', 'petite entreprise', 'moyenne entreprise', 'taille humaine'],\n                culture: {\n                    agility: 'high',\n                    autonomy: 'high',\n                    processes: 'structured',\n                    hierarchy: 'moderate',\n                    innovation: 'high',\n                    stability: 'medium',\n                    career_path: 'emerging',\n                    learning_curve: 'moderate'\n                },\n                advantages: ['proximite_direction', 'evolution_rapide', 'polyvalence', 'reconnaissance', 'projets_varies'],\n                challenges: ['ressources_limitees', 'specialisation_moindre', 'benefits_limites']\n            },\n            eti: {\n                employees: { min: 501, max: 5000 },\n                labels: ['eti', 'entreprise taille intermediaire', 'grande pme', 'groupe regional'],\n                culture: {\n                    agility: 'medium',\n                    autonomy: 'medium',\n                    processes: 'well_defined',\n                    hierarchy: 'structured',\n                    innovation: 'medium',\n                    stability: 'high',\n                    career_path: 'defined',\n                    learning_curve: 'gradual'\n                },\n                advantages: ['equilibre_agilite_stabilite', 'processus_clairs', 'evolution_possible', 'projets_envergure'],\n                challenges: ['bureaucratie_naissante', 'competition_interne']\n            },\n            groupe: {\n                employees: { min: 5001, max: Infinity },\n                labels: ['groupe', 'grand groupe', 'multinational', 'corporation', 'cac40'],\n                culture: {\n                    agility: 'low',\n                    autonomy: 'low',\n                    processes: 'extensive',\n                    hierarchy: 'deep',\n                    innovation: 'structured',\n                    stability: 'very_high',\n                    career_path: 'well_defined',\n                    learning_curve: 'structured'\n                },\n                advantages: ['stabilite', 'benefits_excellents', 'formation', 'prestige', 'carriere_internationale', 'ressources'],\n                challenges: ['bureaucratie', 'lenteur_decision', 'autonomie_limitee', 'impact_dilue']\n            }\n        };\n\n        // Profils candidats types selon pr√©f√©rences de taille\n        this.candidateProfiles = {\n            entrepreneur: {\n                preferred_sizes: ['startup', 'pme'],\n                motivations: ['autonomie', 'innovation', 'impact', 'polyvalence'],\n                avoid_sizes: ['groupe'],\n                tolerance: 'low'\n            },\n            innovateur: {\n                preferred_sizes: ['startup', 'pme', 'eti'],\n                motivations: ['innovation', 'creativite', 'projets_nouveaux'],\n                avoid_sizes: [],\n                tolerance: 'medium'\n            },\n            stabilite: {\n                preferred_sizes: ['eti', 'groupe'],\n                motivations: ['securite', 'carriere', 'benefits', 'formation'],\n                avoid_sizes: ['startup'],\n                tolerance: 'medium'\n            },\n            equilibre: {\n                preferred_sizes: ['pme', 'eti'],\n                motivations: ['equilibre', 'evolution', 'reconnaissance'],\n                avoid_sizes: [],\n                tolerance: 'high'\n            },\n            prestige: {\n                preferred_sizes: ['groupe', 'eti'],\n                motivations: ['prestige', 'carriere', 'international'],\n                avoid_sizes: ['startup'],\n                tolerance: 'low'\n            }\n        };\n\n        // Secteurs et leurs tailles typiques\n        this.sectorSizeProfiles = {\n            luxe: {\n                typical_sizes: ['groupe', 'eti'],\n                size_importance: 'high', // Taille importante pour cr√©dibilit√©\n                prestige_factor: 'high'\n            },\n            mode: {\n                typical_sizes: ['startup', 'pme', 'eti'],\n                size_importance: 'medium',\n                creativity_factor: 'high'\n            },\n            tech: {\n                typical_sizes: ['startup', 'pme', 'groupe'],\n                size_importance: 'low', // Innovation prime sur taille\n                innovation_factor: 'very_high'\n            },\n            finance: {\n                typical_sizes: ['groupe', 'eti'],\n                size_importance: 'very_high', // Stabilit√© cruciale\n                stability_factor: 'very_high'\n            },\n            cosmetique: {\n                typical_sizes: ['groupe', 'eti', 'pme'],\n                size_importance: 'medium',\n                brand_factor: 'high'\n            }\n        };\n\n        // Cache des analyses de taille\n        this.sizeCache = new Map();\n        \n        // M√©triques de performance\n        this.metrics = {\n            totalAnalyses: 0,\n            averageAnalysisTime: 0,\n            cacheHitRate: 0\n        };\n\n        console.log('üè¢ CompanySizeMatcher initialis√© - Crit√®re #5 (8%)');\n    }\n\n    /**\n     * CALCUL PRINCIPAL DU SCORE DE TAILLE D'ENTREPRISE\n     * Analyse intelligente pr√©f√©rences candidat vs taille r√©elle entreprise\n     */\n    async calculateCompanySizeScore(candidateData, jobData, companyData = {}) {\n        const startTime = performance.now();\n        \n        try {\n            // Cache check\n            const cacheKey = this.generateSizeCacheKey(candidateData, jobData, companyData);\n            const cached = this.sizeCache.get(cacheKey);\n            if (cached && this.isCacheValid(cached)) {\n                this.updateMetrics(performance.now() - startTime, true);\n                return cached.result;\n            }\n\n            // Extraction des pr√©f√©rences candidat\n            const candidatePreferences = this.extractCandidatePreferences(candidateData);\n            \n            // Analyse de la taille r√©elle de l'entreprise\n            const companyProfile = this.analyzeCompanySize(jobData, companyData);\n            \n            if (!this.validateSizeData(candidatePreferences, companyProfile)) {\n                return this.getFallbackScore('Donn√©es taille entreprise insuffisantes');\n            }\n\n            // Calcul du matching direct de taille\n            const directSizeMatch = this.calculateDirectSizeMatch(candidatePreferences, companyProfile);\n            \n            // Analyse de compatibilit√© culturelle\n            const culturalCompatibility = this.calculateCulturalCompatibility(candidatePreferences, companyProfile);\n            \n            // Ajustement sectoriel\n            const sectorAlignment = this.calculateSectorSizeAlignment(candidatePreferences, companyProfile, jobData);\n            \n            // Analyse des avantages/inconv√©nients per√ßus\n            const advantageAnalysis = this.analyzeAdvantagesAlignment(candidatePreferences, companyProfile);\n            \n            // Score composite final\n            const finalScore = this.computeFinalSizeScore({\n                directMatch: directSizeMatch,\n                culturalFit: culturalCompatibility,\n                sectorFit: sectorAlignment,\n                advantages: advantageAnalysis\n            });\n\n            const result = {\n                finalScore: Math.min(finalScore, 1.0),\n                sizeAnalysis: {\n                    candidate_preferences: candidatePreferences,\n                    company_profile: companyProfile,\n                    direct_match: directSizeMatch,\n                    cultural_compatibility: culturalCompatibility,\n                    sector_alignment: sectorAlignment\n                },\n                insights: {\n                    size_strengths: this.identifySizeStrengths(candidatePreferences, companyProfile),\n                    potential_concerns: this.identifyPotentialConcerns(candidatePreferences, companyProfile),\n                    adaptation_recommendations: this.generateAdaptationRecommendations(candidatePreferences, companyProfile)\n                },\n                performance: {\n                    analysisTime: performance.now() - startTime,\n                    dataQuality: this.assessSizeDataQuality(candidatePreferences, companyProfile),\n                    confidence: this.calculateSizeConfidence(candidatePreferences, companyProfile)\n                }\n            };\n\n            // Mise en cache\n            this.sizeCache.set(cacheKey, {\n                result: result,\n                timestamp: Date.now()\n            });\n\n            this.updateMetrics(performance.now() - startTime, false);\n            return result;\n\n        } catch (error) {\n            console.error('‚ùå Erreur CompanySizeMatcher:', error);\n            return this.getFallbackScore(`Erreur analyse: ${error.message}`);\n        }\n    }\n\n    /**\n     * EXTRACTION DES PR√âF√âRENCES CANDIDAT\n     * Analyse des pr√©f√©rences de taille d√©clar√©es et inf√©r√©es\n     */\n    extractCandidatePreferences(candidateData) {\n        const preferences = {\n            explicit: null,      // Pr√©f√©rence explicite\n            inferred_profile: null, // Profil inf√©r√©\n            flexibility: 'medium', // Niveau de flexibilit√©\n            motivations: [],     // Motivations li√©es √† la taille\n            experience_sizes: [] // Tailles d'entreprises d'exp√©rience\n        };\n\n        // Pr√©f√©rence explicite du questionnaire\n        if (candidateData.taille_entreprise_preference || candidateData.company_size_preference) {\n            preferences.explicit = this.normalizeCompanySize(\n                candidateData.taille_entreprise_preference || \n                candidateData.company_size_preference\n            );\n        }\n\n        // Inf√©rence du profil candidat\n        preferences.inferred_profile = this.inferCandidateProfile(candidateData);\n        \n        // Extraction des motivations li√©es √† la taille\n        preferences.motivations = this.extractSizeRelatedMotivations(candidateData);\n        \n        // Analyse des exp√©riences pass√©es\n        preferences.experience_sizes = this.extractExperienceSizes(candidateData);\n        \n        // √âvaluation de la flexibilit√©\n        preferences.flexibility = this.assessCandidateFlexibility(candidateData);\n\n        return preferences;\n    }\n\n    /**\n     * ANALYSE DE LA TAILLE R√âELLE DE L'ENTREPRISE\n     * D√©termination de la cat√©gorie et caract√©ristiques\n     */\n    analyzeCompanySize(jobData, companyData) {\n        const profile = {\n            category: null,\n            employee_count: null,\n            culture_indicators: {},\n            explicit_size: null,\n            inferred_size: null\n        };\n\n        // Taille explicite\n        profile.employee_count = this.extractEmployeeCount(jobData, companyData);\n        profile.explicit_size = this.extractExplicitSize(jobData, companyData);\n        \n        // Inf√©rence de la taille\n        profile.inferred_size = this.inferCompanySize(jobData, companyData);\n        \n        // D√©termination de la cat√©gorie finale\n        profile.category = this.determineCompanyCategory(profile);\n        \n        // Analyse des indicateurs culturels\n        profile.culture_indicators = this.analyzeCultureIndicators(jobData, companyData, profile.category);\n\n        return profile;\n    }\n\n    /**\n     * CALCUL DU MATCHING DIRECT DE TAILLE\n     * Score bas√© sur la correspondance directe des pr√©f√©rences\n     */\n    calculateDirectSizeMatch(candidatePreferences, companyProfile) {\n        let matchScore = 0.5; // Score de base\n        \n        const companyCategory = companyProfile.category;\n        \n        // Matching pr√©f√©rence explicite\n        if (candidatePreferences.explicit) {\n            if (candidatePreferences.explicit === companyCategory) {\n                matchScore = 1.0; // Match parfait\n            } else {\n                // √âvaluation de la proximit√© des cat√©gories\n                matchScore = this.calculateCategoryProximity(candidatePreferences.explicit, companyCategory);\n            }\n        }\n        \n        // Ajustement selon profil candidat inf√©r√©\n        if (candidatePreferences.inferred_profile) {\n            const profileMatch = this.evaluateProfileMatch(candidatePreferences.inferred_profile, companyCategory);\n            matchScore = (matchScore + profileMatch) / 2;\n        }\n        \n        // Bonus bas√© sur l'exp√©rience dans des tailles similaires\n        const experienceBonus = this.calculateExperienceBonus(candidatePreferences.experience_sizes, companyCategory);\n        matchScore += experienceBonus;\n        \n        return Math.min(matchScore, 1.0);\n    }\n\n    /**\n     * CALCUL DE LA COMPATIBILIT√â CULTURELLE\n     * Analyse de l'ad√©quation culture candidat vs culture taille entreprise\n     */\n    calculateCulturalCompatibility(candidatePreferences, companyProfile) {\n        if (!companyProfile.category) {\n            return 0.5;\n        }\n        \n        const companyCulture = this.sizeCategories[companyProfile.category].culture;\n        let compatibilityScore = 0.5;\n        \n        // Analyse des motivations candidat vs caract√©ristiques culturelles\n        candidatePreferences.motivations.forEach(motivation => {\n            compatibilityScore += this.getCulturalMotivationFit(motivation, companyCulture);\n        });\n        \n        // Ajustement selon les indicateurs culturels d√©tect√©s\n        Object.entries(companyProfile.culture_indicators).forEach(([indicator, value]) => {\n            if (companyCulture[indicator] && this.alignsWithCulture(companyCulture[indicator], value)) {\n                compatibilityScore += 0.05;\n            }\n        });\n        \n        return Math.min(compatibilityScore, 1.0);\n    }\n\n    /**\n     * CALCUL DE L'ALIGNEMENT SECTORIEL\n     * √âvaluation de la coh√©rence taille vs secteur d'activit√©\n     */\n    calculateSectorSizeAlignment(candidatePreferences, companyProfile, jobData) {\n        const sector = this.extractSector(jobData);\n        const sectorProfile = this.sectorSizeProfiles[sector];\n        \n        if (!sectorProfile) {\n            return 0.7; // Score neutre si secteur inconnu\n        }\n        \n        let alignmentScore = 0.5;\n        \n        // Bonus si la taille de l'entreprise est typique du secteur\n        if (sectorProfile.typical_sizes.includes(companyProfile.category)) {\n            alignmentScore += 0.3;\n        }\n        \n        // Ajustement selon l'importance de la taille dans le secteur\n        const importanceFactor = this.getImportanceFactor(sectorProfile.size_importance);\n        alignmentScore = alignmentScore * (0.7 + importanceFactor * 0.3);\n        \n        return Math.min(alignmentScore, 1.0);\n    }\n\n    /**\n     * ANALYSE DES AVANTAGES/INCONV√âNIENTS\n     * √âvaluation de l'alignement entre attentes candidat et r√©alit√© taille entreprise\n     */\n    analyzeAdvantagesAlignment(candidatePreferences, companyProfile) {\n        if (!companyProfile.category) {\n            return 0.5;\n        }\n        \n        const sizeCharacteristics = this.sizeCategories[companyProfile.category];\n        let advantageScore = 0.5;\n        \n        // Analyse des avantages recherch√©s par le candidat\n        candidatePreferences.motivations.forEach(motivation => {\n            if (sizeCharacteristics.advantages.includes(motivation)) {\n                advantageScore += 0.1; // Bonus par avantage align√©\n            }\n            if (sizeCharacteristics.challenges.includes(motivation)) {\n                advantageScore -= 0.05; // Malus si motivation = challenge de la taille\n            }\n        });\n        \n        return Math.max(Math.min(advantageScore, 1.0), 0.1);\n    }\n\n    /**\n     * SCORE COMPOSITE FINAL TAILLE\n     * Combinaison pond√©r√©e des diff√©rents √©l√©ments\n     */\n    computeFinalSizeScore(components) {\n        return (\n            components.directMatch * 0.40 +      // 40% - Matching direct des pr√©f√©rences\n            components.culturalFit * 0.30 +      // 30% - Compatibilit√© culturelle\n            components.sectorFit * 0.20 +        // 20% - Alignement sectoriel\n            components.advantages * 0.10         // 10% - Avantages/inconv√©nients\n        );\n    }\n\n    /**\n     * UTILITAIRES DE NORMALISATION ET INF√âRENCE\n     */\n    normalizeCompanySize(sizeInput) {\n        if (!sizeInput) return null;\n        \n        const normalized = sizeInput.toLowerCase().replace(/[^a-z]/g, '');\n        \n        if (normalized.includes('startup') || normalized.includes('tpe')) return 'startup';\n        if (normalized.includes('pme') || normalized.includes('petite') || normalized.includes('moyenne')) return 'pme';\n        if (normalized.includes('eti') || normalized.includes('intermediaire')) return 'eti';\n        if (normalized.includes('groupe') || normalized.includes('grand') || normalized.includes('multinational')) return 'groupe';\n        \n        return null;\n    }\n\n    inferCandidateProfile(candidateData) {\n        // Logique d'inf√©rence bas√©e sur motivations, exp√©rience, etc.\n        const motivations = candidateData.motivations || [];\n        \n        if (motivations.includes('autonomie') || motivations.includes('innovation')) {\n            return 'entrepreneur';\n        }\n        if (motivations.includes('stabilite') || motivations.includes('carriere')) {\n            return 'stabilite';\n        }\n        if (motivations.includes('prestige') || motivations.includes('international')) {\n            return 'prestige';\n        }\n        \n        return 'equilibre';\n    }\n\n    extractEmployeeCount(jobData, companyData) {\n        const sources = [\n            jobData.effectif,\n            jobData.employee_count,\n            companyData.effectif,\n            companyData.employee_count,\n            companyData.taille\n        ];\n        \n        for (const source of sources) {\n            if (source && typeof source === 'number') {\n                return source;\n            }\n            if (source && typeof source === 'string') {\n                const match = source.match(/(\\d+)/);\n                if (match) {\n                    return parseInt(match[1]);\n                }\n            }\n        }\n        \n        return null;\n    }\n\n    determineCompanyCategory(profile) {\n        // Priorit√© √† la taille explicite\n        if (profile.explicit_size) {\n            return profile.explicit_size;\n        }\n        \n        // Sinon, bas√© sur le nombre d'employ√©s\n        if (profile.employee_count) {\n            for (const [category, data] of Object.entries(this.sizeCategories)) {\n                if (profile.employee_count >= data.employees.min && profile.employee_count <= data.employees.max) {\n                    return category;\n                }\n            }\n        }\n        \n        // Sinon, taille inf√©r√©e\n        return profile.inferred_size || 'pme'; // D√©faut PME\n    }\n\n    calculateCategoryProximity(preferred, actual) {\n        const proximityMatrix = {\n            startup: { startup: 1.0, pme: 0.7, eti: 0.4, groupe: 0.2 },\n            pme: { startup: 0.7, pme: 1.0, eti: 0.8, groupe: 0.5 },\n            eti: { startup: 0.4, pme: 0.8, eti: 1.0, groupe: 0.7 },\n            groupe: { startup: 0.2, pme: 0.5, eti: 0.7, groupe: 1.0 }\n        };\n        \n        return proximityMatrix[preferred]?.[actual] || 0.5;\n    }\n\n    // M√©thodes placeholder\n    extractSizeRelatedMotivations(candidateData) { return []; }\n    extractExperienceSizes(candidateData) { return []; }\n    assessCandidateFlexibility(candidateData) { return 'medium'; }\n    extractExplicitSize(jobData, companyData) { return null; }\n    inferCompanySize(jobData, companyData) { return null; }\n    analyzeCultureIndicators(jobData, companyData, category) { return {}; }\n    calculateExperienceBonus(experienceSizes, companyCategory) { return 0; }\n    evaluateProfileMatch(profile, category) { return 0.7; }\n    getCulturalMotivationFit(motivation, culture) { return 0.05; }\n    alignsWithCulture(cultureValue, indicatorValue) { return true; }\n    extractSector(jobData) { return jobData.secteur || 'default'; }\n    getImportanceFactor(importance) { return 0.5; }\n    identifySizeStrengths(preferences, profile) { return []; }\n    identifyPotentialConcerns(preferences, profile) { return []; }\n    generateAdaptationRecommendations(preferences, profile) { return []; }\n    assessSizeDataQuality(preferences, profile) { return 0.8; }\n    calculateSizeConfidence(preferences, profile) { return 0.85; }\n\n    generateSizeCacheKey(candidateData, jobData, companyData) {\n        const key = JSON.stringify({\n            preference: candidateData.taille_entreprise_preference,\n            effectif: companyData.effectif,\n            company_name: companyData.nom\n        });\n        return btoa(key).substring(0, 20);\n    }\n\n    isCacheValid(cached) {\n        return (Date.now() - cached.timestamp) < 900000; // 15 minutes\n    }\n\n    validateSizeData(candidatePreferences, companyProfile) {\n        return candidatePreferences.explicit || candidatePreferences.inferred_profile || companyProfile.category;\n    }\n\n    getFallbackScore(reason) {\n        return {\n            finalScore: 0.5,\n            error: reason,\n            fallback: true,\n            timestamp: new Date().toISOString()\n        };\n    }\n\n    updateMetrics(analysisTime, wasCacheHit) {\n        this.metrics.totalAnalyses++;\n        this.metrics.averageAnalysisTime = \n            (this.metrics.averageAnalysisTime * (this.metrics.totalAnalyses - 1) + analysisTime) \n            / this.metrics.totalAnalyses;\n            \n        if (wasCacheHit) {\n            this.metrics.cacheHitRate = \n                (this.metrics.cacheHitRate * (this.metrics.totalAnalyses - 1) + 1) \n                / this.metrics.totalAnalyses;\n        }\n    }\n}\n\n// Export pour int√©gration\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = CompanySizeMatcher;\n}\n\nif (typeof window !== 'undefined') {\n    window.CompanySizeMatcher = CompanySizeMatcher;\n    console.log('üè¢ CompanySizeMatcher disponible - Crit√®re #5 (8%)');\n}