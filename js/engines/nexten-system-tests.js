/**
 * NEXTEN SYSTEM TESTS - Validation Compl√®te du Syst√®me 100%
 * Tests fonctionnels et de performance pour tous les crit√®res
 */

class NextenSystemTests {
    constructor() {
        this.testResults = [];
        this.performanceMetrics = {
            totalTests: 0,
            passedTests: 0,
            failedTests: 0,
            averageExecutionTime: 0
        };
    }

    /**
     * DONN√âES DE TEST - PROFIL DOROTH√âE LIM
     * Candidat de r√©f√©rence pour validation syst√®me
     */
    getTestCandidateProfile() {
        return {
            id: 'dorothee_lim_test',
            nom: 'Lim',
            prenom: 'Doroth√©e',
            
            // Donn√©es g√©ographiques
            adresse: '15 Rue de la Pompe, 75016 Paris',
            coordonnees: { lat: 48.8738, lng: 2.2754 },
            mobilite_acceptee: 'paris_banlieue',
            duree_trajet_max: '45min',
            preferences_transport: ['metro', 'rer', 'bus'],
            
            // Exp√©rience professionnelle
            experiences: [
                {
                    intitule: 'Responsable Marketing Luxe',
                    entreprise: 'Chanel',
                    secteur: 'luxe',
                    date_debut: '2020-01-01',
                    date_fin: '2024-12-31',
                    missions: [
                        'Gestion portfolio produits parfums haut de gamme',
                        'Strat√©gie marketing digital luxury brands',
                        'Management √©quipe 8 personnes',
                        'Lancement produits exclusifs'
                    ],
                    description: 'Direction marketing op√©rationnel pour division parfums'
                },
                {
                    intitule: 'Chef de Produit Senior',
                    entreprise: 'L\'Or√©al Luxe',
                    secteur: 'cosm√©tique',
                    date_debut: '2017-06-01',
                    date_fin: '2019-12-31',
                    missions: [
                        'D√©veloppement gamme skincare premium',
                        'Analyse concurrentielle march√© beaut√©',
                        'Coordination √©quipes R&D et marketing',
                        'Gestion budget 2M‚Ç¨'
                    ]
                }
            ],
            
            // Comp√©tences
            competences: [
                'Marketing Luxe', 'Gestion de Produit', 'Management d\'√âquipe',
                'Strat√©gie Digitale', 'Codes Luxe', 'Parfumerie',
                'Cosm√©tique', 'Leadership', 'Budget Management',
                'Innovation Produit', 'Relation Client VIP'
            ],
            
            // Formation et langues
            niveau_etudes: 'Master Marketing Luxe ESSEC',
            langues: ['Fran√ßais (natif)', 'Anglais (courant)', 'Mandarin (notions)'],
            certifications: ['Google Analytics', 'Certification Parfumerie ISIPCA'],
            
            // Pr√©f√©rences et contraintes
            salaire_actuel: 75000,
            pretentions: 85000,
            teletravail: 'hybrid_3_2',
            disponibilite: '2025-02-01',
            preavis: '3 mois',
            mobilite: 'paris_idf',
            heures_sup: 'occasionnellement',
            
            // Motivations et valeurs
            motivations: 'Passion pour l\'univers du luxe et la beaut√©. Recherche poste √† responsabilit√©s avec √©quipe √† manager dans environnement cr√©atif et exigeant.',
            objectifs: '√âvoluer vers direction marketing dans maison de luxe prestigieuse',
            valeurs: ['excellence', 'cr√©ativit√©', 'authenticit√©', 'innovation'],
            
            // Situation actuelle
            situation: 'En poste, recherche active pour √©volution'
        };
    }

    /**
     * POSTE DE TEST - DIRECTEUR MARKETING LUXE
     */
    getTestJobOffer() {
        return {
            id: 'directeur_marketing_luxe_paris',
            intitule: 'Directeur Marketing - Division Parfums',
            entreprise: 'Maison de Luxe Parisienne',
            secteur: 'luxe',
            
            // Localisation
            adresse: '1 Place Vend√¥me, 75001 Paris',
            coordonnees: { lat: 48.8675, lng: 2.3292 },
            quartier: 'Place Vend√¥me',
            accessibilite: ['metro_1', 'metro_7', 'metro_14'],
            
            // Description poste
            description: `
                Nous recherchons un Directeur Marketing exp√©riment√© pour diriger notre division parfums.
                Rattach√© √† la Direction G√©n√©rale, vous piloterez la strat√©gie marketing globale de nos fragrances exclusives.
                Management d'une √©quipe de 12 personnes dans un environnement exigeant et cr√©atif.
                Connaissance imp√©rative des codes du luxe et exp√©rience en parfumerie souhait√©e.
                D√©placements r√©guliers (boutiques, √©v√©nements, salons internationaux).
            `,
            
            // Exigences
            experience_requise: '8 ans minimum',
            niveau_poste: 'directeur',
            competences_requises: [
                'Marketing Luxe', 'Management', 'Parfumerie', 'Strat√©gie',
                'Codes Luxe', 'Leadership', 'Innovation', 'Budget'
            ],
            formation_requise: 'Master Marketing/Commerce',
            langues_requises: ['Fran√ßais', 'Anglais'],
            
            // Conditions
            salaire: 95000,
            remuneration: 'Fixe + Variable + Avantages',
            teletravail: 'hybrid_2_3',
            horaires: 'flexible avec core hours 10h-16h',
            deplacement: 'r√©gulier (5j/mois)',
            
            // Package
            avantages: [
                'Mutuelle premium',
                'Tickets restaurant',
                'Transport rembours√©',
                'Formation continue',
                'Produits gratuits',
                'Participation √©v√©nements'
            ],
            evolution_possible: 'excellent',
            
            // Urgence et timing
            date_prise_poste: '2025-03-01',
            urgence: 'normal',
            priorite: 'haute'
        };
    }

    /**
     * DONN√âES ENTREPRISE DE TEST
     */
    getTestCompanyData() {
        return {
            id: 'maison_luxe_paris',
            nom: 'Maison de Luxe Parisienne',
            secteur: 'luxe',
            taille: 'grande_entreprise',
            effectifs: 2500,
            
            // Culture entreprise
            valeurs: ['excellence', 'tradition', 'innovation', 'savoir_vivre'],
            culture: 'luxe_traditionnel',
            management_style: 'directif_bienveillant',
            
            // Politiques RH
            remote_policy: 'hybrid_2_3',
            horaires: 'flexible',
            formation: 'continue',
            
            // Avantages
            avantages: [
                'mutuelle', 'tickets_restaurant', 'transport',
                'formation', 'produits_gratuits', 'participation_evenements'
            ],
            
            // Localisation
            siege: 'Paris 1er',
            implantations: ['Paris', 'London', 'New York', 'Tokyo']
        };
    }

    /**
     * TEST COMPLET DU SYST√àME
     */
    async runCompleteSystemTest() {
        console.log('üß™ NEXTEN COMPLETE SYSTEM TEST - D√©marrage...\n');
        
        const testCandidate = this.getTestCandidateProfile();
        const testJob = this.getTestJobOffer();
        const testCompany = this.getTestCompanyData();
        
        // Initialisation du syst√®me
        const system = new NextenUnifiedSystem();
        
        try {
            // Test principal
            const startTime = performance.now();
            const result = await system.calculateCompleteMatchingScore(testCandidate, testJob, testCompany);
            const endTime = performance.now();
            
            const executionTime = endTime - startTime;
            
            // Validation des r√©sultats
            const validationResults = this.validateSystemResults(result, executionTime);
            
            // Affichage des r√©sultats
            this.displayTestResults(result, validationResults, executionTime);
            
            // Test de performance
            const performanceTests = await this.runPerformanceTests(system, testCandidate, testJob, testCompany);
            
            return {
                success: validationResults.overall,
                result: result,
                validation: validationResults,
                performance: performanceTests,
                executionTime: executionTime
            };
            
        } catch (error) {
            console.error('‚ùå Erreur lors du test syst√®me:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * VALIDATION DES R√âSULTATS
     */
    validateSystemResults(result, executionTime) {
        const validations = {
            structure: this.validateResultStructure(result),
            performance: this.validatePerformance(result, executionTime),
            scoring: this.validateScoring(result),
            consistency: this.validateConsistency(result),
            overall: false
        };
        
        validations.overall = Object.values(validations).every(v => v === true);
        return validations;
    }

    validateResultStructure(result) {
        const requiredFields = [
            'finalScore', 'qualityLevel', 'criteriaBreakdown',
            'insights', 'performance', 'metadata'
        ];
        
        const hasAllFields = requiredFields.every(field => result.hasOwnProperty(field));
        
        if (!hasAllFields) {
            console.log('‚ùå Structure incompl√®te');
            return false;
        }
        
        const requiredCriteria = ['semantic', 'commute', 'experience', 'cultural', 'availability', 'bonus'];
        const hasAllCriteria = requiredCriteria.every(criterion => 
            result.criteriaBreakdown.hasOwnProperty(criterion)
        );
        
        if (!hasAllCriteria) {
            console.log('‚ùå Crit√®res manquants');
            return false;
        }
        
        console.log('‚úÖ Structure des r√©sultats valide');
        return true;
    }

    validatePerformance(result, executionTime) {
        const maxTime = 150; // 150ms max
        
        if (executionTime > maxTime) {
            console.log(`‚ùå Performance: ${executionTime.toFixed(1)}ms > ${maxTime}ms`);
            return false;
        }
        
        console.log(`‚úÖ Performance: ${executionTime.toFixed(1)}ms < ${maxTime}ms`);
        return true;
    }

    validateScoring(result) {
        const score = result.finalScore;
        
        if (score < 0 || score > 1) {
            console.log(`‚ùå Score invalide: ${score}`);
            return false;
        }
        
        // Validation coh√©rence pond√©ration
        const breakdown = result.criteriaBreakdown;
        const calculatedScore = (
            breakdown.semantic.score * breakdown.semantic.weight +
            breakdown.commute.score * breakdown.commute.weight +
            breakdown.experience.score * breakdown.experience.weight +
            breakdown.cultural.score * breakdown.cultural.weight +
            breakdown.availability.score * breakdown.availability.weight +
            breakdown.bonus.score * breakdown.bonus.weight
        );
        
        const scoreDifference = Math.abs(score - calculatedScore);
        if (scoreDifference > 0.05) {
            console.log(`‚ùå Incoh√©rence scoring: ${score} vs ${calculatedScore}`);
            return false;
        }
        
        console.log(`‚úÖ Scoring coh√©rent: ${(score * 100).toFixed(1)}%`);
        return true;
    }

    validateConsistency(result) {
        // V√©rification que le profil test donne un bon score
        const expectedMinScore = 0.75; // Doroth√©e devrait avoir un bon score
        
        if (result.finalScore < expectedMinScore) {
            console.log(`‚ö†Ô∏è  Score plus faible qu'attendu: ${(result.finalScore * 100).toFixed(1)}% < ${(expectedMinScore * 100)}%`);
            return false;
        }
        
        console.log('‚úÖ Consistance des r√©sultats valid√©e');
        return true;
    }

    /**
     * TESTS DE PERFORMANCE
     */
    async runPerformanceTests(system, candidate, job, company) {
        console.log('\nüèÉ‚Äç‚ôÇÔ∏è Tests de performance...');
        
        const iterations = 5;
        const times = [];
        
        for (let i = 0; i < iterations; i++) {
            const start = performance.now();
            await system.calculateCompleteMatchingScore(candidate, job, company);
            const end = performance.now();
            times.push(end - start);
        }
        
        const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
        const minTime = Math.min(...times);
        const maxTime = Math.max(...times);
        
        console.log(`üìä Performance moyenne: ${avgTime.toFixed(1)}ms`);
        console.log(`‚ö° Plus rapide: ${minTime.toFixed(1)}ms`);
        console.log(`üêå Plus lent: ${maxTime.toFixed(1)}ms`);
        
        return {
            averageTime: avgTime,
            minTime: minTime,
            maxTime: maxTime,
            iterations: iterations
        };
    }

    /**
     * AFFICHAGE R√âSULTATS D√âTAILL√âS
     */
    displayTestResults(result, validations, executionTime) {
        console.log('\nüìä R√âSULTATS DU TEST SYST√àME NEXTEN');
        console.log('=====================================');
        
        // Score global
        console.log(`üéØ Score Final: ${(result.finalScore * 100).toFixed(1)}%`);
        console.log(`üèÜ Niveau Qualit√©: ${result.qualityLevel}`);
        console.log(`‚è±Ô∏è  Temps d'ex√©cution: ${executionTime.toFixed(1)}ms`);
        
        // Breakdown par crit√®re
        console.log('\nüìã D√©tail par Crit√®re:');
        Object.entries(result.criteriaBreakdown).forEach(([criterion, data]) => {
            const score = (data.score * 100).toFixed(1);
            const weight = (data.weight * 100).toFixed(0);
            console.log(`  ${criterion}: ${score}% (poids: ${weight}%)`);
        });
        
        // Insights
        console.log('\nüí° Insights:');
        if (result.insights.strengths.length > 0) {
            console.log('  Forces:');
            result.insights.strengths.forEach(strength => {
                console.log(`    - ${strength.criterion}: ${(strength.score * 100).toFixed(0)}%`);
            });
        }
        
        if (result.insights.weaknesses.length > 0) {
            console.log('  Faiblesses:');
            result.insights.weaknesses.forEach(weakness => {
                console.log(`    - ${weakness.criterion}: ${(weakness.score * 100).toFixed(0)}%`);
            });
        }
        
        // Recommandations
        console.log('\nüìù Recommandations:');
        result.insights.recommendations.forEach(rec => {
            console.log(`  ${rec.priority}: ${rec.message}`);
        });
        
        // Validation
        console.log('\n‚úÖ Validation:');
        Object.entries(validations).forEach(([test, passed]) => {
            const status = passed ? '‚úÖ' : '‚ùå';
            console.log(`  ${status} ${test}`);
        });
        
        console.log('\n=====================================');
    }

    /**
     * TEST STRESS SYST√àME
     */
    async runStressTest(iterations = 100) {
        console.log(`\nüî• STRESS TEST - ${iterations} it√©rations...`);
        
        const system = new NextenUnifiedSystem();
        const candidate = this.getTestCandidateProfile();
        const job = this.getTestJobOffer();
        const company = this.getTestCompanyData();
        
        const results = [];
        const errors = [];
        
        for (let i = 0; i < iterations; i++) {
            try {
                const start = performance.now();
                const result = await system.calculateCompleteMatchingScore(candidate, job, company);
                const end = performance.now();
                
                results.push({
                    iteration: i,
                    score: result.finalScore,
                    time: end - start,
                    cacheHit: result.performance.cacheHit
                });
                
                if (i % 10 === 0) {
                    console.log(`  Progression: ${i}/${iterations}`);
                }
                
            } catch (error) {
                errors.push({ iteration: i, error: error.message });
            }
        }
        
        // Analyse des r√©sultats
        const avgScore = results.reduce((sum, r) => sum + r.score, 0) / results.length;
        const avgTime = results.reduce((sum, r) => sum + r.time, 0) / results.length;
        const cacheHitRate = results.filter(r => r.cacheHit).length / results.length;
        
        console.log(`\nüìä R√©sultats Stress Test:`);
        console.log(`  ‚úÖ Succ√®s: ${results.length}/${iterations}`);
        console.log(`  ‚ùå Erreurs: ${errors.length}/${iterations}`);
        console.log(`  üìä Score moyen: ${(avgScore * 100).toFixed(1)}%`);
        console.log(`  ‚è±Ô∏è  Temps moyen: ${avgTime.toFixed(1)}ms`);
        console.log(`  üéØ Cache hit rate: ${(cacheHitRate * 100).toFixed(1)}%`);
        
        return {
            success: errors.length === 0,
            results: results,
            errors: errors,
            avgScore: avgScore,
            avgTime: avgTime,
            cacheHitRate: cacheHitRate
        };
    }
}

// Export pour utilisation
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NextenSystemTests;
}

if (typeof window !== 'undefined') {
    window.NextenSystemTests = NextenSystemTests;
    
    // Auto-ex√©cution du test si en mode debug
    if (window.location.search.includes('test=nexten')) {
        window.addEventListener('load', async () => {
            console.log('üöÄ Auto-ex√©cution des tests Nexten...');
            const tests = new NextenSystemTests();
            await tests.runCompleteSystemTest();
        });
    }
}
