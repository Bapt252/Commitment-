/**
 * TESTS COMPLETS NEXTEN COMMUTE SCENARIOS
 * Validation des crit√®res #1 + #2 avec donn√©es r√©elles Paris/Banlieue
 * Extension du profil Doroth√©e Lim avec g√©olocalisation
 */

class NextenCommuteScenarioTester {
    constructor() {
        this.commuteOptimizer = new CommuteOptimizer();
        this.geoMatcher = null; // Initialis√© si NextenGeoMatcher disponible
        
        this.initializeTestData();
    }

    /**
     * DONN√âES TEST √âTENDUES - DOROTH√âE LIM GEO
     * Profil complet avec g√©olocalisation pour tests crit√®res #1 + #2
     */
    initializeTestData() {
        this.dorotheeLimExtended = {
            // === DONN√âES S√âMANTIQUES (Crit√®re #1) ===
            experiences_professionnelles: [
                {
                    poste: "Office Manager",
                    entreprise: "Herm√®s",
                    date_debut: "2020",
                    date_fin: "2024",
                    missions: [
                        "Coordination administrative g√©n√©rale",
                        "Gestion des syst√®mes SAP et ERP",
                        "Support √† la direction g√©n√©rale",
                        "Organisation des plannings √©quipes",
                        "Interface avec les clients VIP"
                    ]
                },
                {
                    poste: "Assistante Direction",
                    entreprise: "By Kilian",
                    date_debut: "2018",
                    date_fin: "2020",
                    missions: [
                        "Organisation planning direction",
                        "Gestion de projets cosm√©tiques",
                        "Interface clients et partenaires",
                        "Coordination √©v√©nements luxe"
                    ]
                }
            ],
            competences_detaillees: [
                "SAP Business One", "ERP Management", "Microsoft Office Expert",
                "Gestion administrative", "Coordination √©quipes", "Planning et organisation",
                "Relation client VIP", "Secteur luxe et cosm√©tique", "MyEasyOrder"
            ],
            
            // === NOUVELLES DONN√âES G√âOGRAPHIQUES (Crit√®re #2) ===
            adresse: "Boulogne-Billancourt, 92100",
            coordonnees: { lat: 48.8356, lng: 2.2501 },
            preferences_transport: ["metro", "tramway", "velo"],
            mobilite_acceptee: "paris_proche_banlieue",
            duree_trajet_max: "45min",
            
            // M√©tadonn√©es additionnelles
            analyse_cv: {
                profil_type: "Profil exp√©riment√© secteur luxe avec expertise administrative",
                secteur_principal: "Luxe et Cosm√©tique"
            }
        };

        this.testJobsParisRegion = {
            // === SC√âNARIO 1: LA D√âFENSE (RER A DIRECT) ===
            defense_excellent: {
                titre_poste: "Office Manager Secteur Luxe",
                mission_principale: "Coordination administrative et gestion ERP environnement luxe",
                competences: ["SAP", "Office Management", "Coordination √©quipes", "ERP", "Secteur luxe"],
                experience_requise: "10+ ans exp√©rience administrative secteur luxe",
                
                // G√©olocalisation
                adresse: "La D√©fense, 92400 Courbevoie",
                coordonnees: { lat: 48.8908, lng: 2.2383 },
                accessibilite: ["rer_a", "metro_1", "parking", "tramway_t2"],
                
                // Scores attendus
                expected_semantic: 0.90, // Correspondance parfaite
                expected_commute: 0.85,  // RER A direct, ~20min
                expected_combined: 0.87  // Excellent overall
            },

            // === SC√âNARIO 2: R√âPUBLIQUE (M√âTRO DENSE) ===
            republique_good: {
                titre_poste: "Coordinatrice Administrative",
                mission_principale: "Coordination administrative et support direction",
                competences: ["Coordination", "Microsoft Office", "Gestion administrative", "Planning"],
                experience_requise: "5+ ans exp√©rience administrative",
                
                // G√©olocalisation
                adresse: "R√©publique, 75003 Paris",
                coordonnees: { lat: 48.8673, lng: 2.3629 },
                accessibilite: ["metro_3", "metro_5", "metro_8", "metro_9", "metro_11"],
                
                // Scores attendus
                expected_semantic: 0.75, // Bonne correspondance
                expected_commute: 0.78,  // M√©tro + tramway, ~25min
                expected_combined: 0.765
            },

            // === SC√âNARIO 3: ISSY-LES-MOULINEAUX (TRAMWAY) ===
            issy_moderate: {
                titre_poste: "Assistante Direction",
                mission_principale: "Support administratif √† la direction",
                competences: ["Microsoft Office", "Organisation", "Communication"],
                experience_requise: "3+ ans exp√©rience",
                
                // G√©olocalisation
                adresse: "Issy-les-Moulineaux, 92130",
                coordonnees: { lat: 48.8247, lng: 2.2733 },
                accessibilite: ["tramway_t2", "metro_12", "bus"],
                
                // Scores attendus
                expected_semantic: 0.55, // Correspondance partielle
                expected_commute: 0.70,  // Tramway direct, ~15min
                expected_combined: 0.605
            },

            // === SC√âNARIO 4: SAINT-DENIS (BANLIEUE COMPLEXE) ===
            saint_denis_challenging: {
                titre_poste: "Gestionnaire Administrative",
                mission_principale: "Gestion administrative courante",
                competences: ["Administration", "Organisation"],
                experience_requise: "2+ ans",
                
                // G√©olocalisation
                adresse: "Saint-Denis, 93200",
                coordonnees: { lat: 48.9362, lng: 2.3574 },
                accessibilite: ["rer_b", "rer_d", "metro_13"],
                
                // Scores attendus
                expected_semantic: 0.35, // Correspondance faible
                expected_commute: 0.40,  // Trajet complexe, ~45min
                expected_combined: 0.368
            }
        };
    }

    /**
     * EX√âCUTION COMPL√àTE DES TESTS G√âOGRAPHIQUES
     */
    async runCompleteCommuteTests() {
        console.log("üó∫Ô∏è TESTS NEXTEN COMMUTE OPTIMIZER - SCENARIOS PARIS");
        console.log("==================================================");
        
        const results = {};
        
        for (const [scenarioName, jobData] of Object.entries(this.testJobsParisRegion)) {
            console.log(`\nüîç SC√âNARIO: ${scenarioName.toUpperCase()}`);
            console.log(`üìç Lieu: ${jobData.adresse}`);
            console.log("-".repeat(60));
            
            const result = await this.testCommuteScenario(this.dorotheeLimExtended, jobData);
            results[scenarioName] = result;
            
            this.displayScenarioResult(scenarioName, result, jobData);
        }
        
        // Rapport global
        console.log("\nüìä RAPPORT GLOBAL COMMUTE TESTS");
        console.log("=================================");
        this.generateGlobalReport(results);
        
        return results;
    }

    /**
     * TEST D'UN SC√âNARIO SP√âCIFIQUE
     */
    async testCommuteScenario(candidateData, jobData) {
        const startTime = performance.now();
        
        try {
            // Test du CommuteOptimizer seul
            const commuteResult = await this.commuteOptimizer.calculateCommuteScore(candidateData, jobData);
            
            // Test int√©gr√© si GeoMatcher disponible
            let integratedResult = null;
            if (this.geoMatcher) {
                integratedResult = await this.geoMatcher.enhancedGeoMatching('dorothee_test', 'job_test');
            }
            
            const totalTime = performance.now() - startTime;
            
            return {
                commute_only: commuteResult,
                integrated: integratedResult,
                performance: {
                    calculation_time: totalTime,
                    meets_target: totalTime < 100 // Objectif < 100ms
                }
            };
            
        } catch (error) {
            console.error(`Erreur test sc√©nario:`, error);
            return { error: error.message };
        }
    }

    /**
     * AFFICHAGE R√âSULTAT SC√âNARIO
     */
    displayScenarioResult(scenarioName, result, expectedJobData) {
        if (result.error) {
            console.log(`‚ùå Erreur: ${result.error}`);
            return;
        }
        
        const commuteResult = result.commute_only;
        const performance = result.performance;
        
        // Score et performance
        console.log(`üéØ Score trajet: ${(commuteResult.finalScore * 100).toFixed(1)}% (attendu: ${(expectedJobData.expected_commute * 100).toFixed(0)}%)`);
        console.log(`‚è±Ô∏è  Temps calcul: ${performance.calculation_time.toFixed(2)}ms ${performance.meets_target ? '‚úÖ' : '‚ùå'}`);
        console.log(`üöÄ Mode recommand√©: ${commuteResult.bestMode}`);
        
        // D√©tail par mode de transport
        if (commuteResult.breakdown) {
            console.log("\nüöå D√âTAIL PAR MODE:");
            Object.entries(commuteResult.breakdown).forEach(([mode, data]) => {
                const duration = Math.round(data.duration);
                const score = (data.score * 100).toFixed(0);
                const icon = this.getModeIcon(mode);
                console.log(`  ${icon} ${mode}: ${duration}min (${score}%)`);
            });
        }
        
        // Recommandation
        if (commuteResult.details?.recommendation) {
            console.log(`\nüí° Recommandation: ${commuteResult.details.recommendation.reason}`);
        }
        
        // Alternatives
        if (commuteResult.details?.alternatives?.length > 0) {
            console.log("üîÑ Alternatives:");
            commuteResult.details.alternatives.forEach(alt => {
                console.log(`  ‚Ä¢ ${alt.mode}: ${alt.duration} (${alt.score})`);
            });
        }
        
        // Validation vs attendu
        const scoreInRange = this.isScoreInExpectedRange(
            commuteResult.finalScore, 
            expectedJobData.expected_commute, 
            0.1
        );
        console.log(`\n‚úÖ Validation: ${scoreInRange ? 'PASS' : 'FAIL'} (tol√©rance ¬±10%)`);
    }

    /**
     * TEST STRESS PERFORMANCE
     */
    async performanceStressTest() {
        console.log("\n‚ö° STRESS TEST PERFORMANCE COMMUTE");
        console.log("==================================");
        
        const iterations = 50;
        const scenario = this.testJobsParisRegion.defense_excellent;
        const times = [];
        
        console.log(`Ex√©cution de ${iterations} calculs...`);
        
        for (let i = 0; i < iterations; i++) {
            const startTime = performance.now();
            await this.commuteOptimizer.calculateCommuteScore(this.dorotheeLimExtended, scenario);
            times.push(performance.now() - startTime);
            
            if ((i + 1) % 10 === 0) {
                process.stdout.write(`${i + 1}... `);
            }
        }
        
        console.log("\n");
        
        // Analyse des r√©sultats
        const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
        const maxTime = Math.max(...times);
        const minTime = Math.min(...times);
        const p95Time = times.sort((a, b) => a - b)[Math.floor(times.length * 0.95)];
        
        console.log(`üìä R√©sultats (${iterations} it√©rations):`);
        console.log(`  ‚Ä¢ Temps moyen: ${avgTime.toFixed(2)}ms`);
        console.log(`  ‚Ä¢ Temps min: ${minTime.toFixed(2)}ms`);
        console.log(`  ‚Ä¢ Temps max: ${maxTime.toFixed(2)}ms`);
        console.log(`  ‚Ä¢ P95: ${p95Time.toFixed(2)}ms`);
        console.log(`  ‚Ä¢ Objectif < 100ms: ${avgTime < 100 ? '‚úÖ ATTEINT' : '‚ùå NON ATTEINT'}`);
        
        // M√©triques cache
        const cacheReport = this.commuteOptimizer.getPerformanceReport();
        console.log(`\nüíæ Efficacit√© cache:`);
        console.log(`  ‚Ä¢ Hit rate global: ${cacheReport.cacheHitRate}`);
        console.log(`  ‚Ä¢ Cache Level 1: ${cacheReport.cacheBreakdown.level1} hits`);
        console.log(`  ‚Ä¢ Cache Level 2: ${cacheReport.cacheBreakdown.level2} hits`);
        console.log(`  ‚Ä¢ Cache Level 3: ${cacheReport.cacheBreakdown.level3} hits`);
        
        return {
            iterations,
            avgTime,
            maxTime,
            minTime,
            p95Time,
            performanceGoalMet: avgTime < 100,
            cacheEfficiency: cacheReport.cacheHitRate
        };
    }

    /**
     * TEST VALIDIT√â CACHE MULTINIVEAU
     */
    async testCacheEfficiency() {
        console.log("\nüè™ TEST EFFICACIT√â CACHE MULTINIVEAU");
        console.log("====================================");
        
        const scenario = this.testJobsParisRegion.defense_excellent;
        
        // Premier calcul (pas de cache)
        console.log("1Ô∏è‚É£ Premier calcul (population cache)...");
        const result1 = await this.commuteOptimizer.calculateCommuteScore(this.dorotheeLimExtended, scenario);
        console.log(`   Temps: ${result1.performance?.calculationTime?.toFixed(2) || 'N/A'}ms`);
        
        // Deuxi√®me calcul (cache level 1)
        console.log("2Ô∏è‚É£ Deuxi√®me calcul (cache exact)...");
        const result2 = await this.commuteOptimizer.calculateCommuteScore(this.dorotheeLimExtended, scenario);
        console.log(`   Temps: ${result2.performance?.calculationTime?.toFixed(2) || 'N/A'}ms`);
        console.log(`   Cache hit: ${result2.performance?.cacheHit ? '‚úÖ' : '‚ùå'}`);
        
        // Test avec variations g√©ographiques (cache level 2/3)
        console.log("3Ô∏è‚É£ Calculs avec variations g√©ographiques...");
        const variations = [
            { ...this.dorotheeLimExtended, coordonnees: { lat: 48.8356, lng: 2.2505 } }, // L√©g√®re variation
            { ...this.dorotheeLimExtended, coordonnees: { lat: 48.8360, lng: 2.2500 } }  // Autre variation
        ];
        
        for (let i = 0; i < variations.length; i++) {
            const result = await this.commuteOptimizer.calculateCommuteScore(variations[i], scenario);
            console.log(`   Variation ${i + 1}: ${result.performance?.cacheHit ? 'Cache hit' : 'Cache miss'}`);
        }
        
        // Rapport final cache
        const finalReport = this.commuteOptimizer.getPerformanceReport();
        console.log(`\nüìà Efficacit√© finale: ${finalReport.cacheHitRate}`);
        console.log(`üí∞ Co√ªt moyen par calcul: ${finalReport.averageCostPerCalculation}‚Ç¨`);
    }

    /**
     * VALIDATION PR√âF√âRENCES TRANSPORT
     */
    async testTransportPreferences() {
        console.log("\nüöå TEST PR√âF√âRENCES TRANSPORT");
        console.log("=============================");
        
        const baseJob = this.testJobsParisRegion.defense_excellent;
        
        const preferencesVariants = [
            {
                name: "Fan de m√©tro",
                preferences: ["metro", "rer", "transport_public"],
                expected_bonus: "transit"
            },
            {
                name: "Amoureux du v√©lo", 
                preferences: ["velo", "bicyclette", "cyclisme"],
                expected_bonus: "bicycling"
            },
            {
                name: "Conducteur",
                preferences: ["voiture", "vehicule", "conduite"],
                expected_bonus: "driving"
            },
            {
                name: "Marcheur",
                preferences: ["marche", "pied", "walking"],
                expected_bonus: "walking"
            }
        ];
        
        for (const variant of preferencesVariants) {
            console.log(`\nüë§ Profil: ${variant.name}`);
            
            const candidateVariant = {
                ...this.dorotheeLimExtended,
                preferences_transport: variant.preferences
            };
            
            const result = await this.commuteOptimizer.calculateCommuteScore(candidateVariant, baseJob);
            
            if (result.breakdown) {
                const scores = Object.entries(result.breakdown)
                    .map(([mode, data]) => ({ mode, score: data.score }))
                    .sort((a, b) => b.score - a.score);
                
                console.log(`   Mode favoris√©: ${scores[0].mode} (${(scores[0].score * 100).toFixed(0)}%)`);
                console.log(`   Attendu: ${variant.expected_bonus}`);
                console.log(`   Match: ${scores[0].mode === variant.expected_bonus ? '‚úÖ' : '‚ùå'}`);
            }
        }
    }

    /**
     * RAPPORT GLOBAL DES TESTS
     */
    generateGlobalReport(results) {
        const validResults = Object.values(results).filter(r => !r.error);
        
        if (validResults.length === 0) {
            console.log("‚ùå Aucun test valide");
            return;
        }
        
        // Calcul des moyennes
        const avgCommuteScore = validResults.reduce((sum, r) => sum + r.commute_only.finalScore, 0) / validResults.length;
        const avgTime = validResults.reduce((sum, r) => sum + r.performance.calculation_time, 0) / validResults.length;
        const successCount = validResults.filter(r => r.performance.meets_target).length;
        
        console.log(`üìä Score moyen trajets: ${(avgCommuteScore * 100).toFixed(1)}%`);
        console.log(`‚è±Ô∏è  Temps moyen calcul: ${avgTime.toFixed(2)}ms`);
        console.log(`üéØ Objectif performance: ${successCount}/${validResults.length} (${(successCount/validResults.length*100).toFixed(0)}%)`);
        
        // Validation globale
        const allTestsPass = validResults.every(r => r.performance.meets_target);
        console.log(`\nüèÜ VALIDATION GLOBALE: ${allTestsPass ? '‚úÖ TOUS LES TESTS PASSENT' : '‚ùå OPTIMISATION REQUISE'}`);
        
        // Recommandations
        if (!allTestsPass) {
            console.log("\nüí° Recommandations d'optimisation:");
            console.log("   ‚Ä¢ Am√©liorer l'efficacit√© du cache");
            console.log("   ‚Ä¢ Optimiser les calculs de distance");
            console.log("   ‚Ä¢ Parall√©liser les appels API");
        }
    }

    /**
     * UTILITAIRES
     */
    getModeIcon(mode) {
        const icons = {
            driving: "üöó",
            transit: "üöá",
            walking: "üö∂",
            bicycling: "üö¥"
        };
        return icons[mode] || "üöå";
    }

    isScoreInExpectedRange(actualScore, expectedScore, tolerance) {
        return Math.abs(actualScore - expectedScore) <= tolerance;
    }

    /**
     * AUTO-EX√âCUTION COMPL√àTE
     */
    async runAllTests() {
        console.log("üöÄ EX√âCUTION COMPL√àTE TESTS NEXTEN COMMUTE");
        console.log("==========================================");
        
        try {
            // Tests principaux
            await this.runCompleteCommuteTests();
            
            // Tests de performance
            await this.performanceStressTest();
            
            // Tests cache
            await this.testCacheEfficiency();
            
            // Tests pr√©f√©rences
            await this.testTransportPreferences();
            
            console.log("\nüéâ TOUS LES TESTS TERMIN√âS AVEC SUCC√àS!");
            
        } catch (error) {
            console.error("‚ùå Erreur durant les tests:", error);
        }
    }
}

// Auto-ex√©cution si charg√© directement
if (typeof window !== 'undefined') {
    const tester = new NextenCommuteScenarioTester();
    
    // Tests automatiques au chargement
    document.addEventListener('DOMContentLoaded', async () => {
        await tester.runAllTests();
    });
    
    // Export global pour usage manuel
    window.NextenCommuteScenarioTester = NextenCommuteScenarioTester;
    
    // Fonctions utilitaires globales
    window.runCommuteTests = async () => {
        const tester = new NextenCommuteScenarioTester();
        return await tester.runAllTests();
    };
}

// Export pour Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NextenCommuteScenarioTester;
}