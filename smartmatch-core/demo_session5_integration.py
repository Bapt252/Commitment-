#!/usr/bin/env python3
\"\"\"\nDemo Integration - Session 5 Complete System\n============================================\n\nDemonstration of the complete ML optimization system with admin interface.\nThis script shows how to integrate all Session 5 components:\n\n1. Pipeline Orchestrator (auto-training, A/B testing, drift monitoring)\n2. Admin Orchestrator (dashboard, model controller)\n3. Enhanced Skills Matcher (Session 4)\n\nFull system integration with real-time monitoring and control.\n\nAuthor: AI Assistant & Bapt252\nSession: 5 - ML Optimization Intelligence (Complete)\n\"\"\"\n\nimport asyncio\nimport logging\nimport signal\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, Any\n\n# Session 5 imports\nfrom pipeline import PipelineOrchestrator, create_pipeline_config\nfrom admin import AdminOrchestrator, create_admin_config\nfrom datasets import SyntheticDataGenerator, BehaviorSimulator\nfrom optimizers import OptunaSingleObjectiveOptimizer, WeightTuner\nfrom metrics import BusinessMetricsCollector, PerformanceTracker\n\n# Session 4 import\ntry:\n    from matchers.enhanced_skills_matcher import EnhancedSkillsMatcher\nexcept ImportError:\n    logger.error(\"Enhanced Skills Matcher not found. Please ensure Session 4 is properly installed.\")\n    sys.exit(1)\n\n# Setup logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('session5_demo.log'),\n        logging.StreamHandler()\n    ]\n)\nlogger = logging.getLogger(__name__)\n\nclass Session5Integration:\n    \"\"\"\n    Complete integration of Session 5 ML optimization system.\n    Demonstrates real-world usage with all components working together.\n    \"\"\"\n    \n    def __init__(self, config_file: str = None):\n        self.config = self._load_config(config_file)\n        \n        # Core components\n        self.pipeline_orchestrator = None\n        self.admin_orchestrator = None\n        self.enhanced_matcher = None\n        \n        # System state\n        self.is_running = False\n        self.shutdown_event = asyncio.Event()\n        \n        # Setup signal handlers\n        signal.signal(signal.SIGINT, self._signal_handler)\n        signal.signal(signal.SIGTERM, self._signal_handler)\n    \n    def _load_config(self, config_file: str) -> Dict[str, Any]:\n        \"\"\"Load system configuration from file or create default.\"\"\"\n        if config_file and Path(config_file).exists():\n            import json\n            with open(config_file, 'r') as f:\n                return json.load(f)\n        \n        # Default configuration\n        return {\n            'pipeline': {\n                'training_interval': 1800,  # 30 minutes\n                'ab_test_duration': 43200,  # 12 hours\n                'drift_check_interval': 300,  # 5 minutes\n                'training': {\n                    'max_concurrent_jobs': 2,\n                    'validation_splits': 5,\n                    'early_stopping_patience': 15\n                },\n                'ab_testing': {\n                    'min_sample_size': 500,\n                    'significance_level': 0.05,\n                    'power': 0.8\n                },\n                'drift_monitoring': {\n                    'drift_threshold': 0.1,\n                    'performance_threshold': 0.05,\n                    'window_size': 1000\n                }\n            },\n            'admin': {\n                'dashboard_port': 8501,\n                'api_port': 8080,\n                'enable_auth': False,  # Disabled for demo\n                'dashboard': {\n                    'update_interval': 5,\n                    'max_data_points': 500\n                },\n                'model_controller': {\n                    'models_dir': 'session5_models',\n                    'max_versions': 20,\n                    'deployment_timeout': 180\n                },\n                'notifications': {\n                    'webhook_enabled': True,\n                    'webhook_url': 'http://localhost:9000/webhook',\n                    'alert_thresholds': {\n                        'error_rate': 0.05,\n                        'latency_p95': 1000,\n                        'drift_score': 0.15\n                    }\n                }\n            },\n            'enhanced_matcher': {\n                'cache_size': 10000,\n                'batch_size': 100,\n                'enable_caching': True,\n                'embedding_dim': 300,\n                'tfidf_config': {\n                    'max_features': 10000,\n                    'ngram_range': (1, 3)\n                },\n                'hybrid_config': {\n                    'tfidf_weight': 0.4,\n                    'embedding_weight': 0.6\n                }\n            },\n            'demo': {\n                'generate_synthetic_data': True,\n                'synthetic_samples': 1000,\n                'simulate_real_time': True,\n                'run_duration': 3600  # 1 hour\n            }\n        }\n    \n    async def initialize_system(self):\n        \"\"\"Initialize all system components.\"\"\"\n        logger.info(\"Initializing Session 5 Complete System...\")\n        \n        try:\n            # 1. Initialize Enhanced Skills Matcher (Session 4)\n            logger.info(\"Initializing Enhanced Skills Matcher...\")\n            self.enhanced_matcher = EnhancedSkillsMatcher(\n                config=self.config['enhanced_matcher']\n            )\n            \n            # 2. Initialize Pipeline Orchestrator\n            logger.info(\"Initializing Pipeline Orchestrator...\")\n            pipeline_config = create_pipeline_config(**self.config['pipeline'])\n            self.pipeline_orchestrator = PipelineOrchestrator(pipeline_config)\n            \n            # 3. Initialize Admin Orchestrator\n            logger.info(\"Initializing Admin Orchestrator...\")\n            admin_config = create_admin_config(**self.config['admin'])\n            self.admin_orchestrator = AdminOrchestrator(\n                admin_config, \n                pipeline_orchestrator=self.pipeline_orchestrator\n            )\n            \n            # 4. Setup data generation for demo\n            if self.config['demo']['generate_synthetic_data']:\n                await self._setup_synthetic_data()\n            \n            logger.info(\"System initialization complete!\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize system: {e}\")\n            raise\n    \n    async def _setup_synthetic_data(self):\n        \"\"\"Setup synthetic data generation for demonstration.\"\"\"\n        logger.info(\"Setting up synthetic data generation...\")\n        \n        # Generate initial dataset\n        generator = SyntheticDataGenerator()\n        cvs, job_posts = generator.generate_dataset(\n            n_cvs=self.config['demo']['synthetic_samples'],\n            n_job_posts=self.config['demo']['synthetic_samples'] // 2\n        )\n        \n        # Save for pipeline use\n        import pandas as pd\n        pd.DataFrame(cvs).to_json('synthetic_cvs.json', orient='records')\n        pd.DataFrame(job_posts).to_json('synthetic_jobs.json', orient='records')\n        \n        logger.info(f\"Generated {len(cvs)} CVs and {len(job_posts)} job posts\")\n    \n    async def start_system(self):\n        \"\"\"Start the complete system.\"\"\"\n        if self.is_running:\n            logger.warning(\"System already running\")\n            return\n        \n        logger.info(\"Starting Session 5 Complete System...\")\n        self.is_running = True\n        \n        try:\n            # Start pipeline orchestrator\n            logger.info(\"Starting ML Pipeline...\")\n            await self.pipeline_orchestrator.start_pipeline()\n            \n            # Start admin system\n            logger.info(\"Starting Admin System...\")\n            await self.admin_orchestrator.start_admin_system()\n            \n            # Start real-time simulation if enabled\n            if self.config['demo']['simulate_real_time']:\n                asyncio.create_task(self._simulate_real_time_activity())\n            \n            logger.info(\"✅ Session 5 System fully operational!\")\n            logger.info(f\"📊 Dashboard available at: http://localhost:{self.config['admin']['dashboard_port']}\")\n            logger.info(f\"🔧 Admin API available at: http://localhost:{self.config['admin']['api_port']}\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to start system: {e}\")\n            await self.stop_system()\n            raise\n    \n    async def _simulate_real_time_activity(self):\n        \"\"\"Simulate real-time matching activity for demonstration.\"\"\"\n        logger.info(\"Starting real-time simulation...\")\n        \n        behavior_simulator = BehaviorSimulator()\n        \n        iteration = 0\n        while self.is_running:\n            try:\n                iteration += 1\n                \n                # Simulate user behavior\n                activities = behavior_simulator.simulate_batch_activities(\n                    n_activities=50,\n                    activity_types=['matching', 'application', 'view']\n                )\n                \n                # Process some matches with enhanced matcher\n                if iteration % 10 == 0:  # Every 10 iterations\n                    await self._simulate_matching_requests()\n                \n                # Log activity\n                if iteration % 60 == 0:  # Every minute\n                    status = self.get_system_status()\n                    logger.info(f\"System Status - Iteration {iteration}: {status['summary']}\")\n                \n                # Wait before next iteration\n                await asyncio.sleep(1)  # 1 second intervals\n                \n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                logger.error(f\"Error in real-time simulation: {e}\")\n                await asyncio.sleep(5)\n    \n    async def _simulate_matching_requests(self):\n        \"\"\"Simulate matching requests to the enhanced matcher.\"\"\"\n        try:\n            # Mock CV and job post data\n            mock_cv = {\n                'skills': ['Python', 'Machine Learning', 'Data Science'],\n                'experience': 3,\n                'education': 'Master',\n                'location': 'Paris'\n            }\n            \n            mock_job_posts = [\n                {\n                    'required_skills': ['Python', 'ML', 'Statistics'],\n                    'experience_level': 'Mid',\n                    'location': 'Paris',\n                    'title': 'Data Scientist'\n                },\n                {\n                    'required_skills': ['Java', 'Spring', 'Microservices'],\n                    'experience_level': 'Senior',\n                    'location': 'Lyon',\n                    'title': 'Backend Developer'\n                }\n            ]\n            \n            # Perform matching\n            if self.enhanced_matcher:\n                matches = await asyncio.to_thread(\n                    self.enhanced_matcher.match_cv_to_jobs,\n                    mock_cv,\n                    mock_job_posts\n                )\n                \n                logger.debug(f\"Simulated matching: {len(matches)} matches found\")\n                \n        except Exception as e:\n            logger.error(f\"Error in matching simulation: {e}\")\n    \n    async def stop_system(self):\n        \"\"\"Gracefully stop the complete system.\"\"\"\n        logger.info(\"Stopping Session 5 System...\")\n        self.is_running = False\n        \n        try:\n            # Stop admin system\n            if self.admin_orchestrator:\n                await self.admin_orchestrator.stop_admin_system()\n            \n            # Stop pipeline\n            if self.pipeline_orchestrator:\n                await self.pipeline_orchestrator.stop_pipeline()\n            \n            logger.info(\"✅ Session 5 System stopped successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Error stopping system: {e}\")\n    \n    def get_system_status(self) -> Dict[str, Any]:\n        \"\"\"Get comprehensive system status.\"\"\"\n        status = {\n            'timestamp': asyncio.get_event_loop().time(),\n            'is_running': self.is_running,\n            'components': {}\n        }\n        \n        # Pipeline status\n        if self.pipeline_orchestrator:\n            pipeline_status = self.pipeline_orchestrator.get_pipeline_status()\n            status['components']['pipeline'] = pipeline_status\n        \n        # Admin status\n        if self.admin_orchestrator:\n            admin_status = self.admin_orchestrator.get_system_status()\n            status['components']['admin'] = admin_status\n        \n        # Enhanced matcher status\n        if self.enhanced_matcher:\n            status['components']['enhanced_matcher'] = {\n                'initialized': True,\n                'cache_size': getattr(self.enhanced_matcher, 'cache_size', 0)\n            }\n        \n        # Create summary\n        status['summary'] = {\n            'components_active': len([c for c in status['components'].values() if c.get('is_running', False)]),\n            'total_components': len(status['components']),\n            'system_healthy': self.is_running and len(status['components']) > 0\n        }\n        \n        return status\n    \n    def _signal_handler(self, signum, frame):\n        \"\"\"Handle shutdown signals.\"\"\"\n        logger.info(f\"Received signal {signum}, initiating graceful shutdown...\")\n        self.shutdown_event.set()\n    \n    async def run_forever(self):\n        \"\"\"Run the system until shutdown signal.\"\"\"\n        try:\n            # Wait for shutdown signal or configured duration\n            timeout = self.config['demo'].get('run_duration')\n            \n            if timeout:\n                logger.info(f\"System will run for {timeout} seconds\")\n                try:\n                    await asyncio.wait_for(self.shutdown_event.wait(), timeout=timeout)\n                except asyncio.TimeoutError:\n                    logger.info(\"Configured runtime reached, shutting down...\")\n            else:\n                logger.info(\"System running indefinitely (Ctrl+C to stop)\")\n                await self.shutdown_event.wait()\n                \n        finally:\n            await self.stop_system()\n\n# Demo execution functions\nasync def run_demo(config_file: str = None):\n    \"\"\"Run the complete Session 5 demo.\"\"\"\n    integration = Session5Integration(config_file)\n    \n    try:\n        # Initialize\n        await integration.initialize_system()\n        \n        # Start\n        await integration.start_system()\n        \n        # Run\n        await integration.run_forever()\n        \n    except KeyboardInterrupt:\n        logger.info(\"Demo interrupted by user\")\n    except Exception as e:\n        logger.error(f\"Demo failed: {e}\")\n        raise\n    finally:\n        await integration.stop_system()\n\ndef create_demo_config() -> str:\n    \"\"\"Create a demo configuration file.\"\"\"\n    config_path = 'session5_demo_config.json'\n    integration = Session5Integration()\n    \n    import json\n    with open(config_path, 'w') as f:\n        json.dump(integration.config, f, indent=2)\n    \n    logger.info(f\"Demo configuration saved to {config_path}\")\n    return config_path\n\nif __name__ == \"__main__\":\n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"Session 5 Complete System Demo\")\n    parser.add_argument('--config', '-c', help=\"Configuration file path\")\n    parser.add_argument('--create-config', action='store_true', help=\"Create demo configuration file\")\n    parser.add_argument('--verbose', '-v', action='store_true', help=\"Enable verbose logging\")\n    \n    args = parser.parse_args()\n    \n    if args.verbose:\n        logging.getLogger().setLevel(logging.DEBUG)\n    \n    if args.create_config:\n        config_path = create_demo_config()\n        print(f\"Demo configuration created: {config_path}\")\n        print(\"Run with: python demo_session5_integration.py --config\", config_path)\n        sys.exit(0)\n    \n    print(\"\\n🚀 Session 5: ML Optimization Intelligence Demo\")\n    print(\"=\" * 50)\n    print(\"Starting complete system integration...\")\n    \n    try:\n        asyncio.run(run_demo(args.config))\n    except KeyboardInterrupt:\n        print(\"\\n👋 Demo stopped by user\")\n    except Exception as e:\n        print(f\"\\n❌ Demo failed: {e}\")\n        sys.exit(1)\n    \n    print(\"\\n✅ Demo completed successfully!\")\n